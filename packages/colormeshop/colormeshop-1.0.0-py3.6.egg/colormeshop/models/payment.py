# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Payment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'account_id': 'str',
        'name': 'str',
        'fee': 'int',
        'ip_code': 'str',
        'memo': 'str',
        'memo_mobile': 'str',
        'sort': 'int',
        'image_url': 'str',
        'type': 'int',
        'display': 'bool',
        'use_mobile': 'bool',
        'make_date': 'int',
        'update_date': 'int',
        'cod': 'object',
        'card': 'object',
        'financial': 'object'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'name': 'name',
        'fee': 'fee',
        'ip_code': 'ip_code',
        'memo': 'memo',
        'memo_mobile': 'memo_mobile',
        'sort': 'sort',
        'image_url': 'image_url',
        'type': 'type',
        'display': 'display',
        'use_mobile': 'use_mobile',
        'make_date': 'make_date',
        'update_date': 'update_date',
        'cod': 'cod',
        'card': 'card',
        'financial': 'financial'
    }

    def __init__(self, id=None, account_id=None, name=None, fee=None, ip_code=None, memo=None, memo_mobile=None, sort=None, image_url=None, type=None, display=None, use_mobile=None, make_date=None, update_date=None, cod=None, card=None, financial=None):  # noqa: E501
        """Payment - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._account_id = None
        self._name = None
        self._fee = None
        self._ip_code = None
        self._memo = None
        self._memo_mobile = None
        self._sort = None
        self._image_url = None
        self._type = None
        self._display = None
        self._use_mobile = None
        self._make_date = None
        self._update_date = None
        self._cod = None
        self._card = None
        self._financial = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if fee is not None:
            self.fee = fee
        if ip_code is not None:
            self.ip_code = ip_code
        if memo is not None:
            self.memo = memo
        if memo_mobile is not None:
            self.memo_mobile = memo_mobile
        if sort is not None:
            self.sort = sort
        if image_url is not None:
            self.image_url = image_url
        if type is not None:
            self.type = type
        if display is not None:
            self.display = display
        if use_mobile is not None:
            self.use_mobile = use_mobile
        if make_date is not None:
            self.make_date = make_date
        if update_date is not None:
            self.update_date = update_date
        if cod is not None:
            self.cod = cod
        if card is not None:
            self.card = card
        if financial is not None:
            self.financial = financial

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501

        決済方法ID  # noqa: E501

        :return: The id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        決済方法ID  # noqa: E501

        :param id: The id of this Payment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Payment.  # noqa: E501

        ショップアカウントID  # noqa: E501

        :return: The account_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Payment.

        ショップアカウントID  # noqa: E501

        :param account_id: The account_id of this Payment.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this Payment.  # noqa: E501

        決済名  # noqa: E501

        :return: The name of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Payment.

        決済名  # noqa: E501

        :param name: The name of this Payment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fee(self):
        """Gets the fee of this Payment.  # noqa: E501

        決済手数料  # noqa: E501

        :return: The fee of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Payment.

        決済手数料  # noqa: E501

        :param fee: The fee of this Payment.  # noqa: E501
        :type: int
        """

        self._fee = fee

    @property
    def ip_code(self):
        """Gets the ip_code of this Payment.  # noqa: E501

        GMOイプシロン等との契約コード  # noqa: E501

        :return: The ip_code of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._ip_code

    @ip_code.setter
    def ip_code(self, ip_code):
        """Sets the ip_code of this Payment.

        GMOイプシロン等との契約コード  # noqa: E501

        :param ip_code: The ip_code of this Payment.  # noqa: E501
        :type: str
        """

        self._ip_code = ip_code

    @property
    def memo(self):
        """Gets the memo of this Payment.  # noqa: E501

        説明  # noqa: E501

        :return: The memo of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Payment.

        説明  # noqa: E501

        :param memo: The memo of this Payment.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def memo_mobile(self):
        """Gets the memo_mobile of this Payment.  # noqa: E501

        フィーチャーフォン向けショップ用の説明  # noqa: E501

        :return: The memo_mobile of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._memo_mobile

    @memo_mobile.setter
    def memo_mobile(self, memo_mobile):
        """Sets the memo_mobile of this Payment.

        フィーチャーフォン向けショップ用の説明  # noqa: E501

        :param memo_mobile: The memo_mobile of this Payment.  # noqa: E501
        :type: str
        """

        self._memo_mobile = memo_mobile

    @property
    def sort(self):
        """Gets the sort of this Payment.  # noqa: E501

        表示順  # noqa: E501

        :return: The sort of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Payment.

        表示順  # noqa: E501

        :param sort: The sort of this Payment.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def image_url(self):
        """Gets the image_url of this Payment.  # noqa: E501

        決済画像URL  # noqa: E501

        :return: The image_url of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Payment.

        決済画像URL  # noqa: E501

        :param image_url: The image_url of this Payment.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def type(self):
        """Gets the type of this Payment.  # noqa: E501

        決済タイプを表す数値。  |type|決済| |---|---| |0|代引き| |1|銀行振込| |2|郵便振替| |3|クレジット（ZEUS）| |4|クロネコ@ペイメント| |5|NP後払い| |6|クレジット（イプシロン）| |7|コンビニ決済（イプシロン）| |8|カラーミークレジット| |9|その他決済| |10|ウェブマネー| |11|イーバンクデビット| |12|ネット銀行（イプシロン）| |13|電子マネー（イプシロン）| |14|ATM・コンビニ・ネット銀行決済（ペイジェント）| |15|Do-Link決済（イプシロン）| |16|ペイジー（イプシロン）| |17|後払い.com| |18|ジャパンネット銀行（送料無料キャンペーン）| |19|クロネコwebコレクト| |20|PayPal（イプシロン）| |21|Yahoo!ウォレット（イプシロン）| |22|全額ポイント利用| |23|スマートフォンキャリア決済（イプシロン）| |24|GMO PG マルチペイメントクレジットカード| |25|住信SBIネット銀行（イプシロン）| |26|GMO後払い（イプシロン）| |27|GMO後払い（GMOペイメントサービス）| |28| - | |29|ATM（ペイジー）（ペイジェント）| |30|カード（ペイジェント）| |31|コンビニ番号方式（ペイジェント）| |32|インターネットバンキング（ペイジェント）| |33|PayPal（ペイパル）| |34|SMBC GMO PAYMENTクレジットカード| |35|Amazon Pay| |36|楽天ペイ（オンライン決済）|   # noqa: E501

        :return: The type of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Payment.

        決済タイプを表す数値。  |type|決済| |---|---| |0|代引き| |1|銀行振込| |2|郵便振替| |3|クレジット（ZEUS）| |4|クロネコ@ペイメント| |5|NP後払い| |6|クレジット（イプシロン）| |7|コンビニ決済（イプシロン）| |8|カラーミークレジット| |9|その他決済| |10|ウェブマネー| |11|イーバンクデビット| |12|ネット銀行（イプシロン）| |13|電子マネー（イプシロン）| |14|ATM・コンビニ・ネット銀行決済（ペイジェント）| |15|Do-Link決済（イプシロン）| |16|ペイジー（イプシロン）| |17|後払い.com| |18|ジャパンネット銀行（送料無料キャンペーン）| |19|クロネコwebコレクト| |20|PayPal（イプシロン）| |21|Yahoo!ウォレット（イプシロン）| |22|全額ポイント利用| |23|スマートフォンキャリア決済（イプシロン）| |24|GMO PG マルチペイメントクレジットカード| |25|住信SBIネット銀行（イプシロン）| |26|GMO後払い（イプシロン）| |27|GMO後払い（GMOペイメントサービス）| |28| - | |29|ATM（ペイジー）（ペイジェント）| |30|カード（ペイジェント）| |31|コンビニ番号方式（ペイジェント）| |32|インターネットバンキング（ペイジェント）| |33|PayPal（ペイパル）| |34|SMBC GMO PAYMENTクレジットカード| |35|Amazon Pay| |36|楽天ペイ（オンライン決済）|   # noqa: E501

        :param type: The type of this Payment.  # noqa: E501
        :type: int
        """
        if type is not None and type < 0:  # noqa: E501
            raise ValueError("Invalid value for `type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._type = type

    @property
    def display(self):
        """Gets the display of this Payment.  # noqa: E501

        表示設定。`true`なら表示される  # noqa: E501

        :return: The display of this Payment.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Payment.

        表示設定。`true`なら表示される  # noqa: E501

        :param display: The display of this Payment.  # noqa: E501
        :type: bool
        """

        self._display = display

    @property
    def use_mobile(self):
        """Gets the use_mobile of this Payment.  # noqa: E501

        フィーチャーフォン向けショップでの表示設定  # noqa: E501

        :return: The use_mobile of this Payment.  # noqa: E501
        :rtype: bool
        """
        return self._use_mobile

    @use_mobile.setter
    def use_mobile(self, use_mobile):
        """Sets the use_mobile of this Payment.

        フィーチャーフォン向けショップでの表示設定  # noqa: E501

        :param use_mobile: The use_mobile of this Payment.  # noqa: E501
        :type: bool
        """

        self._use_mobile = use_mobile

    @property
    def make_date(self):
        """Gets the make_date of this Payment.  # noqa: E501

        決済作成日時  # noqa: E501

        :return: The make_date of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._make_date

    @make_date.setter
    def make_date(self, make_date):
        """Sets the make_date of this Payment.

        決済作成日時  # noqa: E501

        :param make_date: The make_date of this Payment.  # noqa: E501
        :type: int
        """

        self._make_date = make_date

    @property
    def update_date(self):
        """Gets the update_date of this Payment.  # noqa: E501

        決済更新日時  # noqa: E501

        :return: The update_date of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Payment.

        決済更新日時  # noqa: E501

        :param update_date: The update_date of this Payment.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def cod(self):
        """Gets the cod of this Payment.  # noqa: E501

        代引き決済の設定情報。代引き決済の場合のみ存在する  # noqa: E501

        :return: The cod of this Payment.  # noqa: E501
        :rtype: object
        """
        return self._cod

    @cod.setter
    def cod(self, cod):
        """Sets the cod of this Payment.

        代引き決済の設定情報。代引き決済の場合のみ存在する  # noqa: E501

        :param cod: The cod of this Payment.  # noqa: E501
        :type: object
        """

        self._cod = cod

    @property
    def card(self):
        """Gets the card of this Payment.  # noqa: E501

        クレジットカードの設定情報。クレジットカード決済の場合のみ存在する  # noqa: E501

        :return: The card of this Payment.  # noqa: E501
        :rtype: object
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Payment.

        クレジットカードの設定情報。クレジットカード決済の場合のみ存在する  # noqa: E501

        :param card: The card of this Payment.  # noqa: E501
        :type: object
        """

        self._card = card

    @property
    def financial(self):
        """Gets the financial of this Payment.  # noqa: E501

        銀行振り込みの設定情報。銀行振り込み決済の場合のみ存在する  # noqa: E501

        :return: The financial of this Payment.  # noqa: E501
        :rtype: object
        """
        return self._financial

    @financial.setter
    def financial(self, financial):
        """Sets the financial of this Payment.

        銀行振り込みの設定情報。銀行振り込み決済の場合のみ存在する  # noqa: E501

        :param financial: The financial of this Payment.  # noqa: E501
        :type: object
        """

        self._financial = financial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
