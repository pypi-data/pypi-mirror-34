# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Sale(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'account_id': 'str',
        'make_date': 'int',
        'update_date': 'int',
        'memo': 'str',
        'payment_id': 'int',
        'mobile': 'bool',
        'paid': 'bool',
        'delivered': 'bool',
        'canceled': 'bool',
        'accepted_mail_state': 'str',
        'paid_mail_state': 'str',
        'delivered_mail_state': 'str',
        'accepted_mail_sent_date': 'int',
        'paid_mail_sent_date': 'int',
        'delivered_mail_sent_date': 'int',
        'point_state': 'str',
        'gmo_point_state': 'str',
        'yahoo_point_state': 'str',
        'product_total_price': 'int',
        'delivery_total_charge': 'int',
        'fee': 'int',
        'tax': 'int',
        'noshi_total_charge': 'int',
        'card_total_charge': 'int',
        'wrapping_total_charge': 'int',
        'point_discount': 'int',
        'gmo_point_discount': 'int',
        'other_discount': 'int',
        'other_discount_name': 'str',
        'total_price': 'int',
        'granted_points': 'int',
        'use_points': 'int',
        'granted_gmo_points': 'int',
        'use_gmo_points': 'int',
        'granted_yahoo_points': 'int',
        'use_yahoo_points': 'int',
        'customer': 'Customer',
        'details': 'list[SaleDetail]',
        'sale_deliveries': 'list[SaleDelivery]'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'make_date': 'make_date',
        'update_date': 'update_date',
        'memo': 'memo',
        'payment_id': 'payment_id',
        'mobile': 'mobile',
        'paid': 'paid',
        'delivered': 'delivered',
        'canceled': 'canceled',
        'accepted_mail_state': 'accepted_mail_state',
        'paid_mail_state': 'paid_mail_state',
        'delivered_mail_state': 'delivered_mail_state',
        'accepted_mail_sent_date': 'accepted_mail_sent_date',
        'paid_mail_sent_date': 'paid_mail_sent_date',
        'delivered_mail_sent_date': 'delivered_mail_sent_date',
        'point_state': 'point_state',
        'gmo_point_state': 'gmo_point_state',
        'yahoo_point_state': 'yahoo_point_state',
        'product_total_price': 'product_total_price',
        'delivery_total_charge': 'delivery_total_charge',
        'fee': 'fee',
        'tax': 'tax',
        'noshi_total_charge': 'noshi_total_charge',
        'card_total_charge': 'card_total_charge',
        'wrapping_total_charge': 'wrapping_total_charge',
        'point_discount': 'point_discount',
        'gmo_point_discount': 'gmo_point_discount',
        'other_discount': 'other_discount',
        'other_discount_name': 'other_discount_name',
        'total_price': 'total_price',
        'granted_points': 'granted_points',
        'use_points': 'use_points',
        'granted_gmo_points': 'granted_gmo_points',
        'use_gmo_points': 'use_gmo_points',
        'granted_yahoo_points': 'granted_yahoo_points',
        'use_yahoo_points': 'use_yahoo_points',
        'customer': 'customer',
        'details': 'details',
        'sale_deliveries': 'sale_deliveries'
    }

    def __init__(self, id=None, account_id=None, make_date=None, update_date=None, memo=None, payment_id=None, mobile=None, paid=None, delivered=None, canceled=None, accepted_mail_state=None, paid_mail_state=None, delivered_mail_state=None, accepted_mail_sent_date=None, paid_mail_sent_date=None, delivered_mail_sent_date=None, point_state=None, gmo_point_state=None, yahoo_point_state=None, product_total_price=None, delivery_total_charge=None, fee=None, tax=None, noshi_total_charge=None, card_total_charge=None, wrapping_total_charge=None, point_discount=None, gmo_point_discount=None, other_discount=None, other_discount_name=None, total_price=None, granted_points=None, use_points=None, granted_gmo_points=None, use_gmo_points=None, granted_yahoo_points=None, use_yahoo_points=None, customer=None, details=None, sale_deliveries=None):  # noqa: E501
        """Sale - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._account_id = None
        self._make_date = None
        self._update_date = None
        self._memo = None
        self._payment_id = None
        self._mobile = None
        self._paid = None
        self._delivered = None
        self._canceled = None
        self._accepted_mail_state = None
        self._paid_mail_state = None
        self._delivered_mail_state = None
        self._accepted_mail_sent_date = None
        self._paid_mail_sent_date = None
        self._delivered_mail_sent_date = None
        self._point_state = None
        self._gmo_point_state = None
        self._yahoo_point_state = None
        self._product_total_price = None
        self._delivery_total_charge = None
        self._fee = None
        self._tax = None
        self._noshi_total_charge = None
        self._card_total_charge = None
        self._wrapping_total_charge = None
        self._point_discount = None
        self._gmo_point_discount = None
        self._other_discount = None
        self._other_discount_name = None
        self._total_price = None
        self._granted_points = None
        self._use_points = None
        self._granted_gmo_points = None
        self._use_gmo_points = None
        self._granted_yahoo_points = None
        self._use_yahoo_points = None
        self._customer = None
        self._details = None
        self._sale_deliveries = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if make_date is not None:
            self.make_date = make_date
        if update_date is not None:
            self.update_date = update_date
        if memo is not None:
            self.memo = memo
        if payment_id is not None:
            self.payment_id = payment_id
        if mobile is not None:
            self.mobile = mobile
        if paid is not None:
            self.paid = paid
        if delivered is not None:
            self.delivered = delivered
        if canceled is not None:
            self.canceled = canceled
        if accepted_mail_state is not None:
            self.accepted_mail_state = accepted_mail_state
        if paid_mail_state is not None:
            self.paid_mail_state = paid_mail_state
        if delivered_mail_state is not None:
            self.delivered_mail_state = delivered_mail_state
        if accepted_mail_sent_date is not None:
            self.accepted_mail_sent_date = accepted_mail_sent_date
        if paid_mail_sent_date is not None:
            self.paid_mail_sent_date = paid_mail_sent_date
        if delivered_mail_sent_date is not None:
            self.delivered_mail_sent_date = delivered_mail_sent_date
        if point_state is not None:
            self.point_state = point_state
        if gmo_point_state is not None:
            self.gmo_point_state = gmo_point_state
        if yahoo_point_state is not None:
            self.yahoo_point_state = yahoo_point_state
        if product_total_price is not None:
            self.product_total_price = product_total_price
        if delivery_total_charge is not None:
            self.delivery_total_charge = delivery_total_charge
        if fee is not None:
            self.fee = fee
        if tax is not None:
            self.tax = tax
        if noshi_total_charge is not None:
            self.noshi_total_charge = noshi_total_charge
        if card_total_charge is not None:
            self.card_total_charge = card_total_charge
        if wrapping_total_charge is not None:
            self.wrapping_total_charge = wrapping_total_charge
        if point_discount is not None:
            self.point_discount = point_discount
        if gmo_point_discount is not None:
            self.gmo_point_discount = gmo_point_discount
        if other_discount is not None:
            self.other_discount = other_discount
        if other_discount_name is not None:
            self.other_discount_name = other_discount_name
        if total_price is not None:
            self.total_price = total_price
        if granted_points is not None:
            self.granted_points = granted_points
        if use_points is not None:
            self.use_points = use_points
        if granted_gmo_points is not None:
            self.granted_gmo_points = granted_gmo_points
        if use_gmo_points is not None:
            self.use_gmo_points = use_gmo_points
        if granted_yahoo_points is not None:
            self.granted_yahoo_points = granted_yahoo_points
        if use_yahoo_points is not None:
            self.use_yahoo_points = use_yahoo_points
        if customer is not None:
            self.customer = customer
        if details is not None:
            self.details = details
        if sale_deliveries is not None:
            self.sale_deliveries = sale_deliveries

    @property
    def id(self):
        """Gets the id of this Sale.  # noqa: E501

        売上ID  # noqa: E501

        :return: The id of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sale.

        売上ID  # noqa: E501

        :param id: The id of this Sale.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Sale.  # noqa: E501

        ショップアカウントID  # noqa: E501

        :return: The account_id of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Sale.

        ショップアカウントID  # noqa: E501

        :param account_id: The account_id of this Sale.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def make_date(self):
        """Gets the make_date of this Sale.  # noqa: E501

        受注日時  # noqa: E501

        :return: The make_date of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._make_date

    @make_date.setter
    def make_date(self, make_date):
        """Sets the make_date of this Sale.

        受注日時  # noqa: E501

        :param make_date: The make_date of this Sale.  # noqa: E501
        :type: int
        """

        self._make_date = make_date

    @property
    def update_date(self):
        """Gets the update_date of this Sale.  # noqa: E501

        受注更新日時  # noqa: E501

        :return: The update_date of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Sale.

        受注更新日時  # noqa: E501

        :param update_date: The update_date of this Sale.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def memo(self):
        """Gets the memo of this Sale.  # noqa: E501

        備考  # noqa: E501

        :return: The memo of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Sale.

        備考  # noqa: E501

        :param memo: The memo of this Sale.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def payment_id(self):
        """Gets the payment_id of this Sale.  # noqa: E501

        使用された決済方法ID  # noqa: E501

        :return: The payment_id of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Sale.

        使用された決済方法ID  # noqa: E501

        :param payment_id: The payment_id of this Sale.  # noqa: E501
        :type: int
        """

        self._payment_id = payment_id

    @property
    def mobile(self):
        """Gets the mobile of this Sale.  # noqa: E501

        モバイルからの注文であるか否か  # noqa: E501

        :return: The mobile of this Sale.  # noqa: E501
        :rtype: bool
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Sale.

        モバイルからの注文であるか否か  # noqa: E501

        :param mobile: The mobile of this Sale.  # noqa: E501
        :type: bool
        """

        self._mobile = mobile

    @property
    def paid(self):
        """Gets the paid of this Sale.  # noqa: E501

        入金済みであるか否か  # noqa: E501

        :return: The paid of this Sale.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Sale.

        入金済みであるか否か  # noqa: E501

        :param paid: The paid of this Sale.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def delivered(self):
        """Gets the delivered of this Sale.  # noqa: E501

        発送済みである否か  # noqa: E501

        :return: The delivered of this Sale.  # noqa: E501
        :rtype: bool
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this Sale.

        発送済みである否か  # noqa: E501

        :param delivered: The delivered of this Sale.  # noqa: E501
        :type: bool
        """

        self._delivered = delivered

    @property
    def canceled(self):
        """Gets the canceled of this Sale.  # noqa: E501

        キャンセル済みであるか否か  # noqa: E501

        :return: The canceled of this Sale.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this Sale.

        キャンセル済みであるか否か  # noqa: E501

        :param canceled: The canceled of this Sale.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    @property
    def accepted_mail_state(self):
        """Gets the accepted_mail_state of this Sale.  # noqa: E501

        受注メールの送信状態  - `not_yet`: 未送信 - `sent`: 送信済み - `pass`: 送信しない   # noqa: E501

        :return: The accepted_mail_state of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._accepted_mail_state

    @accepted_mail_state.setter
    def accepted_mail_state(self, accepted_mail_state):
        """Sets the accepted_mail_state of this Sale.

        受注メールの送信状態  - `not_yet`: 未送信 - `sent`: 送信済み - `pass`: 送信しない   # noqa: E501

        :param accepted_mail_state: The accepted_mail_state of this Sale.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_yet", "sent", "pass"]  # noqa: E501
        if accepted_mail_state not in allowed_values:
            raise ValueError(
                "Invalid value for `accepted_mail_state` ({0}), must be one of {1}"  # noqa: E501
                .format(accepted_mail_state, allowed_values)
            )

        self._accepted_mail_state = accepted_mail_state

    @property
    def paid_mail_state(self):
        """Gets the paid_mail_state of this Sale.  # noqa: E501

        入金メールの送信状態  - `not_yet`: 未送信 - `sent`: 送信済み - `pass`: 送信しない   # noqa: E501

        :return: The paid_mail_state of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._paid_mail_state

    @paid_mail_state.setter
    def paid_mail_state(self, paid_mail_state):
        """Sets the paid_mail_state of this Sale.

        入金メールの送信状態  - `not_yet`: 未送信 - `sent`: 送信済み - `pass`: 送信しない   # noqa: E501

        :param paid_mail_state: The paid_mail_state of this Sale.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_yet", "sent", "pass"]  # noqa: E501
        if paid_mail_state not in allowed_values:
            raise ValueError(
                "Invalid value for `paid_mail_state` ({0}), must be one of {1}"  # noqa: E501
                .format(paid_mail_state, allowed_values)
            )

        self._paid_mail_state = paid_mail_state

    @property
    def delivered_mail_state(self):
        """Gets the delivered_mail_state of this Sale.  # noqa: E501

        発送メールの送信状態  - `not_yet`: 未送信 - `sent`: 送信済み - `pass`: 送信しない   # noqa: E501

        :return: The delivered_mail_state of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._delivered_mail_state

    @delivered_mail_state.setter
    def delivered_mail_state(self, delivered_mail_state):
        """Sets the delivered_mail_state of this Sale.

        発送メールの送信状態  - `not_yet`: 未送信 - `sent`: 送信済み - `pass`: 送信しない   # noqa: E501

        :param delivered_mail_state: The delivered_mail_state of this Sale.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_yet", "sent", "pass"]  # noqa: E501
        if delivered_mail_state not in allowed_values:
            raise ValueError(
                "Invalid value for `delivered_mail_state` ({0}), must be one of {1}"  # noqa: E501
                .format(delivered_mail_state, allowed_values)
            )

        self._delivered_mail_state = delivered_mail_state

    @property
    def accepted_mail_sent_date(self):
        """Gets the accepted_mail_sent_date of this Sale.  # noqa: E501

        受注メールの送信日時  # noqa: E501

        :return: The accepted_mail_sent_date of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._accepted_mail_sent_date

    @accepted_mail_sent_date.setter
    def accepted_mail_sent_date(self, accepted_mail_sent_date):
        """Sets the accepted_mail_sent_date of this Sale.

        受注メールの送信日時  # noqa: E501

        :param accepted_mail_sent_date: The accepted_mail_sent_date of this Sale.  # noqa: E501
        :type: int
        """

        self._accepted_mail_sent_date = accepted_mail_sent_date

    @property
    def paid_mail_sent_date(self):
        """Gets the paid_mail_sent_date of this Sale.  # noqa: E501

        入金メールの送信日時  # noqa: E501

        :return: The paid_mail_sent_date of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._paid_mail_sent_date

    @paid_mail_sent_date.setter
    def paid_mail_sent_date(self, paid_mail_sent_date):
        """Sets the paid_mail_sent_date of this Sale.

        入金メールの送信日時  # noqa: E501

        :param paid_mail_sent_date: The paid_mail_sent_date of this Sale.  # noqa: E501
        :type: int
        """

        self._paid_mail_sent_date = paid_mail_sent_date

    @property
    def delivered_mail_sent_date(self):
        """Gets the delivered_mail_sent_date of this Sale.  # noqa: E501

        発送メールの送信日時  # noqa: E501

        :return: The delivered_mail_sent_date of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._delivered_mail_sent_date

    @delivered_mail_sent_date.setter
    def delivered_mail_sent_date(self, delivered_mail_sent_date):
        """Sets the delivered_mail_sent_date of this Sale.

        発送メールの送信日時  # noqa: E501

        :param delivered_mail_sent_date: The delivered_mail_sent_date of this Sale.  # noqa: E501
        :type: int
        """

        self._delivered_mail_sent_date = delivered_mail_sent_date

    @property
    def point_state(self):
        """Gets the point_state of this Sale.  # noqa: E501

        ショップポイント付与状態  - `assumed`: 仮付与 - `fixed`: 確定済み - `canceled`: キャンセル済み   # noqa: E501

        :return: The point_state of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._point_state

    @point_state.setter
    def point_state(self, point_state):
        """Sets the point_state of this Sale.

        ショップポイント付与状態  - `assumed`: 仮付与 - `fixed`: 確定済み - `canceled`: キャンセル済み   # noqa: E501

        :param point_state: The point_state of this Sale.  # noqa: E501
        :type: str
        """
        allowed_values = ["assumed", "fixed", "canceled"]  # noqa: E501
        if point_state not in allowed_values:
            raise ValueError(
                "Invalid value for `point_state` ({0}), must be one of {1}"  # noqa: E501
                .format(point_state, allowed_values)
            )

        self._point_state = point_state

    @property
    def gmo_point_state(self):
        """Gets the gmo_point_state of this Sale.  # noqa: E501

        GMOポイント付与状態  - `assumed`: 仮付与 - `fixed`: 確定済み - `canceled`: キャンセル済み   # noqa: E501

        :return: The gmo_point_state of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._gmo_point_state

    @gmo_point_state.setter
    def gmo_point_state(self, gmo_point_state):
        """Sets the gmo_point_state of this Sale.

        GMOポイント付与状態  - `assumed`: 仮付与 - `fixed`: 確定済み - `canceled`: キャンセル済み   # noqa: E501

        :param gmo_point_state: The gmo_point_state of this Sale.  # noqa: E501
        :type: str
        """
        allowed_values = ["assumed", "fixed", "canceled"]  # noqa: E501
        if gmo_point_state not in allowed_values:
            raise ValueError(
                "Invalid value for `gmo_point_state` ({0}), must be one of {1}"  # noqa: E501
                .format(gmo_point_state, allowed_values)
            )

        self._gmo_point_state = gmo_point_state

    @property
    def yahoo_point_state(self):
        """Gets the yahoo_point_state of this Sale.  # noqa: E501

        Yahooポイント付与状態  - `assumed`: 仮付与 - `fixed`: 確定済み - `canceled`: キャンセル済み   # noqa: E501

        :return: The yahoo_point_state of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._yahoo_point_state

    @yahoo_point_state.setter
    def yahoo_point_state(self, yahoo_point_state):
        """Sets the yahoo_point_state of this Sale.

        Yahooポイント付与状態  - `assumed`: 仮付与 - `fixed`: 確定済み - `canceled`: キャンセル済み   # noqa: E501

        :param yahoo_point_state: The yahoo_point_state of this Sale.  # noqa: E501
        :type: str
        """
        allowed_values = ["assumed", "fixed", "canceled"]  # noqa: E501
        if yahoo_point_state not in allowed_values:
            raise ValueError(
                "Invalid value for `yahoo_point_state` ({0}), must be one of {1}"  # noqa: E501
                .format(yahoo_point_state, allowed_values)
            )

        self._yahoo_point_state = yahoo_point_state

    @property
    def product_total_price(self):
        """Gets the product_total_price of this Sale.  # noqa: E501

        商品の合計金額  # noqa: E501

        :return: The product_total_price of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._product_total_price

    @product_total_price.setter
    def product_total_price(self, product_total_price):
        """Sets the product_total_price of this Sale.

        商品の合計金額  # noqa: E501

        :param product_total_price: The product_total_price of this Sale.  # noqa: E501
        :type: int
        """

        self._product_total_price = product_total_price

    @property
    def delivery_total_charge(self):
        """Gets the delivery_total_charge of this Sale.  # noqa: E501

        配送料  # noqa: E501

        :return: The delivery_total_charge of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._delivery_total_charge

    @delivery_total_charge.setter
    def delivery_total_charge(self, delivery_total_charge):
        """Sets the delivery_total_charge of this Sale.

        配送料  # noqa: E501

        :param delivery_total_charge: The delivery_total_charge of this Sale.  # noqa: E501
        :type: int
        """

        self._delivery_total_charge = delivery_total_charge

    @property
    def fee(self):
        """Gets the fee of this Sale.  # noqa: E501

        決済手数料  # noqa: E501

        :return: The fee of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Sale.

        決済手数料  # noqa: E501

        :param fee: The fee of this Sale.  # noqa: E501
        :type: int
        """

        self._fee = fee

    @property
    def tax(self):
        """Gets the tax of this Sale.  # noqa: E501

        商品合計金額に対する消費税  # noqa: E501

        :return: The tax of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Sale.

        商品合計金額に対する消費税  # noqa: E501

        :param tax: The tax of this Sale.  # noqa: E501
        :type: int
        """

        self._tax = tax

    @property
    def noshi_total_charge(self):
        """Gets the noshi_total_charge of this Sale.  # noqa: E501

        熨斗料金  # noqa: E501

        :return: The noshi_total_charge of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._noshi_total_charge

    @noshi_total_charge.setter
    def noshi_total_charge(self, noshi_total_charge):
        """Sets the noshi_total_charge of this Sale.

        熨斗料金  # noqa: E501

        :param noshi_total_charge: The noshi_total_charge of this Sale.  # noqa: E501
        :type: int
        """

        self._noshi_total_charge = noshi_total_charge

    @property
    def card_total_charge(self):
        """Gets the card_total_charge of this Sale.  # noqa: E501

        メッセージカード料金  # noqa: E501

        :return: The card_total_charge of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._card_total_charge

    @card_total_charge.setter
    def card_total_charge(self, card_total_charge):
        """Sets the card_total_charge of this Sale.

        メッセージカード料金  # noqa: E501

        :param card_total_charge: The card_total_charge of this Sale.  # noqa: E501
        :type: int
        """

        self._card_total_charge = card_total_charge

    @property
    def wrapping_total_charge(self):
        """Gets the wrapping_total_charge of this Sale.  # noqa: E501

        ラッピング料金  # noqa: E501

        :return: The wrapping_total_charge of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._wrapping_total_charge

    @wrapping_total_charge.setter
    def wrapping_total_charge(self, wrapping_total_charge):
        """Sets the wrapping_total_charge of this Sale.

        ラッピング料金  # noqa: E501

        :param wrapping_total_charge: The wrapping_total_charge of this Sale.  # noqa: E501
        :type: int
        """

        self._wrapping_total_charge = wrapping_total_charge

    @property
    def point_discount(self):
        """Gets the point_discount of this Sale.  # noqa: E501

        ショップポイントによる割引額  # noqa: E501

        :return: The point_discount of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._point_discount

    @point_discount.setter
    def point_discount(self, point_discount):
        """Sets the point_discount of this Sale.

        ショップポイントによる割引額  # noqa: E501

        :param point_discount: The point_discount of this Sale.  # noqa: E501
        :type: int
        """

        self._point_discount = point_discount

    @property
    def gmo_point_discount(self):
        """Gets the gmo_point_discount of this Sale.  # noqa: E501

        GMOポイントによる割引額  # noqa: E501

        :return: The gmo_point_discount of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._gmo_point_discount

    @gmo_point_discount.setter
    def gmo_point_discount(self, gmo_point_discount):
        """Sets the gmo_point_discount of this Sale.

        GMOポイントによる割引額  # noqa: E501

        :param gmo_point_discount: The gmo_point_discount of this Sale.  # noqa: E501
        :type: int
        """

        self._gmo_point_discount = gmo_point_discount

    @property
    def other_discount(self):
        """Gets the other_discount of this Sale.  # noqa: E501

        その他、クーポン等による割引額  # noqa: E501

        :return: The other_discount of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._other_discount

    @other_discount.setter
    def other_discount(self, other_discount):
        """Sets the other_discount of this Sale.

        その他、クーポン等による割引額  # noqa: E501

        :param other_discount: The other_discount of this Sale.  # noqa: E501
        :type: int
        """

        self._other_discount = other_discount

    @property
    def other_discount_name(self):
        """Gets the other_discount_name of this Sale.  # noqa: E501

        その他割引の名称  # noqa: E501

        :return: The other_discount_name of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._other_discount_name

    @other_discount_name.setter
    def other_discount_name(self, other_discount_name):
        """Sets the other_discount_name of this Sale.

        その他割引の名称  # noqa: E501

        :param other_discount_name: The other_discount_name of this Sale.  # noqa: E501
        :type: str
        """

        self._other_discount_name = other_discount_name

    @property
    def total_price(self):
        """Gets the total_price of this Sale.  # noqa: E501

        注文総額  # noqa: E501

        :return: The total_price of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this Sale.

        注文総額  # noqa: E501

        :param total_price: The total_price of this Sale.  # noqa: E501
        :type: int
        """

        self._total_price = total_price

    @property
    def granted_points(self):
        """Gets the granted_points of this Sale.  # noqa: E501

        付与されたショップポイント数  # noqa: E501

        :return: The granted_points of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._granted_points

    @granted_points.setter
    def granted_points(self, granted_points):
        """Sets the granted_points of this Sale.

        付与されたショップポイント数  # noqa: E501

        :param granted_points: The granted_points of this Sale.  # noqa: E501
        :type: int
        """

        self._granted_points = granted_points

    @property
    def use_points(self):
        """Gets the use_points of this Sale.  # noqa: E501

        使用されたショップポイント数  # noqa: E501

        :return: The use_points of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._use_points

    @use_points.setter
    def use_points(self, use_points):
        """Sets the use_points of this Sale.

        使用されたショップポイント数  # noqa: E501

        :param use_points: The use_points of this Sale.  # noqa: E501
        :type: int
        """

        self._use_points = use_points

    @property
    def granted_gmo_points(self):
        """Gets the granted_gmo_points of this Sale.  # noqa: E501

        付与されたGMOポイント数  # noqa: E501

        :return: The granted_gmo_points of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._granted_gmo_points

    @granted_gmo_points.setter
    def granted_gmo_points(self, granted_gmo_points):
        """Sets the granted_gmo_points of this Sale.

        付与されたGMOポイント数  # noqa: E501

        :param granted_gmo_points: The granted_gmo_points of this Sale.  # noqa: E501
        :type: int
        """

        self._granted_gmo_points = granted_gmo_points

    @property
    def use_gmo_points(self):
        """Gets the use_gmo_points of this Sale.  # noqa: E501

        使用されたGMOポイント数  # noqa: E501

        :return: The use_gmo_points of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._use_gmo_points

    @use_gmo_points.setter
    def use_gmo_points(self, use_gmo_points):
        """Sets the use_gmo_points of this Sale.

        使用されたGMOポイント数  # noqa: E501

        :param use_gmo_points: The use_gmo_points of this Sale.  # noqa: E501
        :type: int
        """

        self._use_gmo_points = use_gmo_points

    @property
    def granted_yahoo_points(self):
        """Gets the granted_yahoo_points of this Sale.  # noqa: E501

        付与されたYahooポイント数  # noqa: E501

        :return: The granted_yahoo_points of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._granted_yahoo_points

    @granted_yahoo_points.setter
    def granted_yahoo_points(self, granted_yahoo_points):
        """Sets the granted_yahoo_points of this Sale.

        付与されたYahooポイント数  # noqa: E501

        :param granted_yahoo_points: The granted_yahoo_points of this Sale.  # noqa: E501
        :type: int
        """

        self._granted_yahoo_points = granted_yahoo_points

    @property
    def use_yahoo_points(self):
        """Gets the use_yahoo_points of this Sale.  # noqa: E501

        使用されたYahooポイント数  # noqa: E501

        :return: The use_yahoo_points of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._use_yahoo_points

    @use_yahoo_points.setter
    def use_yahoo_points(self, use_yahoo_points):
        """Sets the use_yahoo_points of this Sale.

        使用されたYahooポイント数  # noqa: E501

        :param use_yahoo_points: The use_yahoo_points of this Sale.  # noqa: E501
        :type: int
        """

        self._use_yahoo_points = use_yahoo_points

    @property
    def customer(self):
        """Gets the customer of this Sale.  # noqa: E501


        :return: The customer of this Sale.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Sale.


        :param customer: The customer of this Sale.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def details(self):
        """Gets the details of this Sale.  # noqa: E501


        :return: The details of this Sale.  # noqa: E501
        :rtype: list[SaleDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Sale.


        :param details: The details of this Sale.  # noqa: E501
        :type: list[SaleDetail]
        """

        self._details = details

    @property
    def sale_deliveries(self):
        """Gets the sale_deliveries of this Sale.  # noqa: E501


        :return: The sale_deliveries of this Sale.  # noqa: E501
        :rtype: list[SaleDelivery]
        """
        return self._sale_deliveries

    @sale_deliveries.setter
    def sale_deliveries(self, sale_deliveries):
        """Sets the sale_deliveries of this Sale.


        :param sale_deliveries: The sale_deliveries of this Sale.  # noqa: E501
        :type: list[SaleDelivery]
        """

        self._sale_deliveries = sale_deliveries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
