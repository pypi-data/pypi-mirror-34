"""
Runs commands from the Starlink CCDPACK package.

Autogenerated from the starlink .hlp and .ifl files,
by starlink-pywrapper/helperscripts/generate_functions.py.

Starlink version: 2018A
b6ca36bf8884802759017298539489d11795861e (2018-07-06 09:36:39)
"""

from . import wrapper


def astexp(in_, astfile, outdomain, **kwargs):
    """
    Exports coordinate system information from images

    Runs the command: $CCDPACK_DIR/astexp .

    Arguments
    ---------
    `in_` : str
        NDFs containing coordinate information

    astfile : str
        File containing AST frameset information

    outdomain : str
        Registration domain name in AST file [CCD_EXPORT]


    Keyword Arguments
    -----------------
    baseframe : str
        Frame in NDFs to use as Base frame in AST file [PIXEL]

    baseepoch : float
        Base frame epoch of observation

    fitsid : str
        FITS header keyword to identify frameset

    fitsrot : str
        FITS header keyword for additional rotation [!]

    idtype : str
        Type of frameset identifier (SET,FITSID,INDEX) [INDEX]

    indices : List[int]
        List of sequence values for INDEX frameset identifiers [!]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    outtitle : str
        Title of exported output frame [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_ASTEXP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/astexp", "astexp", in_, astfile, outdomain, **kwargs)


def astimp(in_, astfile, indomain, **kwargs):
    """
    Imports coordinate system information into NDFs from AST files.

    Runs the command: $CCDPACK_DIR/astimp .

    Arguments
    ---------
    `in_` : str
        NDFs to modify

    astfile : str,filename
        File containing AST frameset information

    indomain : str
        Domain name for Current import frames [!]


    Keyword Arguments
    -----------------
    fitsrot : str
        FITS keyword for additional rotation angle [!]

    indices : List[int]
        List of sequence values for INDEX frameset identifiers [!]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    rot : float
        Additional rotation angle [0]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_ASTIMP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/astimp", "astimp", in_, astfile, indomain, **kwargs)


def calcor(in_, out, cal, expose, **kwargs):
    """
    Subtracts a scaled dark or flash calibration image from a series of images.

    Runs the command: $CCDPACK_DIR/calcor .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str
        List of output NDFs

    cal : str
        NDF containing the Dark or Flash calibration data [Global calibration image]

    expose : str
        Exposure times for input NDFs


    Keyword Arguments
    -----------------
    preserve : bool
        Do you want to preserve the input type [TRUE]

    title : str
        Title for the output NDF [Output from CALCOR]

    keepin : bool
        Do not delete input NDFs [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    saturation : float
        Saturation value [1.0D6]

    setsat : bool
        Saturated data set to a non-BAD value [FALSE]

    type : str
        Frame type of input NDFs (NONE,DARK,FLASH) [NONE]

    useext : bool
        Use NDF extension information [FALSE]

    useset : bool
        Use Set header information? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CALCOR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/calcor", "calcor", in_, out, cal, expose, **kwargs)


def ccdalign(in_, **kwargs):
    """
    Aligns images graphically by interactive object selection.

    Runs the command: $CCDPACK_DIR/ccdalign .

    Arguments
    ---------
    `in_` : str
        List of NDFs for display


    Keyword Arguments
    -----------------
    `continue_` : bool
        Continue processing [FALSE]

    extras : bool
        Input extra frames in same sky position as IN list? [FALSE]

    fittype : , 1-5
        Transformation type [5]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    markstyle : str
        String giving style of markers to plot [""]

    maxcanv : int
        Maximum X or Y dimension of scrolled display region [1280]

    more : str
        Additional frames in the sky same position [!]

    percentiles : List[float]
        Display percentiles [2,98]

    refndf : str
        Additional reference frame [!]

    useset : bool
        Group lists by Set membership? [FALSE]

    winx : int
        Width of display window in pixels [450]

    winy : int
        Height of display window in pixels [600]

    zoom : float
        Number of screen pixels per NDF pixel [1]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDALIGN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdalign", "ccdalign", in_, **kwargs)


def ccdclear(*args, **kwargs):
    """
    Clears CCDPACK global parameters.

    Runs the command: $CCDPACK_DIR/ccdclear .

    Keyword Arguments
    -----------------
    byname : bool
        Clear parameters by specific name [FALSE]

    logfile : str
        Name of CCDPACK logfile [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    names : str
        Parameter names


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDCLEAR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdclear", "ccdclear", *args, **kwargs)


def ccdedit(mode, in_, **kwargs):
    """
    Edits CCDPACK image extensions.

    Runs the command: $CCDPACK_DIR/ccdedit .

    Arguments
    ---------
    mode : str
        Editing mode (ALIST,ERASE,TRANSFORM,INVERT) [ALIST]

    `in_` : str
        List of NDFs


    Keyword Arguments
    -----------------
    `class_` : List[str]
        Transformation classifications

    classify : bool
        Add classifications [FALSE]

    fa : str
        Sub-expression

    fb : str
        Sub-expression

    fc : str
        Sub-expression

    fd : str
        Sub-expression

    fe : str
        Sub-expression

    ff : str
        Sub-expression

    fg : str
        Sub-expression

    fh : str
        Sub-expression

    fi : str
        Sub-expression

    fittype : , 1-5
        Type of linear transform (1-5) [5]

    fixwcs : bool
        Erase CCD_SET coordinate frames from WCS component too? [TRUE]

    fj : str
        Sub-expression

    fk : str
        Sub-expression

    fl : str
        Sub-expression

    fm : str
        Sub-expression

    fn : str
        Sub-expression

    fo : str
        Sub-expression

    fp : str
        Sub-expression

    fq : str
        Sub-expression

    fr : str
        Sub-expression

    fs : str
        Sub-expression

    ft : str
        Sub-expression

    fu : str
        Sub-expression

    fv : str
        Sub-expression

    fw : str
        Sub-expression

    fx : str
        Sub-expression

    fy : str
        Sub-expression

    fz : str
        Sub-expression

    inlist : str
        Names of position lists to associate

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    name : str
        Name of extension component

    pa : float
        Constant value

    pb : float
        Constant value

    pc : float
        Constant value

    pd : float
        Constant value

    pe : float
        Constant value

    pf : float
        Constant value

    pg : float
        Constant value

    ph : float
        Constant value

    pi : float
        Constant value [3.14159265359D0]

    pj : float
        Constant value

    pk : float
        Constant value

    pl : float
        Constant value

    pm : float
        Constant value

    pn : float
        Constant value

    po : float
        Constant value

    pp : float
        Constant value

    pq : float
        Constant value

    pr : float
        Constant value

    ps : float
        Constant value

    pt : float
        Constant value

    pu : float
        Constant value

    pv : float
        Constant value

    pw : float
        Constant value

    px : float
        Constant value

    py : float
        Constant value

    pz : float
        Constant value

    tr : List[float]
        Linear transformation coefficients (6) [PA,PB,PC,PD,PE,PF]

    transform : TRN
        Transformation structure

    trtype : str
        Transformation type [COEFF]

    xfor : str
        Expression for X forward mapping

    xinv : str
        Expression for X inverse mapping

    yfor : str
        Expression for Y forward mapping

    yinv : str
        Expression for Y inverse mapping


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDEDIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdedit", "ccdedit", mode, in_, **kwargs)


def ccdndfac(*args, **kwargs):
    """
    Accesses a list of images and writes their names to a file.

    Runs the command: $CCDPACK_DIR/ccdndfac .

    Keyword Arguments
    -----------------
    namelist : str
        Name of output file for NDF namelist [CCDNDFAC.LIS]

    echo : bool
        Echo NDF names to user [TRUE]

    `in_` : str
        List of NDFs [!]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    maxndf : int
        Maximum number of NDFs to access [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDNDFAC
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdndfac", "ccdndfac", *args, **kwargs)


def ccdnote(note, **kwargs):
    """
    Adds a note to the current CCDPACK log file.

    Runs the command: $CCDPACK_DIR/ccdnote .

    Arguments
    ---------
    note : str


    Keyword Arguments
    -----------------
    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDNOTE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdnote", "ccdnote", note, **kwargs)


def ccdsetup(*args, **kwargs):
    """
    Sets the CCDPACK global parameters.

    Runs the command: $CCDPACK_DIR/ccdsetup .

    Keyword Arguments
    -----------------
    adc : float
        Number of electrons per ADU [!]

    bounds : List[int]
        Pixel indices of bias strips (in pairs) [!]

    byset : bool
        Set up values specific to one Set Index? [FALSE]

    deferred : float
        Deferred charge (ADUs) [!]

    direction : str
        Readout direction (X or Y) [!]

    extent : List[int]
        Useful CCD region (xmin,xmax,ymin,ymax) [!]

    genvar : bool
        Do you want to generate variance estimates [TRUE]

    index : int
        Set Index values these parameters are specific to

    logfile : str
        logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    mask : str
        Mask data file [!]

    ndfnames : bool
        Associate position lists with NDF names [TRUE]

    preserve : bool
        Do you want to preserve your input data types [TRUE]

    restore : bool
        Use a setup restoration file [FALSE]

    restorefile : str
        Setup restoration file [CCDPACK_SETUP.DAT]

    rnoise : float
        Readout noise (ADUs) [!]

    saturate : bool
        Look for saturated pixels [FALSE]

    saturation : float
        Saturation value [1.0D6]

    save : bool
        Save CCD parameters for future restoration [FALSE]

    savefile : str
        File to store CCD parameters [CCDPACK_SETUP.DAT]

    setsat : bool
        Set saturated pixels to saturation value [FALSE]

    useset : bool
        Use CCDPACK Set headers if available [FALSE]


    Returns
    -------
    maskname : str
        Private parameter


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDSETUP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdsetup", "ccdsetup", *args, **kwargs)


def ccdshow(*args, **kwargs):
    """
    Displays the value of the CCDPACK global parameters.

    Runs the command: $CCDPACK_DIR/ccdshow .

    Keyword Arguments
    -----------------
    logfile : str
        logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    save : bool
        Save CCD parameters for future restoration [FALSE]

    savefile : str
        File to store CCD parameters [CCDPACK_SETUP.DAT]

    useset : bool
         [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_CCDSHOW
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/ccdshow", "ccdshow", *args, **kwargs)


def debias(in_, out, bias, **kwargs):
    """
    Performs the debiassing and initial preparation of CCD data.

    Runs the command: $CCDPACK_DIR/debias .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str
        List of output NDFs

    bias : str
        Master bias NDF [Global master bias or !]


    Keyword Arguments
    -----------------
    bounds : List[int]
        Pixel indices of bias strips (in pairs)

    rnoise : float
        Readout noise (ADUs) [Dynamic default or 1.0]

    adc : float
        Number of electrons per ADU [1.0]

    mask : str
        Mask data file [!]

    badbits : , 1-255
        BADBITS mask value [1]

    boxsize : List[int]
        Box side sizes for smoothing bias strips [15,15]

    cmode : str
        Clean up mode (Weight,Box or Sigma) [BOX]

    deferred : float
        Deferred charge (ADUs) [0.0]

    direction : str
        Readout direction ( X or Y ) [X]

    expand : bool
        Convert input ADUs to electrons on output [Default is TRUE if input data is not an unsigned data type
       otherwise FALSE.]

    extent : List[int]
        Useful CCD region (xmin,xmax,ymin,ymax)

    fixorigin : bool
        Set origin of output NDFs to 1,1 [FALSE]

    fmode : str
        Fit type (Plane or Line or Global) [LINE]

    genvar : bool
        Do you want to generate variance estimates [FALSE]

    getbias : bool
        Get a master bias NDF via BIAS parameter [TRUE]

    getmask : bool
        Get a defect mask via MASK parameter [TRUE]

    keepin : bool
        Do not delete input NDFs [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    nsigma : float
        Number of sigmas to clip at [4.0]

    offset : bool
        Offset the bias values to zero [TRUE]

    preserve : bool
        Do you want to preserve the input type [TRUE]

    saturate : bool
        Look for saturated data [FALSE]

    saturation : float
        Saturation value [1.0D6]

    setbad : bool
        Set output pixels BAD [TRUE]

    setsat : bool
        Set saturated pixels to the saturation value [FALSE]

    smode : str
        Mode to fit data (Linear or Constant) [CONSTANT]

    title : str
        Title for the output NDFs [Output from DEBIAS]

    usecon : bool
        Do you want to supply a global zero level [FALSE]

    useext : bool
        Use NDF extension information [FALSE]

    useset : bool
        Use Set header information? [FALSE]

    wmode : str
        Weighting mode (Linear, Exp or None) [LINEAR]

    zero : float
        Global zero point value [0.0]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_DEBIAS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/debias", "debias", in_, out, bias, **kwargs)


def drawndf(in_, **kwargs):
    """
    Draws aligned images or outlines on a graphics display.

    Runs the command: $CCDPACK_DIR/drawndf .

    Arguments
    ---------
    `in_` : str
        List of input NDFs


    Keyword Arguments
    -----------------
    device : 
        Name of device [Current display device]

    axes : bool
        Are annotated axes to be plotted? [dyn.]

    clear : bool
        Clear display device [TRUE]

    extent : List[int]
        Useful CCD region (xmin,xmax,ymin,ymax)

    image : bool
        Plot images as well as outlines? [FALSE]

    labname : bool
        Label images with their names? [TRUE]

    labnum : bool
        Label images with their numbers? [FALSE]

    labopaque : bool
        Use opaque background for text labels? [TRUE]

    labpos : str
        Label positioning (2 characters each Near Centre or Far) [NN]

    labup : bool
        Write text upright on graphics device? [FALSE]

    lines : bool
        Draw image outlines? [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    origin : bool
        Draw marker at image origins? [TRUE]

    penrot : bool
        Use a different pen for each outline? [FALSE]

    percentiles : , 0-100
        Lower and upper percentiles for image display [2,98]

    style : str
        Style specification for plot appearance [""]

    trim : bool
        Restrict to useful image area using EXTENT? [FALSE]

    useext : bool
        Use NDF extension information for EXTENT area? [TRUE]

    useset : bool
        Rotate pens by Set membership? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_DRAWNDF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/drawndf", "drawndf", in_, **kwargs)


def drizzle(in_, out, **kwargs):
    """
    Mosaics images using the drizzling algorithm.

    Runs the command: $CCDPACK_DIR/drizzle .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str
        Output mosaic NDF


    Keyword Arguments
    -----------------
    cmpvar : bool
        Use variance during inter-comparison? [TRUE]

    correct : str
        File containing corrections [!]

    genvar : bool
        Write variance component in output NDF? [TRUE]

    listin : bool
        List input NDF names? [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    mapvar : bool
        Use inverse variance maps as weights? [FALSE]

    maxit : int
        Maximum number of inter-comparison iterations [20]

    multi : float
        Linear scaling of output/input pixels [1.5]

    optov : int
        Optimum number of overlaps per NDF [3]

    pixfrac : float
        Pixel fraction (size of "drop") [0.9]

    preserve : bool
        Preserve input data type? [TRUE]

    ref : str
        Reference NDF [!]

    scale : bool
        Adjust scale-factors? [FALSE]

    skysup : float
        Sky noise suppression factor [dyn.]

    title : str
        Title for output mosaic [Output from DRIZZLE]

    tmpfile : str
        Temporary NDF filename [*_tmp]

    tols : float
        Fractional scale-factor tolerance [0.001]

    tolz : float
        Zero-point tolerance [0.05]

    usevar : bool
        Use inverse mean image variances as weights? [TRUE]

    zero : bool
        Adjust zero-points? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_DRIZZLE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/drizzle", "drizzle", in_, out, **kwargs)


def findcent(in_, outlist, **kwargs):
    """
    Centroids image features.

    Runs the command: $CCDPACK_DIR/findcent .

    Arguments
    ---------
    `in_` : str
        Input NDF names

    outlist : str
        Output position list names [*.cent]


    Keyword Arguments
    -----------------
    autoscale : bool
        Adjust centroid parameters to image scale [FALSE]

    inlist : str
        Input position list names

    isize : int
        Size of search box [9]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    maxiter : int
        Maximum number of refining iterations [3]

    maxshift : float
        Maximum shift in position [5.5]

    namelist : str
        Output filename listing [FINDCENT.LIS]

    ndfnames : bool
        Position list names are located in NDF extensions [TRUE]

    positive : bool
        Features have positive signal [TRUE]

    toler : float
        Positional tolerance in centroid [0.05]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_FINDCENT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/findcent", "findcent", in_, outlist, **kwargs)


def findobj(in_, minpix, outlist, **kwargs):
    """
    Locates and centroids image features.

    Runs the command: $CCDPACK_DIR/findobj .

    Arguments
    ---------
    `in_` : str
        Name of input NDFs

    minpix : int
        Minimum number of pixels per group [6]

    outlist : str
        Results file names [*.DAT]


    Keyword Arguments
    -----------------
    autothresh : bool
        Use automatic threshold values [TRUE]

    binfrac : float
        Fraction of counts in one bin (percent) [2.5]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    namelist : str
        Name of output filenames listing [FINDOBJ.LIS]

    nsigma : float
        Standard deviations above detection threshold [5]

    override : bool
        Continue if errors occur when detecting objects [FALSE]

    oversamp : int
        Histogram oversampling factor [5]

    percentile : float
        Percentile for detection threshold [96]

    thresh : float
        Detection threshold [Dynamic default]

    touch : bool
        May pixel groups touch the edges of array [FALSE]

    useper : bool
        Use percentiles to estimate threshold [TRUE]


    Returns
    -------
    counts : int
        Private output parameter


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_FINDOBJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/findobj", "findobj", in_, minpix, outlist, **kwargs)


def findoff(inlist, error, outlist, **kwargs):
    """
    Performs pattern-matching between position lists related by simple offsets.

    Runs the command: $CCDPACK_DIR/findoff .

    Arguments
    ---------
    inlist : str
        Names of position lists

    error : float
        Error in positions (pixels) [1.0]

    outlist : str
        Names for output position lists


    Keyword Arguments
    -----------------
    complete : float
        Minimum completeness level [0.5]

    failsafe : bool
        Perform SLOW algorithm if FAST fails [TRUE]

    fast : bool
        Perform FAST algorithm [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    maxdisp : float
        Maximum displacement relative to initial placing (pixels) [!]

    minmatch : int
        Minimum number of positions required for match [3]

    minsep : float
        Minimum distance between positions [Dynamic -- 5.0*ERROR]

    namelist : str
        Name of output filenames listing [FINDOFF.LIS]

    ndfnames : bool
        Position list names in NDF extensions [TRUE]

    override : bool
        Continue if solution is incomplete [TRUE]

    restrict : bool
        Restrict possible matches to apparently overlapping zones [FALSE]

    usecomp : bool
        Use completeness as weight [TRUE]

    useset : bool
        Group lists by Set membership? [FALSE]

    usewcs : bool
        Use NDF World Coordinate System extension if it exists [TRUE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_FINDOFF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/findoff", "findoff", inlist, error, outlist, **kwargs)


def flatcor(in_, out, flat, **kwargs):
    """
    Divides a series of images by a flatfield

    Runs the command: $CCDPACK_DIR/flatcor .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str
        List of output NDFs

    flat : str
        Flatfield NDF [Global flatfield]


    Keyword Arguments
    -----------------
    keepin : bool
        Do not delete input NDFs [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    preserve : bool
        Do you want to preserve the input type [TRUE]

    saturation : float
        Saturation value [1.0D6]

    setsat : bool
        Has saturated data been set to a non-BAD value [FALSE]

    title : str
        Title for the output NDF [Output from FLATCOR]

    useset : bool
        Use Set header information? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_FLATCOR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/flatcor", "flatcor", in_, out, flat, **kwargs)


def idicurs(in_, **kwargs):
    """
    Views and writes position lists interactively.

    Runs the command: $CCDPACK_DIR/idicurs .

    Arguments
    ---------
    `in_` : str
        NDFs to be viewed


    Keyword Arguments
    -----------------
    centroid : bool
        Centroid each position added to image? [TRUE]

    inext : bool
        Get initial position list from NDF extension? [FALSE]

    inlist : str
        Input position list

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    markstyle : str
        String giving style of markers to plot ["showindex=1"]

    maxcanv : int
        Maximum X or Y dimension of scrolled display region [1280]

    outlist : str
        Output file for positions

    overwrite : bool
        Use the same position list file for read and write? [FALSE]

    percentiles : List[float]
        Display percentiles [2,98]

    readlist : bool
        Use initial position list? [FALSE]

    useset : bool
        Group images by Set membership? [FALSE]

    verbose : bool
        Log all marked positions? [TRUE]

    winx : int
        Width of display window in pixels [450]

    winy : int
        Height of display window in pixels [600]

    writelist : bool
        Write marked positions to list file? [FALSE]

    zoom : float
        Number of screen pixels per NDF pixel [1]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_IDICURS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/idicurs", "idicurs", in_, **kwargs)


def import_(in_, table, **kwargs):
    """
    Imports FITS information into images

    Runs the command: $CCDPACK_DIR/import .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    table : str
        Import control table ['import.tab']


    Keyword Arguments
    -----------------
    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    namelist : str
        Input NDF name list [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_IMPORT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/import", "import_", in_, table, **kwargs)


def makebias(in_, out, rnoise, method, **kwargs):
    """
    Produces a master from a set of bias frames.

    Runs the command: $CCDPACK_DIR/makebias .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str
        Output NDF

    rnoise : float
        Readout noise (ADUs) [Dynamically derived value]

    method : str
        Data combination method [MEDIAN]


    Keyword Arguments
    -----------------
    alpha : float
        Trim fraction [0.2]

    genvar : bool
        Do you want to generate a variance component [FALSE]

    keepin : bool
        Do not delete input NDFs [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    max : float
        Maximum allowed value [100.0]

    min : float
        Minimum allowed value [-100.0]

    minpix : int
        Minimum number of contributing pixels per output pixel [1]

    niter : int
        Number of clipping iterations [7]

    preserve : bool
        Preserve input NDF data type [TRUE]

    sigmas : float
        Clipping limit (standard deviations) [4]

    title : str
        Title for the output NDF [Output from MAKEBIAS]

    useext : bool
        Use NDF extension information [FALSE]

    useset : bool
        Use Set header information? [FALSE]

    zero : bool
        Make average of output data zero [TRUE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_MAKEBIAS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/makebias", "makebias", in_, out, rnoise, method, **kwargs)


def makecal(in_, expose, out, method, **kwargs):
    """
    Produces a dark or pre-flash calibration image.

    Runs the command: $CCDPACK_DIR/makecal .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    expose : str
        Input NDF exposure times

    out : str
        Output NDF name

    method : str
        Data combination method [MEDIAN]


    Keyword Arguments
    -----------------
    alpha : float
        Trim fraction [0.2]

    keepin : bool
        Do not delete input NDFs [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    max : float
        Maximum allowed value

    min : float
        Minimum allowed value

    minpix : int
        Minimum number of contributing pixels per output pixel [1]

    niter : int
        Number of clipping iterations [7]

    sigmas : float
        Clipping limit (standard deviations) [4.0]

    title : str
        Title for the output NDF [Output from MAKECAL]

    type : str
        Frame type of input NDFs (NONE,DARK,FLASH) [NONE]

    useext : bool
        Use NDF extension information [FALSE]

    useset : bool
        Use Set header information? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_MAKECAL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/makecal", "makecal", in_, expose, out, method, **kwargs)


def makeflat(in_, out, method, **kwargs):
    """
    Produces a flatfield calibration image.

    Runs the command: $CCDPACK_DIR/makeflat .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str
        Output NDF name [TRUE]

    method : str
        Data combination method [MEDIAN]


    Keyword Arguments
    -----------------
    alpha : float
        Trim fraction [0.2]

    boxsize : List[int]
        Sizes of box filter sides [15,15]

    clean : bool
        Clean input images of defects [TRUE]

    gamma : float
        Number of standard deviations to reject at [3.0]

    genvar : bool
        Generate output variance information? [FALSE]

    iter : int
        Number of rejecting iterations [3]

    keepin : bool
        Do not delete input NDFs [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    max : float
        Maximum allowed value

    min : float
        Minimum allowed value

    minpix : int
        Minimum number of contributing pixels per output pixel [1]

    niter : int
        Number of clipping iterations [7]

    norm : bool
        Normalise the output data to mean of one [TRUE]

    sigmas : float
        Clipping limit (standard deviations) [4.0]

    title : str
        Title for the output NDF [Output from MAKEFLAT]

    useset : bool
        Use Set headers if available? [FALSE]

    usevar : bool
        Use variance during data combination? [TRUE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_MAKEFLAT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/makeflat", "makeflat", in_, out, method, **kwargs)


def makemos(in_, out, **kwargs):
    """
    Make a mosaic by combining and (optionally) normalising a set of images.

    Runs the command: $CCDPACK_DIR/makemos .

    Arguments
    ---------
    `in_` : str
        List of input NDFs

    out : str,filename
        Output mosaic NDF


    Keyword Arguments
    -----------------
    alpha : float
        Trimming fraction [0.2]

    cmpvar : bool
        Use variance during inter-comparison? [TRUE]

    correct : str
        File containing corrections [!]

    genvar : bool
        Generate output variance information? [dyn.]

    listin : bool
        List input NDF names? [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write output to (Logfile,Terminal,Neither,Both) [BOTH]

    max : float
        Maximum data value [Maximum real value]

    maxit : int
        Maximum number of inter-comparison iterations [20]

    method : str
        Data combination method [MEDIAN]

    min : float
        Minimum data value [Minimum real value]

    modify : bool
        Modify input NDFs? [FALSE]

    niter : int
        Number of mode refining iterations [7]

    optov : int
        Optimum number of overlaps per NDF [3]

    preserve : bool
        Preserve input data type? [TRUE]

    ref : str
        Reference NDF [!]

    scale : bool
        Adjust scale-factors? [FALSE]

    sigmas : float
        Clipping limit (standard deviations) [4.0]

    skysup : float
        Sky noise suppression factor [dyn.]

    title : str
        Title for output mosaic [Output from MAKEMOS]

    tols : float
        Fractional scale-factor tolerance [0.001]

    tolz : float
        Zero-point tolerance [0.05]

    usevar : bool
        Use variance during data combination? [TRUE]

    weights : List[float]
        NDF weighting factors [!]

    zero : bool
        Adjust zero-points? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_MAKEMOS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/makemos", "makemos", in_, out, **kwargs)


def makeset(in_, mode, **kwargs):
    """
    Writes Set header information to images.

    Runs the command: $CCDPACK_DIR/makeset .

    Arguments
    ---------
    `in_` : str
        NDFs to group into a Set

    mode : str
        Set header write mode (LIST,CONTAINER,FITS, or SPLIT) [LIST]


    Keyword Arguments
    -----------------
    addwcs : bool
        Add a CCD_SET aligned coordinate frame? [TRUE]

    astfile : str
        Name of file containing exported AST framesets [!]

    fitsindex : str
        FITS header keyword indicating Set Index

    fitsname : str
        FITS header keyword giving Set Name

    indexvals : List[str]
        Mapping of FITINDEX card value to Set Index value

    indices : List[int]
        List of Set INDEX attributes for successive NDFs [!]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    name : str
        Set NAME attributes [*]

    out : str
        HDS container files to contain output Sets

    sections : List[str]
        NDF section specifiers for split sections [!]

    setsize : int
        Number of NDFs in each generated Set [dynamic]

    xstart : List[int]
        Start positions of split sections in X direction

    ystart : List[int]
        Start positions of split sections in Y direction


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_MAKESET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/makeset", "makeset", in_, mode, **kwargs)


def pairndf(in_, outlist, **kwargs):
    """
    Aligns images graphically by drag and drop.

    Runs the command: $CCDPACK_DIR/pairndf .

    Arguments
    ---------
    `in_` : str
        List of NDFs

    outlist : str
        Names for output lists [*.DAT]


    Keyword Arguments
    -----------------
    percentiles : List[float]
        Display percentiles [2,98]

    chooser : bool
        Preview 2 images in chooser widget before alignment? [FALSE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    markstyle1 : str
        String giving style of markers to plot on left image ["shape=plus"]

    markstyle2 : str
        String giving style of markers to plot on right image ["shape=circle"]

    maxcanv : int
        Maximum X or Y dimension of scrolled display region [1280]

    override : bool
        Continue if solution is incomplete? [TRUE]

    prevx : int
        Width of NDF preview display in pixels [350]

    prevy : int
        Height of NDF preview display in pixels [350]

    toler : float
        Object de-duplicating tolerance in pixels [0.5]

    useset : bool
        Group NDFs by Set Name attribute? [FALSE]

    winx : int
        Width of aligner window in pixels [800]

    winy : int
        Height of aligner window in pixels [400]

    zoom : float
        Number of screen pixels per NDF pixel [1]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_PAIRNDF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/pairndf", "pairndf", in_, outlist, **kwargs)


def plotlist(inlist, **kwargs):
    """
    Draws position markers on a graphics display.

    Runs the command: $CCDPACK_DIR/plotlist .

    Arguments
    ---------
    inlist : str
        Input list


    Keyword Arguments
    -----------------
    device : 
        Name of device [Current display device]

    clear : bool
        Clear display device [FALSE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    msize : float
        Marker size (multiple of default) [2.5]

    mtype : int
        Marker type (0-31) -ve uses ids [2]

    ndfnames : bool
        Position list names in NDF extensions [TRUE]

    palnum : int
        Pen number [3]

    thick : int
        Thickness of markers [1]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_PLOTLIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/plotlist", "plotlist", inlist, **kwargs)


def present(*args, **kwargs):
    """
    Presents a list of images to CCDPACK.

    Runs the command: $CCDPACK_DIR/present .

    Keyword Arguments
    -----------------
    adc : float
        Number of electrons per ADU [!]

    adddark : bool
        Add dark exposure times to NDFs [dyn.]

    addflash : bool
        Add pre-flash exposure times to NDFs [dyn.]

    bias : str
        Bias frame names [!]

    biasvalue : float
        Nominal bias value (ADUs) [!]

    bounds : List[int]
        Pixel indices of bias strips (in pairs) [!]

    dark : str
        Dark frame names [!]

    darktime : float
        Dark count exposure time [!]

    deferred : float
        Deferred charge (ADUs) [!]

    direction : str
        Readout direction (X or Y) [!]

    extent : List[int]
        Useful CCD region (xmin,xmax,ymin,ymax) [!]

    filter : str
        Filter type [Current value]

    flash : str
        Pre-flash frame names [!]

    flashtime : float
        Pre-flash exposure time [!]

    flat : str
        Flatfield names [!]

    ftype : str
        Frame type [Current value]

    `in_` : str
        List of NDF names [*]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    masterbias : str
        Name of master bias [!]

    masterdark : str
        Name of master dark [!]

    masterflash : str
        Name of master flash [!]

    masterflat : str
        Master flatfield names [!]

    masters : bool
        Do you have some master calibration frames [FALSE]

    modify : bool
        Modify existing extension items [TRUE]

    multientry : bool
        Does input list contain frame types and factors [FALSE]

    namelist : str
        Input NDF name list [!]

    onedarktime : bool
        Use one dark count exposure time [FALSE]

    onefilter : bool
        Use one filter type [FALSE]

    oneflashtime : bool
        Use one pre-flash exposure time [FALSE]

    rnoise : float
        Readout noise (ADUs) [!]

    saturation : float
        Data saturation value (ADUs) [!]

    simple : bool
        Do input NDFs already have frame types [FALSE]

    target : str
        Target frame names [!]

    zeroed : bool
        Does the MASTER_BIAS frame have a mean of zero [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_PRESENT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/present", "present", *args, **kwargs)


def reduce(*args, **kwargs):
    """
    Automatic CCD data reduction facility (command-line version).

    Runs the command: $CCDPACK_DIR/reduce .

    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_REDUCE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/reduce", "reduce", *args, **kwargs)


def register(inlist, fittype, refpos, **kwargs):
    """
    Determines transformations between lists of positions.

    Runs the command: $CCDPACK_DIR/register .

    Arguments
    ---------
    inlist : str
        Names of position list files

    fittype : , 1-6
        Type of fit to be performed (1-6) [5]

    refpos : int
        Position of reference set [1]


    Keyword Arguments
    -----------------
    fa : str
        Sub-expression

    fb : str
        Sub-expression

    fc : str
        Sub-expression

    fd : str
        Sub-expression

    fe : str
        Sub-expression

    ff : str
        Sub-expression

    fg : str
        Sub-expression

    fh : str
        Sub-expression

    fi : str
        Sub-expression

    fj : str
        Sub-expression

    fk : str
        Sub-expression

    fl : str
        Sub-expression

    fm : str
        Sub-expression

    fn : str
        Sub-expression

    fo : str
        Sub-expression

    fp : str
        Sub-expression

    fq : str
        Sub-expression

    fr : str
        Sub-expression

    fs : str
        Sub-expression

    ft : str
        Sub-expression

    fu : str
        Sub-expression

    full : bool
        Perform a full transformation [FALSE]

    fv : str
        Sub-expression

    fw : str
        Sub-expression

    fx : str
        Sub-expression

    fy : str
        Sub-expression

    fz : str
        Sub-expression

    `in_` : str
        List of NDFs to contain new coordinate systems

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    ndfnames : bool
        Position list names in NDF extensions [TRUE]

    outdomain : str
        Name of registration frame domain [CCD_REG]

    outref : str
        Name of extended reference set [!]

    pa : float
        Initial guess at parameter value [1.0d0]

    pb : float
        Initial guess at parameter value [1.0d0]

    pc : float
        Initial guess at parameter value [1.0d0]

    pd : float
        Initial guess at parameter value [1.0d0]

    pe : float
        Initial guess at parameter value [1.0d0]

    pf : float
        Initial guess at parameter value [1.0d0]

    pg : float
        Initial guess at parameter value [1.0d0]

    ph : float
        Initial guess at parameter value [1.0d0]

    pi : float
        Initial guess at parameter value [1.0d0]

    pj : float
        Initial guess at parameter value [1.0d0]

    pk : float
        Initial guess at parameter value [1.0d0]

    pl : float
        Initial guess at parameter value [1.0d0]

    placein : str
        Put new frames in SINGLE NDF or one EACH per list? [EACH]

    pm : float
        Initial guess at parameter value [1.0d0]

    pn : float
        Initial guess at parameter value [1.0d0]

    po : float
        Initial guess at parameter value [1.0d0]

    pp : float
        Initial guess at parameter value [1.0d0]

    pq : float
        Initial guess at parameter value [1.0d0]

    pr : float
        Initial guess at parameter value [1.0d0]

    ps : float
        Initial guess at parameter value [1.0d0]

    pt : float
        Initial guess at parameter value [1.0d0]

    pu : float
        Initial guess at parameter value [1.0d0]

    pv : float
        Initial guess at parameter value [1.0d0]

    pw : float
        Initial guess at parameter value [1.0d0]

    px : float
        Initial guess at parameter value [1.0d0]

    py : float
        Initial guess at parameter value [1.0d0]

    pz : float
        Initial guess at parameter value [1.0d0]

    simpfi : bool
        Can forward followed by inverse be simplified to unit? [TRUE]

    simpif : bool
        Can inverse followed by forward be simplified to unit? [TRUE]

    toler : float
        Convergence tolerance [0.001]

    useset : bool
        Group lists using Set header information? [FALSE]

    usewcs : bool
        Offsets are in Current coordinate frame? [TRUE]

    wcsfile : str,filename
        Name of NDF to contain all new coordinate systems

    xfor : str
        Forward X transformation

    xinv : str
        Inverse X transformation

    yfor : str
        Forward Y transformation

    yinv : str
        Inverse Y transformation


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_REGISTER
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/register", "register", inlist, fittype, refpos, **kwargs)


def schedule(*args, **kwargs):
    """
    Schedules an automated CCDPACK reduction.

    Runs the command: $CCDPACK_DIR/schedule .

    Keyword Arguments
    -----------------
    `in_` : str
        Names of input NDFs [*]

    script : str
        Name of output script [schedule."stype"]

    stype : str
        Type of output script [CSH]

    darkext : str
        Extension of names output after dark correction [-dk]

    debias : int
        Debiassing method

    debiasext : str
        Extension of names output from DEBIAS [-db]

    execute : bool
        Execute the command procedure [FALSE]

    exelogfile : str
        Name of output script [SCHEDULE.LOG]

    flashext : str
        Extension of names output after flash correction [-dk]

    flatext : str
        Extension of names output after flatfielding [-flt]

    interp : int
        Interpolation method

    irflats : bool
        Using TARGETS as possible flatfields [FALSE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    masterbias : str
        Name of master bias NDF [MASTER_BIAS]

    masterdark : str
        Name of master dark NDF [MASTER_DARK]

    masterflash : str
        Name of master pre-flash NDF [MASTER_FLASH]

    masterflat : str
        Prefix name for master flats NDF [MASTER_FLAT]

    spacesave : str
        Save disk space (none,some,lots) [NONE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_SCHEDULE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/schedule", "schedule", *args, **kwargs)


def showset(in_, **kwargs):
    """
    Outputs image Set header information.

    Runs the command: $CCDPACK_DIR/showset .

    Arguments
    ---------
    `in_` : str
        NDFs to consider for output


    Keyword Arguments
    -----------------
    index : str
        Acceptable Set Index values

    indexlike : str
        Template NDFs for Set Index value

    listby : str
        Primary sort key (INDEX, NAME or NONE) [NAME]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    name : str
        Allowed Set Name values

    namelike : str
        Template NDFs for Set Name value

    namelist : str
        Output file for selected NDFs [showset.lis]

    pickindex : str
        Selection criteria for Set Index (ALL,EQUAL,LIKE) [ALL]

    pickname : str
        Selection criteria for Set Name (ALL,EQUAL,LIKE) [ALL]

    setless : bool
        Include NDFs with no Set headers? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_SHOWSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/showset", "showset", in_, **kwargs)


def tranlist(inlist, outlist, trtype, **kwargs):
    """
    Transform lists of positions.

    Runs the command: $CCDPACK_DIR/tranlist .

    Arguments
    ---------
    inlist : str
        Names of input position lists

    outlist : str
        Names for output lists

    trtype : str
        Transformation type [COEFF]


    Keyword Arguments
    -----------------
    epochin : float
        Source frame epoch of observation [Dynamic]

    epochout : float
        Destination frame epoch of observation [Dynamic]

    fa : str
        Sub-expression

    fb : str
        Sub-expression

    fc : str
        Sub-expression

    fd : str
        Sub-expression

    fe : str
        Sub-expression

    ff : str
        Sub-expression

    fg : str
        Sub-expression

    fh : str
        Sub-expression

    fi : str
        Sub-expression

    fj : str
        Sub-expression

    fk : str
        Sub-expression

    fl : str
        Sub-expression

    fm : str
        Sub-expression

    fn : str
        Sub-expression

    fo : str
        Sub-expression

    forward : bool
        Use forward transformation [TRUE]

    fp : str
        Sub-expression

    fq : str
        Sub-expression

    fr : str
        Sub-expression

    framein : str
        Source coordinate frame [PIXEL]

    frameout : str
        Destination coordinate frame [!]

    fs : str
        Sub-expression

    ft : str
        Sub-expression

    fu : str
        Sub-expression

    fv : str
        Sub-expression

    fw : str
        Sub-expression

    fx : str
        Sub-expression

    fy : str
        Sub-expression

    fz : str
        Sub-expression

    inext : bool
        Locate transform structure in NDF extensions [TRUE]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    namelist : str
        Name of output filenames listing [TRANLIST.LIS]

    ndfnames : bool
        Position list names in NDF extensions [TRUE]

    pa : float
        Constant value

    pb : float
        Constant value

    pc : float
        Constant value

    pd : float
        Constant value

    pe : float
        Constant value

    pf : float
        Constant value

    pg : float
        Constant value

    ph : float
        Constant value

    pi : float
        Constant value [3.14159265359D0]

    pj : float
        Constant value

    pk : float
        Constant value

    pl : float
        Constant value

    pm : float
        Constant value

    pn : float
        Constant value

    po : float
        Constant value

    pp : float
        Constant value

    pq : float
        Constant value

    pr : float
        Constant value

    ps : float
        Constant value

    pt : float
        Constant value

    pu : float
        Constant value

    pv : float
        Constant value

    pw : float
        Constant value

    px : float
        Constant value

    py : float
        Constant value

    pz : float
        Constant value

    tr : List[float]
        Linear transformation coefficients (6) [PA,PB,PC,PD,PE,PF]

    transform : TRN
        Transformation structure

    wcsfile : str,filename
        NDF containing WCS component

    xfor : str
        X mapping expression

    yfor : str
        Y mapping expression


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_TRANLIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/tranlist", "tranlist", inlist, outlist, trtype, **kwargs)


def tranndf(in_, **kwargs):
    """
    Transforms a list of images by resampling.

    Runs the command: $CCDPACK_DIR/tranndf .

    Arguments
    ---------
    `in_` : str
        List of NDFs


    Keyword Arguments
    -----------------
    out : str
        Output NDF

    method : str
        Re-sampling method [NEAREST]

    conserve : bool
        Conserve flux? [TRUE]

    inext : bool
        Locate transform structure in NDF extensions [TRUE]

    lbound : List[float]
        Lower bounds of the output NDFs [Dynamic default]

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    shape : str
        Method used to get bounds of output NDFs [AUTO]

    title : str
        Title for the output NDFs [Output from TRANNDF]

    transform : TRN
        Transformation structure

    ubound : List[float]
        Upper bounds of the output NDFs [Dynamic default]

    usewcs : bool
        Use AST framesets [TRUE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_TRANNDF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/tranndf", "tranndf", in_, **kwargs)


def wcsedit(in_, mode, frame, **kwargs):
    """
    Modifies or examines WCS components of a set of images.

    Runs the command: $CCDPACK_DIR/wcsedit .

    Arguments
    ---------
    `in_` : str
        NDFs with WCS components to be accessed

    mode : str
        Action to perform (CURRENT,ADD,REMOVE,SET,SHOW) [CURRENT]

    frame : str
        Basis frame in WCS component [!]


    Keyword Arguments
    -----------------
    coeffs : List[float]
        Coefficients to define mapping

    domain : str
        Name of new domain [CCD_WCSEDIT]

    epoch : float
        Epoch of basis frame

    forexp : str
        MathMap forward mapping expressions

    invert : bool
        Use inverse mapping? [FALSE]

    invexp : str
        MathMap inverse mapping expressions

    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    maptype : str
        Type of mapping (UNIT,LINEAR,PINCUSHION,MATH) [UNIT]

    namelist : str
        Output file name for list of successfully accessed images [WCSEDIT.LIS]

    set : str
        String for setting frame attributes

    simpfi : bool
        Simplify forward followed by inverse to unit? [TRUE]

    simpif : bool
        Simplify inverse followed by forward to unit? [TRUE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_WCSEDIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/wcsedit", "wcsedit", in_, mode, frame, **kwargs)


def wcsreg(in_, domains, **kwargs):
    """
    Aligns images using multiple attached coordinate systems

    Runs the command: $CCDPACK_DIR/wcsreg .

    Arguments
    ---------
    `in_` : str
        NDFs to align

    domains : List[str]
        Ordered list of domains to align by [!]


    Keyword Arguments
    -----------------
    logfile : str
        Logfile name [CCDPACK.LOG]

    logto : str
        Write log to (Logfile,Terminal,Neither,Both) [BOTH]

    namelist : str
        Name of successfully registered files listing [wcsreg.lis]

    outdomain : str
        Name of output alignment frame domain [CCD_WCSREG]

    override : bool
        Continue when not all NDFs can be aligned [FALSE]

    refpos : int
        Position of reference set [1]

    useset : bool
        Should Set information (CCD_SET frames) take precedence? [FALSE]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_WCSREG
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/wcsreg", "wcsreg", in_, domains, **kwargs)


def xreduce(*args, **kwargs):
    """
    Starts the automated CCD data reduction GUI.

    Runs the command: $CCDPACK_DIR/xreduce .

    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun139.htx/sun139.html?xref_XREDUCE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$CCDPACK_DIR/xreduce", "xreduce", *args, **kwargs)

