# coding=UTF-8
from __future__ import unicode_literals
from django.conf import settings
from django.core.management import call_command
from django.core.management.base import BaseCommand, CommandError
from cubane.svgicons import get_svgicons_filename
from cubane.svgicons import get_combined_svg
from cubane.lib.resources import get_resources
from cubane.lib.resources import get_resource_targets
from cubane.lib.resources import load_resource_version_identifier
import os
import codecs


class Command(BaseCommand):
    """
    Generate svg icon sheet files - Management command.
    """
    args = ''
    help = 'Generate svg icon sheet files'


    def add_arguments(self, parser): # pragma: no cover
        parser.add_argument(
            '--identifier', action='store', dest='identifier',
            default=None,
            help='Nominates the version identifier for which SVG Icons are generated. Defaults to the "current" version identifier generated by the last deployment.',
        )


    def handle(self, *args, **options):
        """
        Run command.
        """
        self.verbose('Processing svgicons...Please Wait...')

        identifier = options.get('identifier')
        if not identifier:
            identifier = load_resource_version_identifier()

        for target in get_resource_targets():
            # build filename
            filename = get_svgicons_filename(target, identifier)

            # build icon sheet
            resources = get_resources(target, 'svg')
            resources_with_style = get_resources(target, 'svg', 'with-style')
            if len(resources) > 0 or len(resources_with_style) > 0:
                self.verbose('> %s' % filename)

                svg = get_combined_svg(resources, resources_with_style)

                # folder exists?
                if not os.path.isdir(settings.STATIC_ROOT):
                    os.makedirs(settings.STATIC_ROOT)

                # write file
                path = os.path.join(settings.STATIC_ROOT, filename)
                with codecs.open(path, 'w', encoding='utf-8') as f:
                    f.write(svg)

        self.verbose('Complete.')


    def verbose(self, msg): # pragma: no cover
        """
        Print given verbose message or keep quite if we are under test.
        """
        if not settings.TEST:
            print msg