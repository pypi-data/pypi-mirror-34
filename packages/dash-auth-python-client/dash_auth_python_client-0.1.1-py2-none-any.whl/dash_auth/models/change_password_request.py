# coding: utf-8

"""
    Dash Auth API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dash_auth.models.user_query import UserQuery  # noqa: F401,E501


class ChangePasswordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'UserQuery',
        'new_password': 'str',
        'token': 'str'
    }

    attribute_map = {
        'user': 'user',
        'new_password': 'newPassword',
        'token': 'token'
    }

    def __init__(self, user=None, new_password=None, token=None):  # noqa: E501
        """ChangePasswordRequest - a model defined in Swagger"""  # noqa: E501

        self._user = None
        self._new_password = None
        self._token = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if new_password is not None:
            self.new_password = new_password
        if token is not None:
            self.token = token

    @property
    def user(self):
        """Gets the user of this ChangePasswordRequest.  # noqa: E501


        :return: The user of this ChangePasswordRequest.  # noqa: E501
        :rtype: UserQuery
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChangePasswordRequest.


        :param user: The user of this ChangePasswordRequest.  # noqa: E501
        :type: UserQuery
        """

        self._user = user

    @property
    def new_password(self):
        """Gets the new_password of this ChangePasswordRequest.  # noqa: E501


        :return: The new_password of this ChangePasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this ChangePasswordRequest.


        :param new_password: The new_password of this ChangePasswordRequest.  # noqa: E501
        :type: str
        """

        self._new_password = new_password

    @property
    def token(self):
        """Gets the token of this ChangePasswordRequest.  # noqa: E501


        :return: The token of this ChangePasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ChangePasswordRequest.


        :param token: The token of this ChangePasswordRequest.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangePasswordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
