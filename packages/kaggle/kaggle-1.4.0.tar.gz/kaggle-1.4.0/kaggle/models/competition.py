#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kaggle.models.tag import Tag  # noqa: F401,E501


class Competition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'str',
        'tags': 'list[Tag]',
        'description': 'str',
        'id': 'int',
        'title': 'str',
        'url': 'str',
        'deadline': 'datetime',
        'category': 'str',
        'reward': 'str',
        'organization_name': 'str',
        'organization_ref': 'str',
        'kernel_count': 'int',
        'team_count': 'int',
        'user_has_entered': 'bool',
        'user_rank': 'int',
        'merger_deadline': 'datetime',
        'new_entrant_deadline': 'datetime',
        'enabled_deadline': 'datetime',
        'max_daily_submissions': 'int',
        'max_team_size': 'int',
        'evaluation_metric': 'str',
        'awards_points': 'bool',
        'is_kernels_submissions_only': 'bool',
        'submissions_disabled': 'bool'
    }

    attribute_map = {
        'ref': 'ref',
        'tags': 'tags',
        'description': 'description',
        'id': 'id',
        'title': 'title',
        'url': 'url',
        'deadline': 'deadline',
        'category': 'category',
        'reward': 'reward',
        'organization_name': 'organizationName',
        'organization_ref': 'organizationRef',
        'kernel_count': 'kernelCount',
        'team_count': 'teamCount',
        'user_has_entered': 'userHasEntered',
        'user_rank': 'userRank',
        'merger_deadline': 'mergerDeadline',
        'new_entrant_deadline': 'newEntrantDeadline',
        'enabled_deadline': 'enabledDeadline',
        'max_daily_submissions': 'maxDailySubmissions',
        'max_team_size': 'maxTeamSize',
        'evaluation_metric': 'evaluationMetric',
        'awards_points': 'awardsPoints',
        'is_kernels_submissions_only': 'isKernelsSubmissionsOnly',
        'submissions_disabled': 'submissionsDisabled'
    }

    def __init__(self, ref=None, tags=None, description=None, id=None, title=None, url=None, deadline=None, category=None, reward=None, organization_name=None, organization_ref=None, kernel_count=None, team_count=None, user_has_entered=None, user_rank=None, merger_deadline=None, new_entrant_deadline=None, enabled_deadline=None, max_daily_submissions=None, max_team_size=None, evaluation_metric=None, awards_points=None, is_kernels_submissions_only=None, submissions_disabled=None):  # noqa: E501
        """Competition - a model defined in Swagger"""  # noqa: E501

        self._ref = None
        self._tags = None
        self._description = None
        self._id = None
        self._title = None
        self._url = None
        self._deadline = None
        self._category = None
        self._reward = None
        self._organization_name = None
        self._organization_ref = None
        self._kernel_count = None
        self._team_count = None
        self._user_has_entered = None
        self._user_rank = None
        self._merger_deadline = None
        self._new_entrant_deadline = None
        self._enabled_deadline = None
        self._max_daily_submissions = None
        self._max_team_size = None
        self._evaluation_metric = None
        self._awards_points = None
        self._is_kernels_submissions_only = None
        self._submissions_disabled = None
        self.discriminator = None

        self.ref = ref
        self.tags = tags
        if description is not None:
            self.description = description
        self.id = id
        self.title = title
        self.url = url
        if deadline is not None:
            self.deadline = deadline
        if category is not None:
            self.category = category
        if reward is not None:
            self.reward = reward
        if organization_name is not None:
            self.organization_name = organization_name
        if organization_ref is not None:
            self.organization_ref = organization_ref
        if kernel_count is not None:
            self.kernel_count = kernel_count
        if team_count is not None:
            self.team_count = team_count
        self.user_has_entered = user_has_entered
        if user_rank is not None:
            self.user_rank = user_rank
        if merger_deadline is not None:
            self.merger_deadline = merger_deadline
        if new_entrant_deadline is not None:
            self.new_entrant_deadline = new_entrant_deadline
        if enabled_deadline is not None:
            self.enabled_deadline = enabled_deadline
        if max_daily_submissions is not None:
            self.max_daily_submissions = max_daily_submissions
        if max_team_size is not None:
            self.max_team_size = max_team_size
        if evaluation_metric is not None:
            self.evaluation_metric = evaluation_metric
        self.awards_points = awards_points
        self.is_kernels_submissions_only = is_kernels_submissions_only
        self.submissions_disabled = submissions_disabled

    @property
    def ref(self):
        """Gets the ref of this Competition.  # noqa: E501

        The competition reference string. This is the end part of the URL. For example, the `ref` for https://www.kaggle.com/c/titanic is `titanic`.  # noqa: E501

        :return: The ref of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Competition.

        The competition reference string. This is the end part of the URL. For example, the `ref` for https://www.kaggle.com/c/titanic is `titanic`.  # noqa: E501

        :param ref: The ref of this Competition.  # noqa: E501
        :type: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501

        self._ref = ref

    @property
    def tags(self):
        """Gets the tags of this Competition.  # noqa: E501

        The categories that the competition is tagged with. May be empty.  # noqa: E501

        :return: The tags of this Competition.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Competition.

        The categories that the competition is tagged with. May be empty.  # noqa: E501

        :param tags: The tags of this Competition.  # noqa: E501
        :type: list[Tag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def description(self):
        """Gets the description of this Competition.  # noqa: E501

        A description of the competition.  # noqa: E501

        :return: The description of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Competition.

        A description of the competition.  # noqa: E501

        :param description: The description of this Competition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Competition.  # noqa: E501

        The integer ID of the competition. Should not be used in place of the `ref` when making API calls.  # noqa: E501

        :return: The id of this Competition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Competition.

        The integer ID of the competition. Should not be used in place of the `ref` when making API calls.  # noqa: E501

        :param id: The id of this Competition.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Competition.  # noqa: E501

        The title of the competition.  # noqa: E501

        :return: The title of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Competition.

        The title of the competition.  # noqa: E501

        :param title: The title of this Competition.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this Competition.  # noqa: E501

        The URL pointing to the competition. This will contain the `ref`.  # noqa: E501

        :return: The url of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Competition.

        The URL pointing to the competition. This will contain the `ref`.  # noqa: E501

        :param url: The url of this Competition.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def deadline(self):
        """Gets the deadline of this Competition.  # noqa: E501

        The competition deadline.  # noqa: E501

        :return: The deadline of this Competition.  # noqa: E501
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this Competition.

        The competition deadline.  # noqa: E501

        :param deadline: The deadline of this Competition.  # noqa: E501
        :type: datetime
        """

        self._deadline = deadline

    @property
    def category(self):
        """Gets the category of this Competition.  # noqa: E501

        The competition category, such as `'Featured'`, `'Getting Started'`, `'Research'`, and `'Playground'`. (Not an exhaustive list.)  # noqa: E501

        :return: The category of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Competition.

        The competition category, such as `'Featured'`, `'Getting Started'`, `'Research'`, and `'Playground'`. (Not an exhaustive list.)  # noqa: E501

        :param category: The category of this Competition.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def reward(self):
        """Gets the reward of this Competition.  # noqa: E501

        The competition's reward. This may be either a monetary value or something like 'Knowledge'.  # noqa: E501

        :return: The reward of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this Competition.

        The competition's reward. This may be either a monetary value or something like 'Knowledge'.  # noqa: E501

        :param reward: The reward of this Competition.  # noqa: E501
        :type: str
        """

        self._reward = reward

    @property
    def organization_name(self):
        """Gets the organization_name of this Competition.  # noqa: E501

        The name of the organization hosting the competition.  # noqa: E501

        :return: The organization_name of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this Competition.

        The name of the organization hosting the competition.  # noqa: E501

        :param organization_name: The organization_name of this Competition.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def organization_ref(self):
        """Gets the organization_ref of this Competition.  # noqa: E501

        The hosting organization's reference string. For example, the `ref` for https://www.kaggle.com/kaggle is `kaggle`.  # noqa: E501

        :return: The organization_ref of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._organization_ref

    @organization_ref.setter
    def organization_ref(self, organization_ref):
        """Sets the organization_ref of this Competition.

        The hosting organization's reference string. For example, the `ref` for https://www.kaggle.com/kaggle is `kaggle`.  # noqa: E501

        :param organization_ref: The organization_ref of this Competition.  # noqa: E501
        :type: str
        """

        self._organization_ref = organization_ref

    @property
    def kernel_count(self):
        """Gets the kernel_count of this Competition.  # noqa: E501

        The number of kernels associated with this competition.  # noqa: E501

        :return: The kernel_count of this Competition.  # noqa: E501
        :rtype: int
        """
        return self._kernel_count

    @kernel_count.setter
    def kernel_count(self, kernel_count):
        """Sets the kernel_count of this Competition.

        The number of kernels associated with this competition.  # noqa: E501

        :param kernel_count: The kernel_count of this Competition.  # noqa: E501
        :type: int
        """

        self._kernel_count = kernel_count

    @property
    def team_count(self):
        """Gets the team_count of this Competition.  # noqa: E501

        The number of teams that have entered this competition.  # noqa: E501

        :return: The team_count of this Competition.  # noqa: E501
        :rtype: int
        """
        return self._team_count

    @team_count.setter
    def team_count(self, team_count):
        """Sets the team_count of this Competition.

        The number of teams that have entered this competition.  # noqa: E501

        :param team_count: The team_count of this Competition.  # noqa: E501
        :type: int
        """

        self._team_count = team_count

    @property
    def user_has_entered(self):
        """Gets the user_has_entered of this Competition.  # noqa: E501

        Whether or not the current user has entered this competition. This is based on the authentication token sent with the request.  # noqa: E501

        :return: The user_has_entered of this Competition.  # noqa: E501
        :rtype: bool
        """
        return self._user_has_entered

    @user_has_entered.setter
    def user_has_entered(self, user_has_entered):
        """Sets the user_has_entered of this Competition.

        Whether or not the current user has entered this competition. This is based on the authentication token sent with the request.  # noqa: E501

        :param user_has_entered: The user_has_entered of this Competition.  # noqa: E501
        :type: bool
        """
        if user_has_entered is None:
            raise ValueError("Invalid value for `user_has_entered`, must not be `None`")  # noqa: E501

        self._user_has_entered = user_has_entered

    @property
    def user_rank(self):
        """Gets the user_rank of this Competition.  # noqa: E501

        The user's current rank in the competition. This is based on the authentication token sent with the request.  # noqa: E501

        :return: The user_rank of this Competition.  # noqa: E501
        :rtype: int
        """
        return self._user_rank

    @user_rank.setter
    def user_rank(self, user_rank):
        """Sets the user_rank of this Competition.

        The user's current rank in the competition. This is based on the authentication token sent with the request.  # noqa: E501

        :param user_rank: The user_rank of this Competition.  # noqa: E501
        :type: int
        """

        self._user_rank = user_rank

    @property
    def merger_deadline(self):
        """Gets the merger_deadline of this Competition.  # noqa: E501

        The deadline for teams to merge.  # noqa: E501

        :return: The merger_deadline of this Competition.  # noqa: E501
        :rtype: datetime
        """
        return self._merger_deadline

    @merger_deadline.setter
    def merger_deadline(self, merger_deadline):
        """Sets the merger_deadline of this Competition.

        The deadline for teams to merge.  # noqa: E501

        :param merger_deadline: The merger_deadline of this Competition.  # noqa: E501
        :type: datetime
        """

        self._merger_deadline = merger_deadline

    @property
    def new_entrant_deadline(self):
        """Gets the new_entrant_deadline of this Competition.  # noqa: E501

        The deadline for new teams to enter.  # noqa: E501

        :return: The new_entrant_deadline of this Competition.  # noqa: E501
        :rtype: datetime
        """
        return self._new_entrant_deadline

    @new_entrant_deadline.setter
    def new_entrant_deadline(self, new_entrant_deadline):
        """Sets the new_entrant_deadline of this Competition.

        The deadline for new teams to enter.  # noqa: E501

        :param new_entrant_deadline: The new_entrant_deadline of this Competition.  # noqa: E501
        :type: datetime
        """

        self._new_entrant_deadline = new_entrant_deadline

    @property
    def enabled_deadline(self):
        """Gets the enabled_deadline of this Competition.  # noqa: E501


        :return: The enabled_deadline of this Competition.  # noqa: E501
        :rtype: datetime
        """
        return self._enabled_deadline

    @enabled_deadline.setter
    def enabled_deadline(self, enabled_deadline):
        """Sets the enabled_deadline of this Competition.


        :param enabled_deadline: The enabled_deadline of this Competition.  # noqa: E501
        :type: datetime
        """

        self._enabled_deadline = enabled_deadline

    @property
    def max_daily_submissions(self):
        """Gets the max_daily_submissions of this Competition.  # noqa: E501

        The maximum number of daily submissions that a team can make.  # noqa: E501

        :return: The max_daily_submissions of this Competition.  # noqa: E501
        :rtype: int
        """
        return self._max_daily_submissions

    @max_daily_submissions.setter
    def max_daily_submissions(self, max_daily_submissions):
        """Sets the max_daily_submissions of this Competition.

        The maximum number of daily submissions that a team can make.  # noqa: E501

        :param max_daily_submissions: The max_daily_submissions of this Competition.  # noqa: E501
        :type: int
        """

        self._max_daily_submissions = max_daily_submissions

    @property
    def max_team_size(self):
        """Gets the max_team_size of this Competition.  # noqa: E501

        The maximum number of people that can join a team.  # noqa: E501

        :return: The max_team_size of this Competition.  # noqa: E501
        :rtype: int
        """
        return self._max_team_size

    @max_team_size.setter
    def max_team_size(self, max_team_size):
        """Sets the max_team_size of this Competition.

        The maximum number of people that can join a team.  # noqa: E501

        :param max_team_size: The max_team_size of this Competition.  # noqa: E501
        :type: int
        """

        self._max_team_size = max_team_size

    @property
    def evaluation_metric(self):
        """Gets the evaluation_metric of this Competition.  # noqa: E501

        The type of metric used to evaluate submissions, such as `'Categorization Accuracy'` or `'Root Mean Squared Logarithmic Error'`.  # noqa: E501

        :return: The evaluation_metric of this Competition.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_metric

    @evaluation_metric.setter
    def evaluation_metric(self, evaluation_metric):
        """Sets the evaluation_metric of this Competition.

        The type of metric used to evaluate submissions, such as `'Categorization Accuracy'` or `'Root Mean Squared Logarithmic Error'`.  # noqa: E501

        :param evaluation_metric: The evaluation_metric of this Competition.  # noqa: E501
        :type: str
        """

        self._evaluation_metric = evaluation_metric

    @property
    def awards_points(self):
        """Gets the awards_points of this Competition.  # noqa: E501

        Whether or not the competition awards ranking points to users.  # noqa: E501

        :return: The awards_points of this Competition.  # noqa: E501
        :rtype: bool
        """
        return self._awards_points

    @awards_points.setter
    def awards_points(self, awards_points):
        """Sets the awards_points of this Competition.

        Whether or not the competition awards ranking points to users.  # noqa: E501

        :param awards_points: The awards_points of this Competition.  # noqa: E501
        :type: bool
        """
        if awards_points is None:
            raise ValueError("Invalid value for `awards_points`, must not be `None`")  # noqa: E501

        self._awards_points = awards_points

    @property
    def is_kernels_submissions_only(self):
        """Gets the is_kernels_submissions_only of this Competition.  # noqa: E501

        Whether or not submissions must be kernels.  # noqa: E501

        :return: The is_kernels_submissions_only of this Competition.  # noqa: E501
        :rtype: bool
        """
        return self._is_kernels_submissions_only

    @is_kernels_submissions_only.setter
    def is_kernels_submissions_only(self, is_kernels_submissions_only):
        """Sets the is_kernels_submissions_only of this Competition.

        Whether or not submissions must be kernels.  # noqa: E501

        :param is_kernels_submissions_only: The is_kernels_submissions_only of this Competition.  # noqa: E501
        :type: bool
        """
        if is_kernels_submissions_only is None:
            raise ValueError("Invalid value for `is_kernels_submissions_only`, must not be `None`")  # noqa: E501

        self._is_kernels_submissions_only = is_kernels_submissions_only

    @property
    def submissions_disabled(self):
        """Gets the submissions_disabled of this Competition.  # noqa: E501

        Whether or not submissions are disabled for this competition.  # noqa: E501

        :return: The submissions_disabled of this Competition.  # noqa: E501
        :rtype: bool
        """
        return self._submissions_disabled

    @submissions_disabled.setter
    def submissions_disabled(self, submissions_disabled):
        """Sets the submissions_disabled of this Competition.

        Whether or not submissions are disabled for this competition.  # noqa: E501

        :param submissions_disabled: The submissions_disabled of this Competition.  # noqa: E501
        :type: bool
        """
        if submissions_disabled is None:
            raise ValueError("Invalid value for `submissions_disabled`, must not be `None`")  # noqa: E501

        self._submissions_disabled = submissions_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Competition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
