# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

project(module.name, '1.0-0')

import nr.fs
import posixpath
import re
import requests
import tarfile
import zipfile
import {g as build_cache} from 'net.craftr.tool.cache'


def get_source_archive(url):
  """
  Downloads an archive from the specified *URL* and extracts it. Returns the
  path to the unpacked directory.
  """

  archive_cache = build_cache.setdefault('craftr/tools/download', {})
  directory = archive_cache.get(url)
  if directory and path.isdir(directory):
    return directory

  filename = posixpath.basename(url)
  response = requests.get(url, stream=True)
  if 'Content-Disposition' in response.headers:
    hdr = response.headers['Content-Disposition']
    filename = re.findall("filename=(.+)", hdr)[0]

  directory = path.join(session.build_directory, '.source-downloads', path.rmvsuffix(filename))

  print('Downloading {} ...'.format(url))
  response.raise_for_status()
  with nr.fs.tempfile(suffix=filename) as fp:
    for chunk in response.iter_content(16*1024):
      fp.write(chunk)
    fp.close()
    path.makedirs(directory)
    print('Extracting to {} ...'.format(directory))
    if filename.endswith('.zip'):
      with zipfile.ZipFile(fp.name) as zipf:
        zipf.extractall(directory)
    else:
      with tarfile.open(fp.name) as tarf:
        tarf.extractall(directory)

  archive_cache[url] = directory
  return directory
