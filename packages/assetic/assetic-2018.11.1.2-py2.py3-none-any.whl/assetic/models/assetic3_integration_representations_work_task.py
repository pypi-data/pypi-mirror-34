# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.assetic3_integration_representations_rs_resource_representation import Assetic3IntegrationRepresentationsRsResourceRepresentation  # noqa: F401,E501
##from assetic.models.assetic3_integration_representations_work_order_labour import Assetic3IntegrationRepresentationsWorkOrderLabour  # noqa: F401,E501
##from assetic.models.assetic3_integration_representations_work_order_material import Assetic3IntegrationRepresentationsWorkOrderMaterial  # noqa: F401,E501
##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsWorkTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'friendly_id': 'int',
        'parent_id': 'str',
        'work_task_status_id': 'int',
        'work_task_status': 'str',
        'description': 'str',
        'materials': 'list[Assetic3IntegrationRepresentationsWorkOrderMaterial]',
        'work_task_craft_id': 'str',
        'craft': 'Assetic3IntegrationRepresentationsWorkOrderLabour',
        'resource': 'Assetic3IntegrationRepresentationsRsResourceRepresentation',
        'labour_costs': 'float',
        'material_costs': 'float',
        'external_costs': 'float',
        'other_costs': 'float',
        'tool_and_material_available': 'bool',
        'loss_of_service': 'bool',
        'network_entity_id': 'str',
        'network_entity_name': 'str',
        'work_task_material_status_id': 'int',
        'work_task_material_status': 'str',
        'component_id': 'str',
        'component_name': 'str',
        'component_type_id': 'str',
        'component_type_name': 'str',
        'work_order_id': 'str',
        'can_edit': 'bool',
        'actual_start_date': 'str',
        'actual_finish_date': 'str',
        'last_modified': 'str',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'friendly_id': 'FriendlyId',
        'parent_id': 'ParentId',
        'work_task_status_id': 'WorkTaskStatusId',
        'work_task_status': 'WorkTaskStatus',
        'description': 'Description',
        'materials': 'Materials',
        'work_task_craft_id': 'WorkTaskCraftId',
        'craft': 'Craft',
        'resource': 'Resource',
        'labour_costs': 'LabourCosts',
        'material_costs': 'MaterialCosts',
        'external_costs': 'ExternalCosts',
        'other_costs': 'OtherCosts',
        'tool_and_material_available': 'ToolAndMaterialAvailable',
        'loss_of_service': 'LossOfService',
        'network_entity_id': 'NetworkEntityId',
        'network_entity_name': 'NetworkEntityName',
        'work_task_material_status_id': 'WorkTaskMaterialStatusId',
        'work_task_material_status': 'WorkTaskMaterialStatus',
        'component_id': 'ComponentId',
        'component_name': 'ComponentName',
        'component_type_id': 'ComponentTypeId',
        'component_type_name': 'ComponentTypeName',
        'work_order_id': 'WorkOrderId',
        'can_edit': 'CanEdit',
        'actual_start_date': 'ActualStartDate',
        'actual_finish_date': 'ActualFinishDate',
        'last_modified': 'LastModified',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, friendly_id=None, parent_id=None, work_task_status_id=None, work_task_status=None, description=None, materials=None, work_task_craft_id=None, craft=None, resource=None, labour_costs=None, material_costs=None, external_costs=None, other_costs=None, tool_and_material_available=None, loss_of_service=None, network_entity_id=None, network_entity_name=None, work_task_material_status_id=None, work_task_material_status=None, component_id=None, component_name=None, component_type_id=None, component_type_name=None, work_order_id=None, can_edit=None, actual_start_date=None, actual_finish_date=None, last_modified=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsWorkTask - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._friendly_id = None
        self._parent_id = None
        self._work_task_status_id = None
        self._work_task_status = None
        self._description = None
        self._materials = None
        self._work_task_craft_id = None
        self._craft = None
        self._resource = None
        self._labour_costs = None
        self._material_costs = None
        self._external_costs = None
        self._other_costs = None
        self._tool_and_material_available = None
        self._loss_of_service = None
        self._network_entity_id = None
        self._network_entity_name = None
        self._work_task_material_status_id = None
        self._work_task_material_status = None
        self._component_id = None
        self._component_name = None
        self._component_type_id = None
        self._component_type_name = None
        self._work_order_id = None
        self._can_edit = None
        self._actual_start_date = None
        self._actual_finish_date = None
        self._last_modified = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if friendly_id is not None:
            self.friendly_id = friendly_id
        if parent_id is not None:
            self.parent_id = parent_id
        if work_task_status_id is not None:
            self.work_task_status_id = work_task_status_id
        if work_task_status is not None:
            self.work_task_status = work_task_status
        if description is not None:
            self.description = description
        if materials is not None:
            self.materials = materials
        if work_task_craft_id is not None:
            self.work_task_craft_id = work_task_craft_id
        if craft is not None:
            self.craft = craft
        if resource is not None:
            self.resource = resource
        if labour_costs is not None:
            self.labour_costs = labour_costs
        if material_costs is not None:
            self.material_costs = material_costs
        if external_costs is not None:
            self.external_costs = external_costs
        if other_costs is not None:
            self.other_costs = other_costs
        if tool_and_material_available is not None:
            self.tool_and_material_available = tool_and_material_available
        if loss_of_service is not None:
            self.loss_of_service = loss_of_service
        if network_entity_id is not None:
            self.network_entity_id = network_entity_id
        if network_entity_name is not None:
            self.network_entity_name = network_entity_name
        if work_task_material_status_id is not None:
            self.work_task_material_status_id = work_task_material_status_id
        if work_task_material_status is not None:
            self.work_task_material_status = work_task_material_status
        if component_id is not None:
            self.component_id = component_id
        if component_name is not None:
            self.component_name = component_name
        if component_type_id is not None:
            self.component_type_id = component_type_id
        if component_type_name is not None:
            self.component_type_name = component_type_name
        if work_order_id is not None:
            self.work_order_id = work_order_id
        if can_edit is not None:
            self.can_edit = can_edit
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if actual_finish_date is not None:
            self.actual_finish_date = actual_finish_date
        if last_modified is not None:
            self.last_modified = last_modified
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assetic3IntegrationRepresentationsWorkTask.


        :param id: The id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def friendly_id(self):
        """Gets the friendly_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The friendly_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: int
        """
        return self._friendly_id

    @friendly_id.setter
    def friendly_id(self, friendly_id):
        """Sets the friendly_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param friendly_id: The friendly_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: int
        """

        self._friendly_id = friendly_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The parent_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param parent_id: The parent_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def work_task_status_id(self):
        """Gets the work_task_status_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The work_task_status_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: int
        """
        return self._work_task_status_id

    @work_task_status_id.setter
    def work_task_status_id(self, work_task_status_id):
        """Sets the work_task_status_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param work_task_status_id: The work_task_status_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: int
        """

        self._work_task_status_id = work_task_status_id

    @property
    def work_task_status(self):
        """Gets the work_task_status of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The work_task_status of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._work_task_status

    @work_task_status.setter
    def work_task_status(self, work_task_status):
        """Sets the work_task_status of this Assetic3IntegrationRepresentationsWorkTask.


        :param work_task_status: The work_task_status of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["Assigned", "InteruptedParts", "InteruptedAssets", "InteruptedPrioritisations", "Unassigned", "Completed"]  # noqa: E501
        if work_task_status not in allowed_values:
            raise ValueError(
                "Invalid value for `work_task_status` ({0}), must be one of {1}"  # noqa: E501
                .format(work_task_status, allowed_values)
            )

        self._work_task_status = work_task_status

    @property
    def description(self):
        """Gets the description of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The description of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assetic3IntegrationRepresentationsWorkTask.


        :param description: The description of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def materials(self):
        """Gets the materials of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The materials of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: list[Assetic3IntegrationRepresentationsWorkOrderMaterial]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this Assetic3IntegrationRepresentationsWorkTask.


        :param materials: The materials of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: list[Assetic3IntegrationRepresentationsWorkOrderMaterial]
        """

        self._materials = materials

    @property
    def work_task_craft_id(self):
        """Gets the work_task_craft_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The work_task_craft_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._work_task_craft_id

    @work_task_craft_id.setter
    def work_task_craft_id(self, work_task_craft_id):
        """Sets the work_task_craft_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param work_task_craft_id: The work_task_craft_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._work_task_craft_id = work_task_craft_id

    @property
    def craft(self):
        """Gets the craft of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The craft of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: Assetic3IntegrationRepresentationsWorkOrderLabour
        """
        return self._craft

    @craft.setter
    def craft(self, craft):
        """Sets the craft of this Assetic3IntegrationRepresentationsWorkTask.


        :param craft: The craft of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: Assetic3IntegrationRepresentationsWorkOrderLabour
        """

        self._craft = craft

    @property
    def resource(self):
        """Gets the resource of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The resource of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: Assetic3IntegrationRepresentationsRsResourceRepresentation
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Assetic3IntegrationRepresentationsWorkTask.


        :param resource: The resource of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: Assetic3IntegrationRepresentationsRsResourceRepresentation
        """

        self._resource = resource

    @property
    def labour_costs(self):
        """Gets the labour_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The labour_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: float
        """
        return self._labour_costs

    @labour_costs.setter
    def labour_costs(self, labour_costs):
        """Sets the labour_costs of this Assetic3IntegrationRepresentationsWorkTask.


        :param labour_costs: The labour_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: float
        """
        if labour_costs is not None and labour_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `labour_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._labour_costs = labour_costs

    @property
    def material_costs(self):
        """Gets the material_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The material_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: float
        """
        return self._material_costs

    @material_costs.setter
    def material_costs(self, material_costs):
        """Sets the material_costs of this Assetic3IntegrationRepresentationsWorkTask.


        :param material_costs: The material_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: float
        """
        if material_costs is not None and material_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `material_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._material_costs = material_costs

    @property
    def external_costs(self):
        """Gets the external_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The external_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: float
        """
        return self._external_costs

    @external_costs.setter
    def external_costs(self, external_costs):
        """Sets the external_costs of this Assetic3IntegrationRepresentationsWorkTask.


        :param external_costs: The external_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: float
        """
        if external_costs is not None and external_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `external_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._external_costs = external_costs

    @property
    def other_costs(self):
        """Gets the other_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The other_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: float
        """
        return self._other_costs

    @other_costs.setter
    def other_costs(self, other_costs):
        """Sets the other_costs of this Assetic3IntegrationRepresentationsWorkTask.


        :param other_costs: The other_costs of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: float
        """
        if other_costs is not None and other_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `other_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._other_costs = other_costs

    @property
    def tool_and_material_available(self):
        """Gets the tool_and_material_available of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The tool_and_material_available of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: bool
        """
        return self._tool_and_material_available

    @tool_and_material_available.setter
    def tool_and_material_available(self, tool_and_material_available):
        """Sets the tool_and_material_available of this Assetic3IntegrationRepresentationsWorkTask.


        :param tool_and_material_available: The tool_and_material_available of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: bool
        """

        self._tool_and_material_available = tool_and_material_available

    @property
    def loss_of_service(self):
        """Gets the loss_of_service of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The loss_of_service of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: bool
        """
        return self._loss_of_service

    @loss_of_service.setter
    def loss_of_service(self, loss_of_service):
        """Sets the loss_of_service of this Assetic3IntegrationRepresentationsWorkTask.


        :param loss_of_service: The loss_of_service of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: bool
        """

        self._loss_of_service = loss_of_service

    @property
    def network_entity_id(self):
        """Gets the network_entity_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The network_entity_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._network_entity_id

    @network_entity_id.setter
    def network_entity_id(self, network_entity_id):
        """Sets the network_entity_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param network_entity_id: The network_entity_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._network_entity_id = network_entity_id

    @property
    def network_entity_name(self):
        """Gets the network_entity_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The network_entity_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._network_entity_name

    @network_entity_name.setter
    def network_entity_name(self, network_entity_name):
        """Sets the network_entity_name of this Assetic3IntegrationRepresentationsWorkTask.


        :param network_entity_name: The network_entity_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._network_entity_name = network_entity_name

    @property
    def work_task_material_status_id(self):
        """Gets the work_task_material_status_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The work_task_material_status_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: int
        """
        return self._work_task_material_status_id

    @work_task_material_status_id.setter
    def work_task_material_status_id(self, work_task_material_status_id):
        """Sets the work_task_material_status_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param work_task_material_status_id: The work_task_material_status_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: int
        """

        self._work_task_material_status_id = work_task_material_status_id

    @property
    def work_task_material_status(self):
        """Gets the work_task_material_status of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The work_task_material_status of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._work_task_material_status

    @work_task_material_status.setter
    def work_task_material_status(self, work_task_material_status):
        """Sets the work_task_material_status of this Assetic3IntegrationRepresentationsWorkTask.


        :param work_task_material_status: The work_task_material_status of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._work_task_material_status = work_task_material_status

    @property
    def component_id(self):
        """Gets the component_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The component_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param component_id: The component_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def component_name(self):
        """Gets the component_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The component_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this Assetic3IntegrationRepresentationsWorkTask.


        :param component_name: The component_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def component_type_id(self):
        """Gets the component_type_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The component_type_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._component_type_id

    @component_type_id.setter
    def component_type_id(self, component_type_id):
        """Sets the component_type_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param component_type_id: The component_type_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._component_type_id = component_type_id

    @property
    def component_type_name(self):
        """Gets the component_type_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The component_type_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._component_type_name

    @component_type_name.setter
    def component_type_name(self, component_type_name):
        """Sets the component_type_name of this Assetic3IntegrationRepresentationsWorkTask.


        :param component_type_name: The component_type_name of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._component_type_name = component_type_name

    @property
    def work_order_id(self):
        """Gets the work_order_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The work_order_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._work_order_id

    @work_order_id.setter
    def work_order_id(self, work_order_id):
        """Sets the work_order_id of this Assetic3IntegrationRepresentationsWorkTask.


        :param work_order_id: The work_order_id of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._work_order_id = work_order_id

    @property
    def can_edit(self):
        """Gets the can_edit of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The can_edit of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this Assetic3IntegrationRepresentationsWorkTask.


        :param can_edit: The can_edit of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The actual_start_date of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this Assetic3IntegrationRepresentationsWorkTask.


        :param actual_start_date: The actual_start_date of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._actual_start_date = actual_start_date

    @property
    def actual_finish_date(self):
        """Gets the actual_finish_date of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The actual_finish_date of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._actual_finish_date

    @actual_finish_date.setter
    def actual_finish_date(self, actual_finish_date):
        """Sets the actual_finish_date of this Assetic3IntegrationRepresentationsWorkTask.


        :param actual_finish_date: The actual_finish_date of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._actual_finish_date = actual_finish_date

    @property
    def last_modified(self):
        """Gets the last_modified of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The last_modified of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Assetic3IntegrationRepresentationsWorkTask.


        :param last_modified: The last_modified of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsWorkTask.


        :param links: The links of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsWorkTask.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsWorkTask.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsWorkTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
