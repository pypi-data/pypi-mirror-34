# coding: utf-8

"""
    Aspose.PDF Cloud API Reference


   Copyright (c) 2018 Aspose.PDF Cloud
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.



    OpenAPI spec version: 1.1
    
"""


from pprint import pformat
from six import iteritems
import re


class TiffExportOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brightness': 'float',
        'compression': 'CompressionType',
        'color_depth': 'ColorDepth',
        'left_margin': 'int',
        'right_margin': 'int',
        'top_margin': 'int',
        'bottom_margin': 'int',
        'orientation': 'ShapeType',
        'skip_blank_pages': 'bool',
        'width': 'int',
        'height': 'int',
        'x_resolution': 'int',
        'y_resolution': 'int',
        'page_index': 'int',
        'page_count': 'int',
        'result_file': 'str'
    }

    attribute_map = {
        'brightness': 'Brightness',
        'compression': 'Compression',
        'color_depth': 'ColorDepth',
        'left_margin': 'LeftMargin',
        'right_margin': 'RightMargin',
        'top_margin': 'TopMargin',
        'bottom_margin': 'BottomMargin',
        'orientation': 'Orientation',
        'skip_blank_pages': 'SkipBlankPages',
        'width': 'Width',
        'height': 'Height',
        'x_resolution': 'XResolution',
        'y_resolution': 'YResolution',
        'page_index': 'PageIndex',
        'page_count': 'PageCount',
        'result_file': 'ResultFile'
    }

    def __init__(self, brightness=None, compression=None, color_depth=None, left_margin=None, right_margin=None, top_margin=None, bottom_margin=None, orientation=None, skip_blank_pages=None, width=None, height=None, x_resolution=None, y_resolution=None, page_index=None, page_count=None, result_file=None):
        """
        TiffExportOptions - a model defined in Swagger
        """

        self._brightness = None
        self._compression = None
        self._color_depth = None
        self._left_margin = None
        self._right_margin = None
        self._top_margin = None
        self._bottom_margin = None
        self._orientation = None
        self._skip_blank_pages = None
        self._width = None
        self._height = None
        self._x_resolution = None
        self._y_resolution = None
        self._page_index = None
        self._page_count = None
        self._result_file = None

        if brightness is not None:
          self.brightness = brightness
        if compression is not None:
          self.compression = compression
        if color_depth is not None:
          self.color_depth = color_depth
        if left_margin is not None:
          self.left_margin = left_margin
        if right_margin is not None:
          self.right_margin = right_margin
        if top_margin is not None:
          self.top_margin = top_margin
        if bottom_margin is not None:
          self.bottom_margin = bottom_margin
        if orientation is not None:
          self.orientation = orientation
        if skip_blank_pages is not None:
          self.skip_blank_pages = skip_blank_pages
        if width is not None:
          self.width = width
        if height is not None:
          self.height = height
        if x_resolution is not None:
          self.x_resolution = x_resolution
        if y_resolution is not None:
          self.y_resolution = y_resolution
        if page_index is not None:
          self.page_index = page_index
        if page_count is not None:
          self.page_count = page_count
        if result_file is not None:
          self.result_file = result_file

    @property
    def brightness(self):
        """
        Gets the brightness of this TiffExportOptions.
        Image brightness.

        :return: The brightness of this TiffExportOptions.
        :rtype: float
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """
        Sets the brightness of this TiffExportOptions.
        Image brightness.

        :param brightness: The brightness of this TiffExportOptions.
        :type: float
        """

        self._brightness = brightness

    @property
    def compression(self):
        """
        Gets the compression of this TiffExportOptions.
        Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None.

        :return: The compression of this TiffExportOptions.
        :rtype: CompressionType
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """
        Sets the compression of this TiffExportOptions.
        Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None.

        :param compression: The compression of this TiffExportOptions.
        :type: CompressionType
        """

        self._compression = compression

    @property
    def color_depth(self):
        """
        Gets the color_depth of this TiffExportOptions.
        Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp.

        :return: The color_depth of this TiffExportOptions.
        :rtype: ColorDepth
        """
        return self._color_depth

    @color_depth.setter
    def color_depth(self, color_depth):
        """
        Sets the color_depth of this TiffExportOptions.
        Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp.

        :param color_depth: The color_depth of this TiffExportOptions.
        :type: ColorDepth
        """

        self._color_depth = color_depth

    @property
    def left_margin(self):
        """
        Gets the left_margin of this TiffExportOptions.
        Left image margin.

        :return: The left_margin of this TiffExportOptions.
        :rtype: int
        """
        return self._left_margin

    @left_margin.setter
    def left_margin(self, left_margin):
        """
        Sets the left_margin of this TiffExportOptions.
        Left image margin.

        :param left_margin: The left_margin of this TiffExportOptions.
        :type: int
        """

        self._left_margin = left_margin

    @property
    def right_margin(self):
        """
        Gets the right_margin of this TiffExportOptions.
        Right image margin.

        :return: The right_margin of this TiffExportOptions.
        :rtype: int
        """
        return self._right_margin

    @right_margin.setter
    def right_margin(self, right_margin):
        """
        Sets the right_margin of this TiffExportOptions.
        Right image margin.

        :param right_margin: The right_margin of this TiffExportOptions.
        :type: int
        """

        self._right_margin = right_margin

    @property
    def top_margin(self):
        """
        Gets the top_margin of this TiffExportOptions.
        Top image margin.

        :return: The top_margin of this TiffExportOptions.
        :rtype: int
        """
        return self._top_margin

    @top_margin.setter
    def top_margin(self, top_margin):
        """
        Sets the top_margin of this TiffExportOptions.
        Top image margin.

        :param top_margin: The top_margin of this TiffExportOptions.
        :type: int
        """

        self._top_margin = top_margin

    @property
    def bottom_margin(self):
        """
        Gets the bottom_margin of this TiffExportOptions.
        Bottom image margin.

        :return: The bottom_margin of this TiffExportOptions.
        :rtype: int
        """
        return self._bottom_margin

    @bottom_margin.setter
    def bottom_margin(self, bottom_margin):
        """
        Sets the bottom_margin of this TiffExportOptions.
        Bottom image margin.

        :param bottom_margin: The bottom_margin of this TiffExportOptions.
        :type: int
        """

        self._bottom_margin = bottom_margin

    @property
    def orientation(self):
        """
        Gets the orientation of this TiffExportOptions.
        Image orientation. Possible values are: None, Landscape, Portait.

        :return: The orientation of this TiffExportOptions.
        :rtype: ShapeType
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """
        Sets the orientation of this TiffExportOptions.
        Image orientation. Possible values are: None, Landscape, Portait.

        :param orientation: The orientation of this TiffExportOptions.
        :type: ShapeType
        """

        self._orientation = orientation

    @property
    def skip_blank_pages(self):
        """
        Gets the skip_blank_pages of this TiffExportOptions.
        Skip blank pages flag.

        :return: The skip_blank_pages of this TiffExportOptions.
        :rtype: bool
        """
        return self._skip_blank_pages

    @skip_blank_pages.setter
    def skip_blank_pages(self, skip_blank_pages):
        """
        Sets the skip_blank_pages of this TiffExportOptions.
        Skip blank pages flag.

        :param skip_blank_pages: The skip_blank_pages of this TiffExportOptions.
        :type: bool
        """

        self._skip_blank_pages = skip_blank_pages

    @property
    def width(self):
        """
        Gets the width of this TiffExportOptions.
        Image width.

        :return: The width of this TiffExportOptions.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this TiffExportOptions.
        Image width.

        :param width: The width of this TiffExportOptions.
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this TiffExportOptions.
        Image height.

        :return: The height of this TiffExportOptions.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this TiffExportOptions.
        Image height.

        :param height: The height of this TiffExportOptions.
        :type: int
        """

        self._height = height

    @property
    def x_resolution(self):
        """
        Gets the x_resolution of this TiffExportOptions.
        Horizontal resolution.

        :return: The x_resolution of this TiffExportOptions.
        :rtype: int
        """
        return self._x_resolution

    @x_resolution.setter
    def x_resolution(self, x_resolution):
        """
        Sets the x_resolution of this TiffExportOptions.
        Horizontal resolution.

        :param x_resolution: The x_resolution of this TiffExportOptions.
        :type: int
        """

        self._x_resolution = x_resolution

    @property
    def y_resolution(self):
        """
        Gets the y_resolution of this TiffExportOptions.
        Vertical resolution.

        :return: The y_resolution of this TiffExportOptions.
        :rtype: int
        """
        return self._y_resolution

    @y_resolution.setter
    def y_resolution(self, y_resolution):
        """
        Sets the y_resolution of this TiffExportOptions.
        Vertical resolution.

        :param y_resolution: The y_resolution of this TiffExportOptions.
        :type: int
        """

        self._y_resolution = y_resolution

    @property
    def page_index(self):
        """
        Gets the page_index of this TiffExportOptions.
        Start page to export.

        :return: The page_index of this TiffExportOptions.
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """
        Sets the page_index of this TiffExportOptions.
        Start page to export.

        :param page_index: The page_index of this TiffExportOptions.
        :type: int
        """

        self._page_index = page_index

    @property
    def page_count(self):
        """
        Gets the page_count of this TiffExportOptions.
        Number of pages to export.

        :return: The page_count of this TiffExportOptions.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """
        Sets the page_count of this TiffExportOptions.
        Number of pages to export.

        :param page_count: The page_count of this TiffExportOptions.
        :type: int
        """

        self._page_count = page_count

    @property
    def result_file(self):
        """
        Gets the result_file of this TiffExportOptions.
        Resulting image file.

        :return: The result_file of this TiffExportOptions.
        :rtype: str
        """
        return self._result_file

    @result_file.setter
    def result_file(self, result_file):
        """
        Sets the result_file of this TiffExportOptions.
        Resulting image file.

        :param result_file: The result_file of this TiffExportOptions.
        :type: str
        """

        self._result_file = result_file

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TiffExportOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
