#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class CLDataTypeBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(CLDataTypeBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class CLDataTypeParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=CLDataTypeBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(CLDataTypeParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _result_(self):  # noqa
        self._expr_()

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._optional():
            self._address_space_qualifier_()

        def block0():
            self._pre_asterisk_qualifiers_()
        self._closure(block0)
        self._data_type_()
        with self._optional():
            self._is_pointer_()

            def block1():
                self._post_asterisk_qualifiers_()
            self._closure(block1)

    @tatsumasu()
    def _data_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._vector_data_type_()
            with self._option():
                self._user_data_type_()
            with self._option():
                self._scalar_data_type_()
            self._error('no available options')

    @tatsumasu()
    def _is_pointer_(self):  # noqa
        self._token('*')

    @tatsumasu()
    def _scalar_data_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('mot_float_type')
            with self._option():
                self._token('bool')
            with self._option():
                self._token('char')
            with self._option():
                self._token('cl_char')
            with self._option():
                self._token('unsigned char')
            with self._option():
                self._token('uchar')
            with self._option():
                self._token('cl_uchar')
            with self._option():
                self._token('short')
            with self._option():
                self._token('cl_short')
            with self._option():
                self._token('unsigned short')
            with self._option():
                self._token('ushort')
            with self._option():
                self._token('int')
            with self._option():
                self._token('unsigned int')
            with self._option():
                self._token('uint')
            with self._option():
                self._token('long')
            with self._option():
                self._token('unsigned long')
            with self._option():
                self._token('ulong')
            with self._option():
                self._token('float')
            with self._option():
                self._token('half')
            with self._option():
                self._token('size_t')
            with self._option():
                self._token('ptrdiff_t')
            with self._option():
                self._token('intptr_t')
            with self._option():
                self._token('uintptr_t')
            with self._option():
                self._token('void')
            with self._option():
                self._token('double')
            with self._option():
                self._token('half')
            self._error('no available options')

    @tatsumasu()
    def _vector_data_type_(self):  # noqa
        self._pattern(r'(char|uchar|short|ushort|int|uint|long|ulong|float|double|half|mot_float_type)\d+')

    @tatsumasu()
    def _user_data_type_(self):  # noqa
        self._pattern(r'\w+')

    @tatsumasu()
    def _address_space_qualifier_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('__local')
            with self._option():
                self._token('local')
            with self._option():
                self._token('__global')
            with self._option():
                self._token('global')
            with self._option():
                self._token('__constant')
            with self._option():
                self._token('constant')
            with self._option():
                self._token('__private')
            with self._option():
                self._token('private')
            self._error('no available options')

    @tatsumasu()
    def _pre_asterisk_qualifiers_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('const')
            with self._option():
                self._token('volatile')
            self._error('no available options')

    @tatsumasu()
    def _post_asterisk_qualifiers_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('const')
            with self._option():
                self._token('restrict')
            self._error('no available options')


class CLDataTypeSemantics(object):
    def result(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def data_type(self, ast):  # noqa
        return ast

    def is_pointer(self, ast):  # noqa
        return ast

    def scalar_data_type(self, ast):  # noqa
        return ast

    def vector_data_type(self, ast):  # noqa
        return ast

    def user_data_type(self, ast):  # noqa
        return ast

    def address_space_qualifier(self, ast):  # noqa
        return ast

    def pre_asterisk_qualifiers(self, ast):  # noqa
        return ast

    def post_asterisk_qualifiers(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'result'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = CLDataTypeParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, CLDataTypeParser, name='CLDataType')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
