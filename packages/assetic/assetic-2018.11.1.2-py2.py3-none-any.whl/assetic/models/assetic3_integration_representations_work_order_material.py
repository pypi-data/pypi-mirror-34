# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.assetic3_integration_representations_work_task_bill_of_material import Assetic3IntegrationRepresentationsWorkTaskBillOfMaterial  # noqa: F401,E501
##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsWorkOrderMaterial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'material_label': 'str',
        'planned_quantity': 'float',
        'actual_quantity': 'float',
        'work_task_id': 'str',
        'bill_of_material_id': 'str',
        'planned_cost': 'float',
        'actual_cost': 'float',
        'work_task_bill_of_material': 'Assetic3IntegrationRepresentationsWorkTaskBillOfMaterial',
        'work_order_id': 'str',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'description': 'Description',
        'material_label': 'MaterialLabel',
        'planned_quantity': 'PlannedQuantity',
        'actual_quantity': 'ActualQuantity',
        'work_task_id': 'WorkTaskId',
        'bill_of_material_id': 'BillOfMaterialId',
        'planned_cost': 'PlannedCost',
        'actual_cost': 'ActualCost',
        'work_task_bill_of_material': 'WorkTaskBillOfMaterial',
        'work_order_id': 'WorkOrderId',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, description=None, material_label=None, planned_quantity=None, actual_quantity=None, work_task_id=None, bill_of_material_id=None, planned_cost=None, actual_cost=None, work_task_bill_of_material=None, work_order_id=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsWorkOrderMaterial - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._description = None
        self._material_label = None
        self._planned_quantity = None
        self._actual_quantity = None
        self._work_task_id = None
        self._bill_of_material_id = None
        self._planned_cost = None
        self._actual_cost = None
        self._work_task_bill_of_material = None
        self._work_order_id = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if material_label is not None:
            self.material_label = material_label
        if planned_quantity is not None:
            self.planned_quantity = planned_quantity
        if actual_quantity is not None:
            self.actual_quantity = actual_quantity
        if work_task_id is not None:
            self.work_task_id = work_task_id
        if bill_of_material_id is not None:
            self.bill_of_material_id = bill_of_material_id
        if planned_cost is not None:
            self.planned_cost = planned_cost
        if actual_cost is not None:
            self.actual_cost = actual_cost
        if work_task_bill_of_material is not None:
            self.work_task_bill_of_material = work_task_bill_of_material
        if work_order_id is not None:
            self.work_order_id = work_order_id
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param id: The id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The description of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param description: The description of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def material_label(self):
        """Gets the material_label of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The material_label of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: str
        """
        return self._material_label

    @material_label.setter
    def material_label(self, material_label):
        """Sets the material_label of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param material_label: The material_label of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: str
        """

        self._material_label = material_label

    @property
    def planned_quantity(self):
        """Gets the planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: float
        """
        return self._planned_quantity

    @planned_quantity.setter
    def planned_quantity(self, planned_quantity):
        """Sets the planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param planned_quantity: The planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: float
        """
        if planned_quantity is not None and planned_quantity < 0:  # noqa: E501
            raise ValueError("Invalid value for `planned_quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planned_quantity = planned_quantity

    @property
    def actual_quantity(self):
        """Gets the actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: float
        """
        return self._actual_quantity

    @actual_quantity.setter
    def actual_quantity(self, actual_quantity):
        """Sets the actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param actual_quantity: The actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: float
        """
        if actual_quantity is not None and actual_quantity < 0:  # noqa: E501
            raise ValueError("Invalid value for `actual_quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._actual_quantity = actual_quantity

    @property
    def work_task_id(self):
        """Gets the work_task_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The work_task_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: str
        """
        return self._work_task_id

    @work_task_id.setter
    def work_task_id(self, work_task_id):
        """Sets the work_task_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param work_task_id: The work_task_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: str
        """

        self._work_task_id = work_task_id

    @property
    def bill_of_material_id(self):
        """Gets the bill_of_material_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The bill_of_material_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: str
        """
        return self._bill_of_material_id

    @bill_of_material_id.setter
    def bill_of_material_id(self, bill_of_material_id):
        """Sets the bill_of_material_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param bill_of_material_id: The bill_of_material_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: str
        """

        self._bill_of_material_id = bill_of_material_id

    @property
    def planned_cost(self):
        """Gets the planned_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The planned_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: float
        """
        return self._planned_cost

    @planned_cost.setter
    def planned_cost(self, planned_cost):
        """Sets the planned_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param planned_cost: The planned_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: float
        """
        if planned_cost is not None and planned_cost < 0:  # noqa: E501
            raise ValueError("Invalid value for `planned_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planned_cost = planned_cost

    @property
    def actual_cost(self):
        """Gets the actual_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The actual_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: float
        """
        return self._actual_cost

    @actual_cost.setter
    def actual_cost(self, actual_cost):
        """Sets the actual_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param actual_cost: The actual_cost of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: float
        """
        if actual_cost is not None and actual_cost < 0:  # noqa: E501
            raise ValueError("Invalid value for `actual_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._actual_cost = actual_cost

    @property
    def work_task_bill_of_material(self):
        """Gets the work_task_bill_of_material of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The work_task_bill_of_material of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: Assetic3IntegrationRepresentationsWorkTaskBillOfMaterial
        """
        return self._work_task_bill_of_material

    @work_task_bill_of_material.setter
    def work_task_bill_of_material(self, work_task_bill_of_material):
        """Sets the work_task_bill_of_material of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param work_task_bill_of_material: The work_task_bill_of_material of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: Assetic3IntegrationRepresentationsWorkTaskBillOfMaterial
        """

        self._work_task_bill_of_material = work_task_bill_of_material

    @property
    def work_order_id(self):
        """Gets the work_order_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The work_order_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: str
        """
        return self._work_order_id

    @work_order_id.setter
    def work_order_id(self, work_order_id):
        """Sets the work_order_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param work_order_id: The work_order_id of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: str
        """

        self._work_order_id = work_order_id

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param links: The links of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsWorkOrderMaterial.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsWorkOrderMaterial.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsWorkOrderMaterial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
