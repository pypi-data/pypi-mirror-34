#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'str',
        'name': 'str',
        'description': 'str',
        'total_bytes': 'int',
        'url': 'str',
        'creation_date': 'datetime'
    }

    attribute_map = {
        'ref': 'ref',
        'name': 'name',
        'description': 'description',
        'total_bytes': 'totalBytes',
        'url': 'url',
        'creation_date': 'creationDate'
    }

    def __init__(self, ref=None, name=None, description=None, total_bytes=None, url=None, creation_date=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501

        self._ref = None
        self._name = None
        self._description = None
        self._total_bytes = None
        self._url = None
        self._creation_date = None
        self.discriminator = None

        self.ref = ref
        self.name = name
        if description is not None:
            self.description = description
        self.total_bytes = total_bytes
        if url is not None:
            self.url = url
        if creation_date is not None:
            self.creation_date = creation_date

    @property
    def ref(self):
        """Gets the ref of this File.  # noqa: E501

        The reference name of the file.  # noqa: E501

        :return: The ref of this File.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this File.

        The reference name of the file.  # noqa: E501

        :param ref: The ref of this File.  # noqa: E501
        :type: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501

        self._ref = ref

    @property
    def name(self):
        """Gets the name of this File.  # noqa: E501

        The name of the file. May be the same as `ref`.  # noqa: E501

        :return: The name of this File.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        The name of the file. May be the same as `ref`.  # noqa: E501

        :param name: The name of this File.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this File.  # noqa: E501

        The file's description.  # noqa: E501

        :return: The description of this File.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this File.

        The file's description.  # noqa: E501

        :param description: The description of this File.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def total_bytes(self):
        """Gets the total_bytes of this File.  # noqa: E501

        The size of the file in bytes.  # noqa: E501

        :return: The total_bytes of this File.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this File.

        The size of the file in bytes.  # noqa: E501

        :param total_bytes: The total_bytes of this File.  # noqa: E501
        :type: int
        """
        if total_bytes is None:
            raise ValueError("Invalid value for `total_bytes`, must not be `None`")  # noqa: E501

        self._total_bytes = total_bytes

    @property
    def url(self):
        """Gets the url of this File.  # noqa: E501

        The URL location of the file.  # noqa: E501

        :return: The url of this File.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this File.

        The URL location of the file.  # noqa: E501

        :param url: The url of this File.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def creation_date(self):
        """Gets the creation_date of this File.  # noqa: E501

        The date that the file was created. For files downloaded from the Kaggle website, this will be when they were created on the server.  # noqa: E501

        :return: The creation_date of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this File.

        The date that the file was created. For files downloaded from the Kaggle website, this will be when they were created on the server.  # noqa: E501

        :param creation_date: The creation_date of this File.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
