# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductVariant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_id': 'int',
        'account_id': 'str',
        'option1_value': 'str',
        'option2_value': 'str',
        'title': 'str',
        'stocks': 'int',
        'few_num': 'int',
        'model_number': 'str',
        'option_price': 'int',
        'option_members_price': 'int',
        'make_date': 'int',
        'update_date': 'int'
    }

    attribute_map = {
        'product_id': 'product_id',
        'account_id': 'account_id',
        'option1_value': 'option1_value',
        'option2_value': 'option2_value',
        'title': 'title',
        'stocks': 'stocks',
        'few_num': 'few_num',
        'model_number': 'model_number',
        'option_price': 'option_price',
        'option_members_price': 'option_members_price',
        'make_date': 'make_date',
        'update_date': 'update_date'
    }

    def __init__(self, product_id=None, account_id=None, option1_value=None, option2_value=None, title=None, stocks=None, few_num=None, model_number=None, option_price=None, option_members_price=None, make_date=None, update_date=None):  # noqa: E501
        """ProductVariant - a model defined in OpenAPI"""  # noqa: E501

        self._product_id = None
        self._account_id = None
        self._option1_value = None
        self._option2_value = None
        self._title = None
        self._stocks = None
        self._few_num = None
        self._model_number = None
        self._option_price = None
        self._option_members_price = None
        self._make_date = None
        self._update_date = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if account_id is not None:
            self.account_id = account_id
        if option1_value is not None:
            self.option1_value = option1_value
        if option2_value is not None:
            self.option2_value = option2_value
        if title is not None:
            self.title = title
        if stocks is not None:
            self.stocks = stocks
        if few_num is not None:
            self.few_num = few_num
        if model_number is not None:
            self.model_number = model_number
        if option_price is not None:
            self.option_price = option_price
        if option_members_price is not None:
            self.option_members_price = option_members_price
        if make_date is not None:
            self.make_date = make_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def product_id(self):
        """Gets the product_id of this ProductVariant.  # noqa: E501

        商品ID  # noqa: E501

        :return: The product_id of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVariant.

        商品ID  # noqa: E501

        :param product_id: The product_id of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def account_id(self):
        """Gets the account_id of this ProductVariant.  # noqa: E501

        ショップアカウントID  # noqa: E501

        :return: The account_id of this ProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProductVariant.

        ショップアカウントID  # noqa: E501

        :param account_id: The account_id of this ProductVariant.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def option1_value(self):
        """Gets the option1_value of this ProductVariant.  # noqa: E501

        オプション1の値  # noqa: E501

        :return: The option1_value of this ProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._option1_value

    @option1_value.setter
    def option1_value(self, option1_value):
        """Sets the option1_value of this ProductVariant.

        オプション1の値  # noqa: E501

        :param option1_value: The option1_value of this ProductVariant.  # noqa: E501
        :type: str
        """

        self._option1_value = option1_value

    @property
    def option2_value(self):
        """Gets the option2_value of this ProductVariant.  # noqa: E501

        オプション2の値  # noqa: E501

        :return: The option2_value of this ProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._option2_value

    @option2_value.setter
    def option2_value(self, option2_value):
        """Sets the option2_value of this ProductVariant.

        オプション2の値  # noqa: E501

        :param option2_value: The option2_value of this ProductVariant.  # noqa: E501
        :type: str
        """

        self._option2_value = option2_value

    @property
    def title(self):
        """Gets the title of this ProductVariant.  # noqa: E501

        オプション1とオプション2の名前を\"　x　\"で結合した表示名。オプションが1つしか設定されていない場合はそのオプションの名前に等しい  # noqa: E501

        :return: The title of this ProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductVariant.

        オプション1とオプション2の名前を\"　x　\"で結合した表示名。オプションが1つしか設定されていない場合はそのオプションの名前に等しい  # noqa: E501

        :param title: The title of this ProductVariant.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def stocks(self):
        """Gets the stocks of this ProductVariant.  # noqa: E501

        在庫数  # noqa: E501

        :return: The stocks of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this ProductVariant.

        在庫数  # noqa: E501

        :param stocks: The stocks of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._stocks = stocks

    @property
    def few_num(self):
        """Gets the few_num of this ProductVariant.  # noqa: E501

        残りわずかとなる在庫数  # noqa: E501

        :return: The few_num of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._few_num

    @few_num.setter
    def few_num(self, few_num):
        """Sets the few_num of this ProductVariant.

        残りわずかとなる在庫数  # noqa: E501

        :param few_num: The few_num of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._few_num = few_num

    @property
    def model_number(self):
        """Gets the model_number of this ProductVariant.  # noqa: E501

        型番  # noqa: E501

        :return: The model_number of this ProductVariant.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this ProductVariant.

        型番  # noqa: E501

        :param model_number: The model_number of this ProductVariant.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def option_price(self):
        """Gets the option_price of this ProductVariant.  # noqa: E501

        販売価格  # noqa: E501

        :return: The option_price of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._option_price

    @option_price.setter
    def option_price(self, option_price):
        """Sets the option_price of this ProductVariant.

        販売価格  # noqa: E501

        :param option_price: The option_price of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._option_price = option_price

    @property
    def option_members_price(self):
        """Gets the option_members_price of this ProductVariant.  # noqa: E501

        会員価格  # noqa: E501

        :return: The option_members_price of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._option_members_price

    @option_members_price.setter
    def option_members_price(self, option_members_price):
        """Sets the option_members_price of this ProductVariant.

        会員価格  # noqa: E501

        :param option_members_price: The option_members_price of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._option_members_price = option_members_price

    @property
    def make_date(self):
        """Gets the make_date of this ProductVariant.  # noqa: E501

        オプション作成日時  # noqa: E501

        :return: The make_date of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._make_date

    @make_date.setter
    def make_date(self, make_date):
        """Sets the make_date of this ProductVariant.

        オプション作成日時  # noqa: E501

        :param make_date: The make_date of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._make_date = make_date

    @property
    def update_date(self):
        """Gets the update_date of this ProductVariant.  # noqa: E501

        オプション更新日時  # noqa: E501

        :return: The update_date of this ProductVariant.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ProductVariant.

        オプション更新日時  # noqa: E501

        :param update_date: The update_date of this ProductVariant.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductVariant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
