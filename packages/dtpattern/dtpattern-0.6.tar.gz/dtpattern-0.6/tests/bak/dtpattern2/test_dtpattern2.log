[2018-04-19 12:52:58,960]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
groups:2 Sample ['Massachusetts', 'Florida', 'Delaware', 'New Hampshire', 'North Carolina', 'Arkansas', 'West Virginia', 'Ohio', 'Florida', 'Vermont']
[2018-04-19 12:52:58,961]    DEBUG  [add] Adding value: Massachusetts (dtpattern2.py:502)
[2018-04-19 12:52:58,961]    DEBUG  We have free slots: adding empty pattern PAT(#1): 'Massachusetts' ( 'Massachusetts' ) (dtpattern2.py:506)
[2018-04-19 12:52:58,962]    DEBUG --> #PatternFinder[#1, 1/2] $0-PAT(#1): 'Massachusetts' ( 'Massachusetts' )  (dtpattern2.py:545)
[2018-04-19 12:52:58,962]    DEBUG #PatternFinder[#1, 1/2] $0-PAT(#1): 'Massachusetts' ( 'Massachusetts' )  (test_dtpattern2.py:61)
[2018-04-19 12:52:58,962]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:58,962]    DEBUG  [add] Adding value: Florida (dtpattern2.py:502)
[2018-04-19 12:52:58,962]    DEBUG  We have free slots: adding empty pattern PAT(#1): 'Florida' ( 'Florida' ) (dtpattern2.py:506)
[2018-04-19 12:52:58,963]    DEBUG --> #PatternFinder[#2, 2/2] $0-PAT(#1): 'Massachusetts' ( 'Massachusetts' )  $1-PAT(#1): 'Florida' ( 'Florida' )  (dtpattern2.py:545)
[2018-04-19 12:52:58,963]    DEBUG #PatternFinder[#2, 2/2] $0-PAT(#1): 'Massachusetts' ( 'Massachusetts' )  $1-PAT(#1): 'Florida' ( 'Florida' )  (test_dtpattern2.py:61)
[2018-04-19 12:52:58,963]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:58,963]    DEBUG  [add] Adding value: Delaware (dtpattern2.py:502)
[2018-04-19 12:52:58,963]    DEBUG  No free slots for PAT(#1): 'Delaware' ( 'Delaware' ) (dtpattern2.py:509)
[2018-04-19 12:52:58,963]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:58,963]    DEBUG   Find closest pattern to PAT(#1): 'Delaware' ( 'Delaware' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:58,967]    DEBUG   Compared PAT(#1): 'Delaware' ( 'Delaware' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Florida' ( 'Florida' ) - PAT(#1): 'Delaware' ( 'Delaware' ) -- 
    [  raw   ] ident:  12.50 score: -34.0 SYM: [['F', 'D'], ['', 'e'], 'l', ['o', 'a'], ['r', 'w'], ['i', 'a'], ['d', 'r'], ['a', 'e']] 
    [ partl1 ] ident:  87.50 score: 20.0 SYM: [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  87.50 score: 20.0 SYM: [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Massachusetts' ( 'Massachusetts' ) - PAT(#1): 'Delaware' ( 'Delaware' ) -- 
    [  raw   ] ident:   5.88 score: -48.0 SYM: [['', 'D'], ['', 'e'], ['', 'l'], ['', 'a'], ['M', 'w'], 'a', ['s', ''], ['s', ''], ['a', ''], ['c', ''], ['h', ''], ['u', ''], ['s', ''], ['e', ''], ['t', ''], ['t', 'r'], ['s', 'e']] 
    [ partl1 ] ident:  61.54 score: 21.0 SYM: [[['C'], 'D'], ['a', ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'e'], [['c'], 'l'], [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  61.54 score: 21.0 SYM: [[['C'], 'D'], ['a', ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'e'], [['c'], 'l'], [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] (dtpattern2.py:677)
[2018-04-19 12:52:58,967]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'Delaware' ( 'Delaware' ) is PAT(#1): 'Florida' ( 'Florida' ) with ALIGN:{'score': 20.0, 'identity': 87.5, 'align1': [['C'], '', 'l', ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['D', 'e', 'l', 'a', 'w', 'a', 'r', 'e'], 'symbol': [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']]} (dtpattern2.py:513)
[2018-04-19 12:52:58,968]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >87.5 (dtpattern2.py:562)
[2018-04-19 12:52:58,970]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Massachusetts' ( 'Massachusetts' ) - PAT(#1): 'Florida' ( 'Florida' ) -- 
     [  raw   ] ident:   5.56 score: -43.0 SYM: [['', 'F'], ['', 'l'], ['', 'o'], ['', 'r'], ['', 'i'], ['M', 'd'], 'a', ['s', ''], ['s', ''], ['a', ''], ['c', ''], ['h', ''], ['u', ''], ['s', ''], ['e', ''], ['t', ''], ['t', ''], ['s', '']] 
     [ partl1 ] ident:  53.85 score: 15.0 SYM: [[['C'], 'F'], ['a', ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'l'], [['c'], 'o'], [['c'], 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] 
     [  best  ] ident:  53.85 score: 15.0 SYM: [[['C'], 'F'], ['a', ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'l'], [['c'], 'o'], [['c'], 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] (dtpattern2.py:582)
[2018-04-19 12:52:58,970]    DEBUG  No free slots for PAT(#1): 'Delaware' ( 'Delaware' ) (dtpattern2.py:524)
[2018-04-19 12:52:58,970]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:58,970]    DEBUG   Find closest pattern to PAT(#1): 'Delaware' ( 'Delaware' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:58,974]    DEBUG   Compared PAT(#1): 'Delaware' ( 'Delaware' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Florida' ( 'Florida' ) - PAT(#1): 'Delaware' ( 'Delaware' ) -- 
    [  raw   ] ident:  12.50 score: -34.0 SYM: [['F', 'D'], ['', 'e'], 'l', ['o', 'a'], ['r', 'w'], ['i', 'a'], ['d', 'r'], ['a', 'e']] 
    [ partl1 ] ident:  87.50 score: 20.0 SYM: [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  87.50 score: 20.0 SYM: [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Massachusetts' ( 'Massachusetts' ) - PAT(#1): 'Delaware' ( 'Delaware' ) -- 
    [  raw   ] ident:   5.88 score: -48.0 SYM: [['', 'D'], ['', 'e'], ['', 'l'], ['', 'a'], ['M', 'w'], 'a', ['s', ''], ['s', ''], ['a', ''], ['c', ''], ['h', ''], ['u', ''], ['s', ''], ['e', ''], ['t', ''], ['t', 'r'], ['s', 'e']] 
    [ partl1 ] ident:  61.54 score: 21.0 SYM: [[['C'], 'D'], ['a', ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'e'], [['c'], 'l'], [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  61.54 score: 21.0 SYM: [[['C'], 'D'], ['a', ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'e'], [['c'], 'l'], [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] (dtpattern2.py:677)
[2018-04-19 12:52:58,974]    DEBUG  Best alignment after compressing for input PAT(#1): 'Delaware' ( 'Delaware' ) is for PAT(#1): 'Florida' ( 'Florida' ) with ALIGN:{'score': 20.0, 'identity': 87.5, 'align1': [['C'], '', 'l', ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['D', 'e', 'l', 'a', 'w', 'a', 'r', 'e'], 'symbol': [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']]} (dtpattern2.py:529)
[2018-04-19 12:52:58,974]    DEBUG [MERGE] Merging alignment [[['C'], 'D'], ['', 'e'], 'l', [['c'], 'a'], [['c'], 'w'], [['c'], 'a'], [['c'], 'r'], [['c'], 'e']] into PAT(#1): 'Florida' ( 'Florida' ) (dtpattern2.py:76)
[2018-04-19 12:52:58,974]    DEBUG [MERGED] Result of Merging alignment is: PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) (dtpattern2.py:168)
[2018-04-19 12:52:58,975]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:58,979]    DEBUG [COMP] Compared PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:58,979]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'Massachusetts' ( 'Massachusetts' ) -- 
[  raw   ] ident:  46.15 score: -3.0 SYM: [[['C'], 'M'], ['', 'a'], ['', 's'], ['', 's'], ['', 'a'], ['', 'c'], [('e', 0, 1), 'h'], ['l', 'u'], [['c'], 's'], [['c'], 'e'], [['c'], 't'], [['c'], 't'], [['c'], 's']] 
[ partl1 ] ident:  53.85 score: 12.0 SYM: [[['C'], 'M'], ['', 'a'], ['', 's'], ['', 's'], ['', 'a'], ['', 'c'], [('e', 0, 1), 'h'], [['c'], 'u'], [['c'], 's'], [['c'], 'e'], [['c'], 't'], [['c'], 't'], [['c'], 's']] 
[  best  ] ident:  53.85 score: 12.0 SYM: [[['C'], 'M'], ['', 'a'], ['', 's'], ['', 's'], ['', 'a'], ['', 'c'], [('e', 0, 1), 'h'], [['c'], 'u'], [['c'], 's'], [['c'], 'e'], [['c'], 't'], [['c'], 't'], [['c'], 's']] (dtpattern2.py:625)
[2018-04-19 12:52:58,979]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:58,979]    DEBUG [COMP] Best alignment for input PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) is for PAT(#1): 'Massachusetts' ( 'Massachusetts' ) with ALIGN:{'score': 12.0, 'identity': 53.84615384615385, 'align1': [['C'], '', '', '', '', '', ('e', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['M', 'a', 's', 's', 'a', 'c', 'h', 'u', 's', 'e', 't', 't', 's'], 'symbol': [[['C'], 'M'], ['', 'a'], ['', 's'], ['', 's'], ['', 'a'], ['', 'c'], [('e', 0, 1), 'h'], [['c'], 'u'], [['c'], 's'], [['c'], 'e'], [['c'], 't'], [['c'], 't'], [['c'], 's']]} (dtpattern2.py:630)
[2018-04-19 12:52:58,980]    DEBUG --> #PatternFinder[#3, 2/2] $0-PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 )  $1-PAT(#1): 'Massachusetts' ( 'Massachusetts' )  (dtpattern2.py:545)
[2018-04-19 12:52:58,980]    DEBUG #PatternFinder[#3, 2/2] $0-PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 )  $1-PAT(#1): 'Massachusetts' ( 'Massachusetts' )  (test_dtpattern2.py:61)
[2018-04-19 12:52:58,980]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:58,980]    DEBUG  [add] Adding value: New Hampshire (dtpattern2.py:502)
[2018-04-19 12:52:58,981]    DEBUG  No free slots for PAT(#1): 'New Hampshire' ( 'New Hampshire' ) (dtpattern2.py:509)
[2018-04-19 12:52:58,981]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:58,981]    DEBUG   Find closest pattern to PAT(#1): 'New Hampshire' ( 'New Hampshire' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:58,987]    DEBUG   Compared PAT(#1): 'New Hampshire' ( 'New Hampshire' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Massachusetts' ( 'Massachusetts' ) - PAT(#1): 'New Hampshire' ( 'New Hampshire' ) -- 
    [  raw   ] ident:   7.69 score: -43.0 SYM: [['M', 'N'], ['a', 'e'], ['s', 'w'], ['s', ' '], ['a', 'H'], ['c', 'a'], ['h', 'm'], ['u', 'p'], 's', ['e', 'h'], ['t', 'i'], ['t', 'r'], ['s', 'e']] 
    [ partl1 ] ident:  84.62 score: 47.0 SYM: [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  84.62 score: 47.0 SYM: [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'New Hampshire' ( 'New Hampshire' ) -- 
    [  raw   ] ident:  46.15 score: 5.0 SYM: [[['C'], 'N'], [('e', 0, 1), 'e'], ['', 'w'], ['', ' '], ['', 'H'], ['', 'a'], ['', 'm'], ['l', 'p'], [['c'], 's'], [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] 
    [ partl1 ] ident:  53.85 score: 20.0 SYM: [[['C'], 'N'], [('e', 0, 1), 'e'], ['', 'w'], ['', ' '], ['', 'H'], ['', 'a'], ['', 'm'], [['c'], 'p'], [['c'], 's'], [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  53.85 score: 20.0 SYM: [[['C'], 'N'], [('e', 0, 1), 'e'], ['', 'w'], ['', ' '], ['', 'H'], ['', 'a'], ['', 'm'], [['c'], 'p'], [['c'], 's'], [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] (dtpattern2.py:677)
[2018-04-19 12:52:58,987]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'New Hampshire' ( 'New Hampshire' ) is PAT(#1): 'Massachusetts' ( 'Massachusetts' ) with ALIGN:{'score': 47.0, 'identity': 84.61538461538461, 'align1': [['C'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], 's', ['c'], ['c'], ['c'], ['c']], 'align2': ['N', 'e', 'w', ' ', 'H', 'a', 'm', 'p', 's', 'h', 'i', 'r', 'e'], 'symbol': [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']]} (dtpattern2.py:513)
[2018-04-19 12:52:58,988]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >84.61538461538461 (dtpattern2.py:562)
[2018-04-19 12:52:58,992]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Massachusetts' ( 'Massachusetts' ) - PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) -- 
     [  raw   ] ident:  46.15 score: -3.0 SYM: [['M', ['C']], ['a', ''], ['s', ''], ['s', ''], ['a', ''], ['c', ''], ['h', ('e', 0, 1)], ['u', 'l'], ['s', ['c']], ['e', ['c']], ['t', ['c']], ['t', ['c']], ['s', ['c']]] 
     [ partl1 ] ident:  46.15 score: -34.0 SYM: [[['C'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ['C']], [['c'], ('e', 0, 1)], [['c'], 'l'], ['c'], ['c'], ['c'], ['c'], ['c']] 
     [  best  ] ident:  46.15 score: -3.0 SYM: [['M', ['C']], ['a', ''], ['s', ''], ['s', ''], ['a', ''], ['c', ''], ['h', ('e', 0, 1)], ['u', 'l'], ['s', ['c']], ['e', ['c']], ['t', ['c']], ['t', ['c']], ['s', ['c']]] (dtpattern2.py:582)
[2018-04-19 12:52:58,993]    DEBUG  No free slots for PAT(#1): 'New Hampshire' ( 'New Hampshire' ) (dtpattern2.py:524)
[2018-04-19 12:52:58,993]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:58,993]    DEBUG   Find closest pattern to PAT(#1): 'New Hampshire' ( 'New Hampshire' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,000]    DEBUG   Compared PAT(#1): 'New Hampshire' ( 'New Hampshire' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#1): 'Massachusetts' ( 'Massachusetts' ) - PAT(#1): 'New Hampshire' ( 'New Hampshire' ) -- 
    [  raw   ] ident:   7.69 score: -43.0 SYM: [['M', 'N'], ['a', 'e'], ['s', 'w'], ['s', ' '], ['a', 'H'], ['c', 'a'], ['h', 'm'], ['u', 'p'], 's', ['e', 'h'], ['t', 'i'], ['t', 'r'], ['s', 'e']] 
    [ partl1 ] ident:  84.62 score: 47.0 SYM: [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  84.62 score: 47.0 SYM: [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'New Hampshire' ( 'New Hampshire' ) -- 
    [  raw   ] ident:  46.15 score: 5.0 SYM: [[['C'], 'N'], [('e', 0, 1), 'e'], ['', 'w'], ['', ' '], ['', 'H'], ['', 'a'], ['', 'm'], ['l', 'p'], [['c'], 's'], [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] 
    [ partl1 ] ident:  53.85 score: 20.0 SYM: [[['C'], 'N'], [('e', 0, 1), 'e'], ['', 'w'], ['', ' '], ['', 'H'], ['', 'a'], ['', 'm'], [['c'], 'p'], [['c'], 's'], [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] 
    [  best  ] ident:  53.85 score: 20.0 SYM: [[['C'], 'N'], [('e', 0, 1), 'e'], ['', 'w'], ['', ' '], ['', 'H'], ['', 'a'], ['', 'm'], [['c'], 'p'], [['c'], 's'], [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] (dtpattern2.py:677)
[2018-04-19 12:52:59,001]    DEBUG  Best alignment after compressing for input PAT(#1): 'New Hampshire' ( 'New Hampshire' ) is for PAT(#1): 'Massachusetts' ( 'Massachusetts' ) with ALIGN:{'score': 47.0, 'identity': 84.61538461538461, 'align1': [['C'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], 's', ['c'], ['c'], ['c'], ['c']], 'align2': ['N', 'e', 'w', ' ', 'H', 'a', 'm', 'p', 's', 'h', 'i', 'r', 'e'], 'symbol': [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,001]    DEBUG [MERGE] Merging alignment [[['C'], 'N'], [['c'], 'e'], [['c'], 'w'], [['c'], ' '], [['c'], 'H'], [['c'], 'a'], [['c'], 'm'], [['c'], 'p'], 's', [['c'], 'h'], [['c'], 'i'], [['c'], 'r'], [['c'], 'e']] into PAT(#1): 'Massachusetts' ( 'Massachusetts' ) (dtpattern2.py:76)
[2018-04-19 12:52:59,001]    DEBUG [MERGED] Result of Merging alignment is: PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,001]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,005]    DEBUG [COMP] Compared PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,005]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) - PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) -- 
[  raw   ] ident:  38.46 score: -20.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], ['s', ''], [['c'], ''], ['c'], ['c'], ['c']] 
[ partl1 ] ident:  38.46 score: -16.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c'], ['c']] 
[  best  ] ident:  38.46 score: -16.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,005]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,005]    DEBUG [COMP] Best alignment for input PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) is for PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) with ALIGN:{'score': -16.0, 'identity': 38.46153846153847, 'align1': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': [['C'], ('e', 0, 1), 'l', ['c'], ['c'], '', '', '', '', '', ['c'], ['c'], ['c']], 'symbol': [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,006]    DEBUG --> #PatternFinder[#4, 2/2] $0-PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 )  $1-PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,006]    DEBUG #PatternFinder[#4, 2/2] $0-PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 )  $1-PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 )  (test_dtpattern2.py:61)
[2018-04-19 12:52:59,006]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:59,006]    DEBUG  [add] Adding value: North Carolina (dtpattern2.py:502)
[2018-04-19 12:52:59,006]    DEBUG  No free slots for PAT(#1): 'North Carolina' ( 'North Carolina' ) (dtpattern2.py:509)
[2018-04-19 12:52:59,006]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,006]    DEBUG   Find closest pattern to PAT(#1): 'North Carolina' ( 'North Carolina' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,013]    DEBUG   Compared PAT(#1): 'North Carolina' ( 'North Carolina' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) - PAT(#1): 'North Carolina' ( 'North Carolina' ) -- 
    [  raw   ] ident:  78.57 score: 21.0 SYM: [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], ['s', 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [ partl1 ] ident:  85.71 score: 41.0 SYM: [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [  best  ] ident:  85.71 score: 41.0 SYM: [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'North Carolina' ( 'North Carolina' ) -- 
    [  raw   ] ident:  42.86 score: -4.0 SYM: [['', 'N'], ['', 'o'], ['', 'r'], ['', 't'], ['', 'h'], ['', ' '], [['C'], 'C'], [('e', 0, 1), 'a'], ['l', 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [ partl1 ] ident:  50.00 score: 11.0 SYM: [['', 'N'], ['', 'o'], ['', 'r'], ['', 't'], ['', 'h'], ['', ' '], [['C'], 'C'], [('e', 0, 1), 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [  best  ] ident:  50.00 score: 11.0 SYM: [['', 'N'], ['', 'o'], ['', 'r'], ['', 't'], ['', 'h'], ['', ' '], [['C'], 'C'], [('e', 0, 1), 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] (dtpattern2.py:677)
[2018-04-19 12:52:59,013]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'North Carolina' ( 'North Carolina' ) is PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) with ALIGN:{'score': 41.0, 'identity': 85.71428571428571, 'align1': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c'], '', ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['N', 'o', 'r', 't', 'h', ' ', 'C', 'a', 'r', 'o', 'l', 'i', 'n', 'a'], 'symbol': [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']]} (dtpattern2.py:513)
[2018-04-19 12:52:59,013]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >85.71428571428571 (dtpattern2.py:562)
[2018-04-19 12:52:59,016]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) - PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) -- 
     [  raw   ] ident:  38.46 score: -20.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], ['s', ''], [['c'], ''], ['c'], ['c'], ['c']] 
     [ partl1 ] ident:  38.46 score: -16.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c'], ['c']] 
     [  best  ] ident:  38.46 score: -16.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c'], ['c']] (dtpattern2.py:582)
[2018-04-19 12:52:59,016]    DEBUG  No free slots for PAT(#1): 'North Carolina' ( 'North Carolina' ) (dtpattern2.py:524)
[2018-04-19 12:52:59,016]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,017]    DEBUG   Find closest pattern to PAT(#1): 'North Carolina' ( 'North Carolina' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,033]    DEBUG   Compared PAT(#1): 'North Carolina' ( 'North Carolina' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) - PAT(#1): 'North Carolina' ( 'North Carolina' ) -- 
    [  raw   ] ident:  78.57 score: 21.0 SYM: [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], ['s', 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [ partl1 ] ident:  85.71 score: 41.0 SYM: [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [  best  ] ident:  85.71 score: 41.0 SYM: [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'North Carolina' ( 'North Carolina' ) -- 
    [  raw   ] ident:  42.86 score: -4.0 SYM: [['', 'N'], ['', 'o'], ['', 'r'], ['', 't'], ['', 'h'], ['', ' '], [['C'], 'C'], [('e', 0, 1), 'a'], ['l', 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [ partl1 ] ident:  50.00 score: 11.0 SYM: [['', 'N'], ['', 'o'], ['', 'r'], ['', 't'], ['', 'h'], ['', ' '], [['C'], 'C'], [('e', 0, 1), 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] 
    [  best  ] ident:  50.00 score: 11.0 SYM: [['', 'N'], ['', 'o'], ['', 'r'], ['', 't'], ['', 'h'], ['', ' '], [['C'], 'C'], [('e', 0, 1), 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] (dtpattern2.py:677)
[2018-04-19 12:52:59,033]    DEBUG  Best alignment after compressing for input PAT(#1): 'North Carolina' ( 'North Carolina' ) is for PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) with ALIGN:{'score': 41.0, 'identity': 85.71428571428571, 'align1': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c'], '', ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['N', 'o', 'r', 't', 'h', ' ', 'C', 'a', 'r', 'o', 'l', 'i', 'n', 'a'], 'symbol': [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,035]    DEBUG [MERGE] Merging alignment [[['C'], 'N'], [['c'], 'o'], [['c'], 'r'], [['c', ' '], 't'], [['c', 'C'], 'h'], [['c'], ' '], ['', 'C'], [['c'], 'a'], [['c'], 'r'], [['c'], 'o'], [['c'], 'l'], [['c'], 'i'], [['c'], 'n'], [['c'], 'a']] into PAT(#2): Ccc[c ][cC]ccc's'cccc ( Cc2[c ][cC]c3's'c4 ) (dtpattern2.py:76)
[2018-04-19 12:52:59,035]    DEBUG [MERGED] Result of Merging alignment is: PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,035]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,037]    DEBUG [COMP] Compared PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,037]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) -- 
[  raw   ] ident:  28.57 score: -13.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
[  best  ] ident:  28.57 score: -13.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,038]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,038]    DEBUG [COMP] Best alignment for input PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) is for PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) with ALIGN:{'score': -13.0, 'identity': 28.57142857142857, 'align1': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], ('C', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': [['C'], ('e', 0, 1), 'l', ['c'], ['c'], ['c'], '', '', '', '', '', '', ['c'], ['c']], 'symbol': [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,038]    DEBUG --> #PatternFinder[#5, 2/2] $0-PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 )  $1-PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,038]    DEBUG #PatternFinder[#5, 2/2] $0-PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 )  $1-PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 )  (test_dtpattern2.py:61)
[2018-04-19 12:52:59,038]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:59,038]    DEBUG  [add] Adding value: Arkansas (dtpattern2.py:502)
[2018-04-19 12:52:59,039]    DEBUG  No free slots for PAT(#1): 'Arkansas' ( 'Arkansas' ) (dtpattern2.py:509)
[2018-04-19 12:52:59,039]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,039]    DEBUG   Find closest pattern to PAT(#1): 'Arkansas' ( 'Arkansas' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,043]    DEBUG   Compared PAT(#1): 'Arkansas' ( 'Arkansas' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'Arkansas' ( 'Arkansas' ) -- 
    [  raw   ] ident:  75.00 score: 16.0 SYM: [[['C'], 'A'], [('e', 0, 1), 'r'], ['l', 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] 
    [ partl1 ] ident:  87.50 score: 31.0 SYM: [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] 
    [  best  ] ident:  87.50 score: 31.0 SYM: [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#1): 'Arkansas' ( 'Arkansas' ) -- 
    [  raw   ] ident:  57.14 score: 12.0 SYM: [[['C'], 'A'], [['c'], ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [('C', 0, 1), ''], [['c'], 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] 
    [  best  ] ident:  57.14 score: 12.0 SYM: [[['C'], 'A'], [['c'], ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [('C', 0, 1), ''], [['c'], 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] (dtpattern2.py:677)
[2018-04-19 12:52:59,043]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'Arkansas' ( 'Arkansas' ) is PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) with ALIGN:{'score': 31.0, 'identity': 87.5, 'align1': [['C'], ('e', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['A', 'r', 'k', 'a', 'n', 's', 'a', 's'], 'symbol': [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']]} (dtpattern2.py:513)
[2018-04-19 12:52:59,043]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >87.5 (dtpattern2.py:562)
[2018-04-19 12:52:59,045]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) -- 
     [  raw   ] ident:  28.57 score: -13.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
     [  best  ] ident:  28.57 score: -13.0 SYM: [['C'], [['c'], ('e', 0, 1)], [['c'], 'l'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:582)
[2018-04-19 12:52:59,045]    DEBUG  No free slots for PAT(#1): 'Arkansas' ( 'Arkansas' ) (dtpattern2.py:524)
[2018-04-19 12:52:59,045]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,045]    DEBUG   Find closest pattern to PAT(#1): 'Arkansas' ( 'Arkansas' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,049]    DEBUG   Compared PAT(#1): 'Arkansas' ( 'Arkansas' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) - PAT(#1): 'Arkansas' ( 'Arkansas' ) -- 
    [  raw   ] ident:  75.00 score: 16.0 SYM: [[['C'], 'A'], [('e', 0, 1), 'r'], ['l', 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] 
    [ partl1 ] ident:  87.50 score: 31.0 SYM: [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] 
    [  best  ] ident:  87.50 score: 31.0 SYM: [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#1): 'Arkansas' ( 'Arkansas' ) -- 
    [  raw   ] ident:  57.14 score: 12.0 SYM: [[['C'], 'A'], [['c'], ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [('C', 0, 1), ''], [['c'], 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] 
    [  best  ] ident:  57.14 score: 12.0 SYM: [[['C'], 'A'], [['c'], ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [('C', 0, 1), ''], [['c'], 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] (dtpattern2.py:677)
[2018-04-19 12:52:59,049]    DEBUG  Best alignment after compressing for input PAT(#1): 'Arkansas' ( 'Arkansas' ) is for PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) with ALIGN:{'score': 31.0, 'identity': 87.5, 'align1': [['C'], ('e', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['A', 'r', 'k', 'a', 'n', 's', 'a', 's'], 'symbol': [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,049]    DEBUG [MERGE] Merging alignment [[['C'], 'A'], [('e', 0, 1), 'r'], [['c'], 'k'], [['c'], 'a'], [['c'], 'n'], [['c'], 's'], [['c'], 'a'], [['c'], 's']] into PAT(#2): Ce{0,1}'l'ccccc ( Ce?'l'c5 ) (dtpattern2.py:76)
[2018-04-19 12:52:59,049]    DEBUG [MERGED] Result of Merging alignment is: PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,049]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,052]    DEBUG [COMP] Compared PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,052]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) - PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) -- 
[  raw   ] ident:  28.57 score: -28.0 SYM: [['C'], [(['c'], 0, 1), ['c']], ['c'], [['c'], ['c', ' ']], [['c'], ['c', 'C']], [['c'], ['c', ' ']], ['', ('C', 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] 
[  best  ] ident:  28.57 score: -28.0 SYM: [['C'], [(['c'], 0, 1), ['c']], ['c'], [['c'], ['c', ' ']], [['c'], ['c', 'C']], [['c'], ['c', ' ']], ['', ('C', 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,052]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,052]    DEBUG [COMP] Best alignment for input PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) is for PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) with ALIGN:{'score': -28.0, 'identity': 28.57142857142857, 'align1': [['C'], (['c'], 0, 1), ['c'], ['c'], ['c'], ['c'], '', '', '', '', '', '', ['c'], ['c']], 'align2': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], ('C', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'symbol': [['C'], [(['c'], 0, 1), ['c']], ['c'], [['c'], ['c', ' ']], [['c'], ['c', 'C']], [['c'], ['c', ' ']], ['', ('C', 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,052]    DEBUG --> #PatternFinder[#6, 2/2] $0-PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 )  $1-PAT(#3): C[c]{0,1}cccccc ( Cc?c6 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,053]    DEBUG #PatternFinder[#6, 2/2] $0-PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 )  $1-PAT(#3): C[c]{0,1}cccccc ( Cc?c6 )  (test_dtpattern2.py:61)
[2018-04-19 12:52:59,053]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:59,053]    DEBUG  [add] Adding value: West Virginia (dtpattern2.py:502)
[2018-04-19 12:52:59,053]    DEBUG  No free slots for PAT(#1): 'West Virginia' ( 'West Virginia' ) (dtpattern2.py:509)
[2018-04-19 12:52:59,053]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,053]    DEBUG   Find closest pattern to PAT(#1): 'West Virginia' ( 'West Virginia' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,055]    DEBUG   Compared PAT(#1): 'West Virginia' ( 'West Virginia' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#1): 'West Virginia' ( 'West Virginia' ) -- 
    [  raw   ] ident:  92.86 score: 29.0 SYM: [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] 
    [  best  ] ident:  92.86 score: 29.0 SYM: [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) - PAT(#1): 'West Virginia' ( 'West Virginia' ) -- 
    [  raw   ] ident:  61.54 score: 12.0 SYM: [['', 'W'], ['', 'e'], ['', 's'], ['', 't'], ['', ' '], [['C'], 'V'], [(['c'], 0, 1), 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] 
    [  best  ] ident:  61.54 score: 12.0 SYM: [['', 'W'], ['', 'e'], ['', 's'], ['', 't'], ['', ' '], [['C'], 'V'], [(['c'], 0, 1), 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] (dtpattern2.py:677)
[2018-04-19 12:52:59,055]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'West Virginia' ( 'West Virginia' ) is PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) with ALIGN:{'score': 29.0, 'identity': 92.85714285714286, 'align1': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], ('C', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['W', '', 'e', 's', 't', ' ', 'V', 'i', 'r', 'g', 'i', 'n', 'i', 'a'], 'symbol': [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']]} (dtpattern2.py:513)
[2018-04-19 12:52:59,055]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >92.85714285714286 (dtpattern2.py:562)
[2018-04-19 12:52:59,056]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) -- 
     [  raw   ] ident:  28.57 score: -28.0 SYM: [['C'], [['c'], (['c'], 0, 1)], ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
     [  best  ] ident:  28.57 score: -28.0 SYM: [['C'], [['c'], (['c'], 0, 1)], ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [('C', 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:582)
[2018-04-19 12:52:59,056]    DEBUG  No free slots for PAT(#1): 'West Virginia' ( 'West Virginia' ) (dtpattern2.py:524)
[2018-04-19 12:52:59,056]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,056]    DEBUG   Find closest pattern to PAT(#1): 'West Virginia' ( 'West Virginia' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,058]    DEBUG   Compared PAT(#1): 'West Virginia' ( 'West Virginia' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) - PAT(#1): 'West Virginia' ( 'West Virginia' ) -- 
    [  raw   ] ident:  92.86 score: 29.0 SYM: [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] 
    [  best  ] ident:  92.86 score: 29.0 SYM: [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) - PAT(#1): 'West Virginia' ( 'West Virginia' ) -- 
    [  raw   ] ident:  61.54 score: 12.0 SYM: [['', 'W'], ['', 'e'], ['', 's'], ['', 't'], ['', ' '], [['C'], 'V'], [(['c'], 0, 1), 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] 
    [  best  ] ident:  61.54 score: 12.0 SYM: [['', 'W'], ['', 'e'], ['', 's'], ['', 't'], ['', ' '], [['C'], 'V'], [(['c'], 0, 1), 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] (dtpattern2.py:677)
[2018-04-19 12:52:59,058]    DEBUG  Best alignment after compressing for input PAT(#1): 'West Virginia' ( 'West Virginia' ) is for PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) with ALIGN:{'score': 29.0, 'identity': 92.85714285714286, 'align1': [['C'], ['c'], ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], ('C', 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['W', '', 'e', 's', 't', ' ', 'V', 'i', 'r', 'g', 'i', 'n', 'i', 'a'], 'symbol': [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,059]    DEBUG [MERGE] Merging alignment [[['C'], 'W'], [['c'], ''], [['c'], 'e'], [['c', ' '], 's'], [['c', 'C'], 't'], [['c', ' '], ' '], [('C', 0, 1), 'V'], [['c'], 'i'], [['c'], 'r'], [['c'], 'g'], [['c'], 'i'], [['c'], 'n'], [['c'], 'i'], [['c'], 'a']] into PAT(#3): Ccc[c ][cC][c ]C{0,1}ccccccc ( Cc2[c ][cC][c ]C?c7 ) (dtpattern2.py:76)
[2018-04-19 12:52:59,059]    DEBUG [MERGED] Result of Merging alignment is: PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,059]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,060]    DEBUG [COMP] Compared PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,060]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) -- 
[  raw   ] ident:  35.71 score: -28.0 SYM: [['C'], (['c'], 0, 1), ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
[  best  ] ident:  35.71 score: -28.0 SYM: [['C'], (['c'], 0, 1), ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,060]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,060]    DEBUG [COMP] Best alignment for input PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) is for PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) with ALIGN:{'score': -28.0, 'identity': 35.714285714285715, 'align1': [['C'], (['c'], 0, 1), ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], (['C'], 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': [['C'], (['c'], 0, 1), ['c'], ['c'], ['c'], ['c'], '', '', '', '', '', '', ['c'], ['c']], 'symbol': [['C'], (['c'], 0, 1), ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,060]    DEBUG --> #PatternFinder[#7, 2/2] $0-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  $1-PAT(#3): C[c]{0,1}cccccc ( Cc?c6 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,061]    DEBUG #PatternFinder[#7, 2/2] $0-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  $1-PAT(#3): C[c]{0,1}cccccc ( Cc?c6 )  (test_dtpattern2.py:61)
[2018-04-19 12:52:59,061]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:59,061]    DEBUG  [add] Adding value: Ohio (dtpattern2.py:502)
[2018-04-19 12:52:59,061]    DEBUG  No free slots for PAT(#1): 'Ohio' ( 'Ohio' ) (dtpattern2.py:509)
[2018-04-19 12:52:59,061]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,061]    DEBUG   Find closest pattern to PAT(#1): 'Ohio' ( 'Ohio' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,063]    DEBUG   Compared PAT(#1): 'Ohio' ( 'Ohio' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) - PAT(#1): 'Ohio' ( 'Ohio' ) -- 
    [  raw   ] ident:  50.00 score: -2.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] 
    [  best  ] ident:  50.00 score: -2.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#1): 'Ohio' ( 'Ohio' ) -- 
    [  raw   ] ident:  28.57 score: -8.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] 
    [  best  ] ident:  28.57 score: -8.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] (dtpattern2.py:677)
[2018-04-19 12:52:59,063]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'Ohio' ( 'Ohio' ) is PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) with ALIGN:{'score': -2.0, 'identity': 50.0, 'align1': [['C'], (['c'], 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['O', '', '', '', '', 'h', 'i', 'o'], 'symbol': [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']]} (dtpattern2.py:513)
[2018-04-19 12:52:59,063]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >50.0 (dtpattern2.py:562)
[2018-04-19 12:52:59,065]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) -- 
     [  raw   ] ident:  35.71 score: -28.0 SYM: [['C'], (['c'], 0, 1), ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
     [  best  ] ident:  35.71 score: -28.0 SYM: [['C'], (['c'], 0, 1), ['c'], [['c', ' '], ['c']], [['c', 'C'], ['c']], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:582)
[2018-04-19 12:52:59,065]    DEBUG  No free slots for PAT(#1): 'Ohio' ( 'Ohio' ) (dtpattern2.py:524)
[2018-04-19 12:52:59,066]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,066]    DEBUG   Find closest pattern to PAT(#1): 'Ohio' ( 'Ohio' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,068]    DEBUG   Compared PAT(#1): 'Ohio' ( 'Ohio' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) - PAT(#1): 'Ohio' ( 'Ohio' ) -- 
    [  raw   ] ident:  50.00 score: -2.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] 
    [  best  ] ident:  50.00 score: -2.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#1): 'Ohio' ( 'Ohio' ) -- 
    [  raw   ] ident:  28.57 score: -8.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] 
    [  best  ] ident:  28.57 score: -8.0 SYM: [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] (dtpattern2.py:677)
[2018-04-19 12:52:59,068]    DEBUG  Best alignment after compressing for input PAT(#1): 'Ohio' ( 'Ohio' ) is for PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) with ALIGN:{'score': -2.0, 'identity': 50.0, 'align1': [['C'], (['c'], 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'align2': ['O', '', '', '', '', 'h', 'i', 'o'], 'symbol': [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,068]    DEBUG [MERGE] Merging alignment [[['C'], 'O'], [(['c'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], 'h'], [['c'], 'i'], [['c'], 'o']] into PAT(#3): C[c]{0,1}cccccc ( Cc?c6 ) (dtpattern2.py:76)
[2018-04-19 12:52:59,068]    DEBUG [MERGED] Result of Merging alignment is: PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,068]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,071]    DEBUG [COMP] Compared PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,071]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) -- 
[  raw   ] ident:  28.57 score: -30.0 SYM: [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] 
[  best  ] ident:  28.57 score: -30.0 SYM: [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,071]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,071]    DEBUG [COMP] Best alignment for input PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) is for PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) with ALIGN:{'score': -30.0, 'identity': 28.57142857142857, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], '', '', '', '', '', '', ['c'], ['c']], 'align2': [['C'], (['c'], 0, 1), ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], (['C'], 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'symbol': [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,072]    DEBUG --> #PatternFinder[#8, 2/2] $0-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  $1-PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,072]    DEBUG #PatternFinder[#8, 2/2] $0-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  $1-PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )  (test_dtpattern2.py:61)
[2018-04-19 12:52:59,072]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:59,072]    DEBUG  [add] Adding value: Florida (dtpattern2.py:502)
[2018-04-19 12:52:59,072]    DEBUG  No free slots for PAT(#1): 'Florida' ( 'Florida' ) (dtpattern2.py:509)
[2018-04-19 12:52:59,072]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,072]    DEBUG   Find closest pattern to PAT(#1): 'Florida' ( 'Florida' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,075]    DEBUG   Compared PAT(#1): 'Florida' ( 'Florida' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#1): 'Florida' ( 'Florida' ) -- 
    [  raw   ] ident:  87.50 score: 10.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] 
    [  best  ] ident:  87.50 score: 10.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#1): 'Florida' ( 'Florida' ) -- 
    [  raw   ] ident:  50.00 score: 7.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'l'], [['c'], 'o'], [['c'], 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] 
    [  best  ] ident:  50.00 score: 7.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'l'], [['c'], 'o'], [['c'], 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] (dtpattern2.py:677)
[2018-04-19 12:52:59,075]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'Florida' ( 'Florida' ) is PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) with ALIGN:{'score': 10.0, 'identity': 87.5, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], ['c'], ['c']], 'align2': ['F', '', 'l', 'o', 'r', 'i', 'd', 'a'], 'symbol': [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']]} (dtpattern2.py:513)
[2018-04-19 12:52:59,075]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >87.5 (dtpattern2.py:562)
[2018-04-19 12:52:59,078]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) -- 
     [  raw   ] ident:  42.86 score: -30.0 SYM: [['C'], (['c'], 0, 1), [['c'], (['c'], 0, 1)], [['c', ' '], (['c'], 0, 1)], [['c', 'C'], (['c'], 0, 1)], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
     [  best  ] ident:  42.86 score: -30.0 SYM: [['C'], (['c'], 0, 1), [['c'], (['c'], 0, 1)], [['c', ' '], (['c'], 0, 1)], [['c', 'C'], (['c'], 0, 1)], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:582)
[2018-04-19 12:52:59,078]    DEBUG  No free slots for PAT(#1): 'Florida' ( 'Florida' ) (dtpattern2.py:524)
[2018-04-19 12:52:59,078]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,079]    DEBUG   Find closest pattern to PAT(#1): 'Florida' ( 'Florida' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,081]    DEBUG   Compared PAT(#1): 'Florida' ( 'Florida' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#1): 'Florida' ( 'Florida' ) -- 
    [  raw   ] ident:  87.50 score: 10.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] 
    [  best  ] ident:  87.50 score: 10.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#1): 'Florida' ( 'Florida' ) -- 
    [  raw   ] ident:  50.00 score: 7.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'l'], [['c'], 'o'], [['c'], 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] 
    [  best  ] ident:  50.00 score: 7.0 SYM: [[['C'], 'F'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'l'], [['c'], 'o'], [['c'], 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] (dtpattern2.py:677)
[2018-04-19 12:52:59,081]    DEBUG  Best alignment after compressing for input PAT(#1): 'Florida' ( 'Florida' ) is for PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) with ALIGN:{'score': 10.0, 'identity': 87.5, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], ['c'], ['c']], 'align2': ['F', '', 'l', 'o', 'r', 'i', 'd', 'a'], 'symbol': [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,082]    DEBUG [MERGE] Merging alignment [[['C'], 'F'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'l'], [(['c'], 0, 1), 'o'], [(['c'], 0, 1), 'r'], [['c'], 'i'], [['c'], 'd'], [['c'], 'a']] into PAT(#4): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) (dtpattern2.py:76)
[2018-04-19 12:52:59,082]    DEBUG [MERGED] Result of Merging alignment is: PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,082]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,085]    DEBUG [COMP] Compared PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,085]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) -- 
[  raw   ] ident:  28.57 score: -30.0 SYM: [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] 
[  best  ] ident:  28.57 score: -30.0 SYM: [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,085]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,085]    DEBUG [COMP] Best alignment for input PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) is for PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) with ALIGN:{'score': -30.0, 'identity': 28.57142857142857, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], '', '', '', '', '', '', ['c'], ['c']], 'align2': [['C'], (['c'], 0, 1), ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], (['C'], 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'symbol': [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,085]    DEBUG --> #PatternFinder[#9, 2/2] $0-PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )  $1-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,086]    DEBUG #PatternFinder[#9, 2/2] $0-PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )  $1-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  (test_dtpattern2.py:61)
[2018-04-19 12:52:59,086]    DEBUG ---------- ADD NEW ----------- (dtpattern2.py:501)
[2018-04-19 12:52:59,086]    DEBUG  [add] Adding value: Vermont (dtpattern2.py:502)
[2018-04-19 12:52:59,086]    DEBUG  No free slots for PAT(#1): 'Vermont' ( 'Vermont' ) (dtpattern2.py:509)
[2018-04-19 12:52:59,086]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,086]    DEBUG   Find closest pattern to PAT(#1): 'Vermont' ( 'Vermont' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,089]    DEBUG   Compared PAT(#1): 'Vermont' ( 'Vermont' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#1): 'Vermont' ( 'Vermont' ) -- 
    [  raw   ] ident:  87.50 score: 10.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] 
    [  best  ] ident:  87.50 score: 10.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#1): 'Vermont' ( 'Vermont' ) -- 
    [  raw   ] ident:  50.00 score: 7.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'e'], [['c'], 'r'], [['c'], 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] 
    [  best  ] ident:  50.00 score: 7.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'e'], [['c'], 'r'], [['c'], 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] (dtpattern2.py:677)
[2018-04-19 12:52:59,089]    DEBUG  [BEST ALIGNMENT] Best alignment for PAT(#1): 'Vermont' ( 'Vermont' ) is PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) with ALIGN:{'score': 10.0, 'identity': 87.5, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], ['c'], ['c']], 'align2': ['V', '', 'e', 'r', 'm', 'o', 'n', 't'], 'symbol': [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']]} (dtpattern2.py:513)
[2018-04-19 12:52:59,090]    DEBUG [COMP_BEFORE] Check if we can compress pattern groups with identiy >87.5 (dtpattern2.py:562)
[2018-04-19 12:52:59,092]    DEBUG [COMP_BEFORE] computed 1 alignments 
  pos:0      --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) -- 
     [  raw   ] ident:  42.86 score: -30.0 SYM: [['C'], (['c'], 0, 1), [['c'], (['c'], 0, 1)], [['c', ' '], (['c'], 0, 1)], [['c', 'C'], (['c'], 0, 1)], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] 
     [  best  ] ident:  42.86 score: -30.0 SYM: [['C'], (['c'], 0, 1), [['c'], (['c'], 0, 1)], [['c', ' '], (['c'], 0, 1)], [['c', 'C'], (['c'], 0, 1)], [['c', ' '], ['c']], [(['C'], 0, 1), ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], [['c'], ''], ['c'], ['c']] (dtpattern2.py:582)
[2018-04-19 12:52:59,092]    DEBUG  No free slots for PAT(#1): 'Vermont' ( 'Vermont' ) (dtpattern2.py:524)
[2018-04-19 12:52:59,092]    DEBUG   >------ CLOSEST PATTERN -------< (dtpattern2.py:657)
[2018-04-19 12:52:59,092]    DEBUG   Find closest pattern to PAT(#1): 'Vermont' ( 'Vermont' ) (excludePos=None) (dtpattern2.py:658)
[2018-04-19 12:52:59,095]    DEBUG   Compared PAT(#1): 'Vermont' ( 'Vermont' ) to 2 patterns 
    --ALIGNMENT(5,-4,-15,-1): PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#1): 'Vermont' ( 'Vermont' ) -- 
    [  raw   ] ident:  87.50 score: 10.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] 
    [  best  ] ident:  87.50 score: 10.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']]
    --ALIGNMENT(5,-4,-15,-1): PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) - PAT(#1): 'Vermont' ( 'Vermont' ) -- 
    [  raw   ] ident:  50.00 score: 7.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'e'], [['c'], 'r'], [['c'], 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] 
    [  best  ] ident:  50.00 score: 7.0 SYM: [[['C'], 'V'], [(['c'], 0, 1), ''], [['c'], ''], [['c', ' '], ''], [['c', 'C'], ''], [['c', ' '], ''], [(['C'], 0, 1), ''], [['c'], ''], [['c'], 'e'], [['c'], 'r'], [['c'], 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] (dtpattern2.py:677)
[2018-04-19 12:52:59,095]    DEBUG  Best alignment after compressing for input PAT(#1): 'Vermont' ( 'Vermont' ) is for PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) with ALIGN:{'score': 10.0, 'identity': 87.5, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], ['c'], ['c']], 'align2': ['V', '', 'e', 'r', 'm', 'o', 'n', 't'], 'symbol': [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']]} (dtpattern2.py:529)
[2018-04-19 12:52:59,096]    DEBUG [MERGE] Merging alignment [[['C'], 'V'], [(['c'], 0, 1), ''], [(['c'], 0, 1), 'e'], [(['c'], 0, 1), 'r'], [(['c'], 0, 1), 'm'], [['c'], 'o'], [['c'], 'n'], [['c'], 't']] into PAT(#5): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) (dtpattern2.py:76)
[2018-04-19 12:52:59,096]    DEBUG [MERGED] Result of Merging alignment is: PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) (dtpattern2.py:168)
[2018-04-19 12:52:59,096]    DEBUG [COMP] Check if we can compress pattern groups (dtpattern2.py:608)
[2018-04-19 12:52:59,098]    DEBUG [COMP] Compared PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) to 2 patterns (dtpattern2.py:623)
[2018-04-19 12:52:59,098]    DEBUG --ALIGNMENT(5,-4,-15,-1): PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) - PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) -- 
[  raw   ] ident:  28.57 score: -30.0 SYM: [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] 
[  best  ] ident:  28.57 score: -30.0 SYM: [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']] (dtpattern2.py:625)
[2018-04-19 12:52:59,098]    DEBUG None (dtpattern2.py:625)
[2018-04-19 12:52:59,098]    DEBUG [COMP] Best alignment for input PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 ) is for PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 ) with ALIGN:{'score': -30.0, 'identity': 28.57142857142857, 'align1': [['C'], (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), (['c'], 0, 1), ['c'], '', '', '', '', '', '', ['c'], ['c']], 'align2': [['C'], (['c'], 0, 1), ['c'], ['c', ' '], ['c', 'C'], ['c', ' '], (['C'], 0, 1), ['c'], ['c'], ['c'], ['c'], ['c'], ['c'], ['c']], 'symbol': [['C'], (['c'], 0, 1), [(['c'], 0, 1), ['c']], [(['c'], 0, 1), ['c', ' ']], [(['c'], 0, 1), ['c', 'C']], [['c'], ['c', ' ']], ['', (['C'], 0, 1)], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['', ['c']], ['c'], ['c']]} (dtpattern2.py:630)
[2018-04-19 12:52:59,098]    DEBUG --> #PatternFinder[#10, 2/2] $0-PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )  $1-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  (dtpattern2.py:545)
[2018-04-19 12:52:59,099]    DEBUG #PatternFinder[#10, 2/2] $0-PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )  $1-PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )  (test_dtpattern2.py:61)
## RESULTS 
  PAT-M1: [('C10acc[ Caccccccc]', 10)]
  PAT-M2:
   ******************** PatternFinder ********************
     10 elements
    -- 2/2 Groups ----------
     0 PAT(#6): C[c]{0,1}[c]{0,1}[c]{0,1}[c]{0,1}ccc ( C{c,0,4}c3 )
     1 PAT(#4): C[c]{0,1}c[c ][cC][c ][C]{0,1}ccccccc ( Cc?c[c ][cC][c ]C?c7 )
    -- sum: 10

--------------------------------------------- Timing stats ---------------------------------------------
             method             count    min        q25        avg        q75        max        sum    
 --------------------------------------------------------------------------------------------------------
                       _compact   258      0.004      0.004      0.016      0.005      0.039      4.054
                      _serialse   258      0.003      0.003      0.015      0.004      0.038      3.808
                   align_global    67      0.378      0.378      1.327      0.378     11.122     88.908
                         _align    67      0.345      0.345      1.285      0.345     11.086     86.087
                    _score_fast    67      0.263      0.263      1.053      0.264     10.520     70.563
                     _rec_align    67      0.030      0.030      0.184      0.031      1.073     12.336
                 Alignment_init    48      0.459      0.459      1.992      0.459     12.929     95.617
                     best_align    48      0.449      0.449      1.980      0.449     12.918     95.016
                        patinit    10      0.007      0.007      0.011      0.007      0.017      0.109
                  update_symbol     8      0.340      0.340      0.438      0.340      0.661      3.501
                       pattern1     1     14.430     14.430     14.430     14.430     14.430     14.430
 --------------------------------------------------------------------------------------------------------
