Metadata-Version: 2.1
Name: bignmf
Version: 1.0.4
Summary: Non-negative matrix factorization
Home-page: https://github.com/thenmf/bignmf
Author: Haran Rajkumar, Vaibhav Kulshrestha
Author-email: haranrajkumar97@gmail.com, vaibhav1kulshrestha@gmail.com
License: UNKNOWN
Description: # BigNmf
        
        [![Read the Docs](https://readthedocs.org/projects/bignmf/badge/?version=latest)](https://bignmf.readthedocs.io/en/latest/?badge=latest)
        [![PyPI version](https://badge.fury.io/py/bignmf.svg)](https://badge.fury.io/py/bignmf)
        [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
        
        BigNmf (Big Data NMF) is a python package for performing single NMF and joint NMF algorithms. [NMF](https://en.wikipedia.org/wiki/Non-negative_matrix_factorization)   (Non-negative matrix factorization) is a unsupervised classification algorithm.
        
        ## Installation
        
        This package is available on the PyPi repository. Therefore you can install, by running the following.
        
        ```bash
        pip3 install bignmf
        ```
        
        ## Usage
        
        The following is an example code snippet for running the nmf.
        
        ### 1. Single NMF
        
        ```python
        from bignmf.datasets.datasets import Datasets
        from bignmf.models.snmf.standard import StandardNmf
        
        Datasets.list_all()
        data=Datasets.read("SimulatedX1")
        k = 3
        iter =100
        trials = 50
        
        model = StandardNmf(data,k)
        model.run(trials, iter, verbose=0)
        print(model.error)
        model.cluster_data()
        model.calc_consensus_matrices()
        print(model.h_cluster)
        ```
        
        ### 2. Joint NMF
        
        ```python
        from bignmf.models.jnmf.integrative import IntegrativeJnmf
        from bignmf.datasets.datasets import Datasets
        
        Datasets.list_all()
        data_dict = {}
        data_dict["sim1"] = Datasets.read("SimulatedX1")
        data_dict["sim2"] = Datasets.read("SimulatedX2")
        
        k = 3
        iter =100
        trials = 50
        lamb = 0.1
        
        model = IntegrativeJnmf(data_dict, k, lamb)
        model = StandardNmf(data,k)
        model.run(trials, iter, verbose=0)
        print(model.error)
        model.cluster_data()
        model.calc_consensus_matrices()
        print(model.h_cluster)
        ```
        
        [Here](https://bignmf.readthedocs.io/en/latest/) is the extensive documentation for more details.
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
