# coding: utf-8

"""
    Dash API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dash_api.models.organisation import Organisation  # noqa: F401,E501


class PrimaryAffiliateOrganisation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary': 'Organisation',
        'affiliates': 'list[Organisation]'
    }

    attribute_map = {
        'primary': 'primary',
        'affiliates': 'affiliates'
    }

    def __init__(self, primary=None, affiliates=None):  # noqa: E501
        """PrimaryAffiliateOrganisation - a model defined in Swagger"""  # noqa: E501

        self._primary = None
        self._affiliates = None
        self.discriminator = None

        if primary is not None:
            self.primary = primary
        if affiliates is not None:
            self.affiliates = affiliates

    @property
    def primary(self):
        """Gets the primary of this PrimaryAffiliateOrganisation.  # noqa: E501


        :return: The primary of this PrimaryAffiliateOrganisation.  # noqa: E501
        :rtype: Organisation
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this PrimaryAffiliateOrganisation.


        :param primary: The primary of this PrimaryAffiliateOrganisation.  # noqa: E501
        :type: Organisation
        """

        self._primary = primary

    @property
    def affiliates(self):
        """Gets the affiliates of this PrimaryAffiliateOrganisation.  # noqa: E501


        :return: The affiliates of this PrimaryAffiliateOrganisation.  # noqa: E501
        :rtype: list[Organisation]
        """
        return self._affiliates

    @affiliates.setter
    def affiliates(self, affiliates):
        """Sets the affiliates of this PrimaryAffiliateOrganisation.


        :param affiliates: The affiliates of this PrimaryAffiliateOrganisation.  # noqa: E501
        :type: list[Organisation]
        """

        self._affiliates = affiliates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimaryAffiliateOrganisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
