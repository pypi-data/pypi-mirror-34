---
# vim: foldmarker=[[[,]]]:foldmethod=marker

- name: Divert original /etc/default/grub
  command: dpkg-divert --quiet --local --divert /etc/default/grub.dpkg-divert --rename /etc/default/grub
  args:
    creates: '/etc/default/grub.dpkg-divert'

- name: Get default kernel parameters
  shell: test -f /etc/default/grub.dpkg-divert && . /etc/default/grub.dpkg-divert || . /etc/default/grub ; echo $GRUB_CMDLINE_LINUX_DEFAULT | tr " " "\n"
  register: grub_register_default_cmdline
  changed_when: False
  check_mode: False
  when: grub_save_options

- name: Get old kernel parameters
  shell: test -f /etc/default/grub.dpkg-divert && . /etc/default/grub.dpkg-divert || . /etc/default/grub ; echo $GRUB_CMDLINE_LINUX | tr " " "\n"
  register: grub_register_old_cmdline
  changed_when: False
  check_mode: False
  when: grub_save_options

- name: Default kernel parameters
  set_fact:
    grub_fact_default_kernel_parameters: '{{ grub_register_default_cmdline.stdout_lines }}'
    grub_fact_old_kernel_parameters:     '{{ grub_register_old_cmdline.stdout_lines }}'
  when: grub_save_options

- name: Configure /etc/default/grub
  template:
    src: 'etc/default/grub.j2'
    dest: '/etc/default/grub'
    owner:  'root'
    group:  'root'
    mode:   '0644'
  notify: [ 'Update GRUB' ]

# Ansible facts [[[
- name: Make sure that local fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save local GRUB facts
  template:
    src: 'etc/ansible/facts.d/grub.fact.j2'
    dest: '/etc/ansible/facts.d/grub.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
# ]]]

# Security and users [[[

- name: Ensure secrets directories exist
  file:
    path: '{{ secret + "/credentials/" + ansible_fqdn + "/grub/" + item.name }}'
    state: 'directory'
    mode: '0750'
  become: False
  delegate_to: 'localhost'
  no_log: True
  when: item.name|d()
  with_items: '{{ grub_combined_users }}'

- name: Save plaintext password in secrets
  copy:
    content: "{{ item.password + '\n' }}"
    dest: '{{ secret + "/credentials/" + ansible_fqdn + "/grub/" + item.name + "/password" }}'
    mode: '0640'
  become: False
  delegate_to: 'localhost'
  no_log: True
  register: grub_register_pw_plain
  when: item.name|d()
  with_items: '{{ grub_combined_users }}'

## There seems to be no way to specify the salt (except using a custom script).
## Only generating the hashed password when the plaintext password has changed
## is the workaround to make it idempotent.
## This is not too bad because depending on the iteration count chosen this operation could take a while ;)
- name: Generate salted hash from user password
  shell: echo '{{ item.0.password }}\n{{ item.0.password }}' | grub-mkpasswd-pbkdf2
         {{ "" if grub_iter_time|d()   == "default" else ("--iteration-count=" + grub_iter_time) }}
         {{ "" if grub_salt_length|d() == "default" else ("--salt=" + grub_salt_length) }}
         {{ "" if grub_hash_length|d() == "default" else ("--buflen=" + grub_hash_length) }}
         | perl -ne 's/^(:?Your PBKDF2|PBKDF2 hash of your password) is //ms && print'
  become: False
  delegate_to: 'localhost'
  no_log: True
  changed_when: False
  register: grub_register_pw_hashes
  when: (item.0.name|d() and item.1 is changed)
  with_together:
    - '{{ grub_combined_users }}'
    - '{{ grub_register_pw_plain.results|d({}) }}'

- name: Save hashed password in secrets
  copy:
    content: "{{ item.1.stdout_lines.0 + '\n' }}"
    dest: '{{ secret + "/credentials/" + ansible_fqdn + "/grub/" + item.0.name + "/password_hash" }}'
    mode: '0640'
  become: False
  delegate_to: 'localhost'
  no_log: True
  when: (item.1 is not skipped)
  with_together:
    - '{{ grub_combined_users }}'
    - '{{ grub_register_pw_hashes.results|d({}) }}'

- name: Configure users and passwords
  template:
    src: 'etc/grub.d/01_users.j2'
    dest: '/etc/grub.d/01_users'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (not ansible_check_mode and grub_combined_users|length > 0)
  notify: [ 'Update GRUB' ]

- name: Remove users and passwords
  file:
    path: '/etc/grub.d/01_users'
    state: 'absent'
  when: (grub_combined_users|length == 0)
  notify: [ 'Update GRUB' ]

## FIXME: Remove when patched upstream has reached Debian stable.
## Currently unlikely because the patch was not accepted upstream.
## It has been decided to not divert this script because there is a chance that
## security fixes could affect this file.
- name: Divert original /etc/grub.d/10_linux
  command: dpkg-divert --quiet --local --divert /etc/grub.d/10_linux.dpkg-divert
           --rename /etc/grub.d/10_linux
  args:
    creates: '/etc/grub.d/10_linux.dpkg-divert'
  when: (grub_combined_users|length > 0)
  register: grub__register_linux_divert

- name: Copy /etc/grub.d/10_linux.dpkg-divert to its original location
  command: cp /etc/grub.d/10_linux.dpkg-divert /etc/grub.d/10_linux
  when: grub__register_linux_divert is changed

- name: Apply patch to allow to configure the default menu entry parameters
  replace:
    dest: '/etc/grub.d/10_linux'
    regexp: "^CLASS=(?:\\$\\{[A-Z_]+:-)?([\"'][\\w _-]+)([\"'])\\}?"
    replace: 'CLASS=${GRUB_LINUX_MENUENTRY_CLASS:-\1 ${GRUB_LINUX_MENUENTRY_CLASS_ADDITIONAL:-}\2}'
  when: (grub_combined_users|length > 0)

- name: Remove patch to allow to configure the default menu entry parameters
  replace:
    dest: '/etc/grub.d/10_linux'
    regexp: "^CLASS=(?:\\$\\{[A-Z_]+:-)?([\"'][\\w _-]+)([\"'])\\}?"
    replace: 'CLASS=${GRUB_LINUX_MENUENTRY_CLASS:-\1 ${GRUB_LINUX_MENUENTRY_CLASS_ADDITIONAL:-}\2}'
  when: (grub_combined_users|length > 0)

# ]]]
