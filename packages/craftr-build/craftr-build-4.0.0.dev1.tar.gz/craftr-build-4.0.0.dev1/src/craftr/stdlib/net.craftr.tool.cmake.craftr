# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

project(module.name, '1.0-0')

import collections
import os
import re
import string

from nr.types.map import ChainMap

ConfigResult = collections.namedtuple('ConfigResult', 'output directory')


def configure_file(input, output=None, environ={}, inherit_environ=True):
  """
  Renders the CMake configuration file using the specified environment
  and additionally the current process environment (optional).

  If the #output parameter is omitted, an output filename in a
  special ``include/`` directory will be generated from the *input*
  filename. The ``.in`` suffix from #input will be removed if it
  exists.

  # Parameters
  input (str):
    Path to the CMake file that should be rendered.
  output (str, None):
    Name of the output file. Will be automatically generated if not
    specified.
  environ (dict):
    A dictionary of variables for the CMake template rendering.
  inherit_environ (bool):
    If #True, the environment variables of the Craftr process are taken
    into account in additon to *environ*.
  return (ConfigResult)
  """

  input = path.canonical(input, current_scope().directory)

  if not output:
    build_dir = current_target().build_directory
    output = path.join(build_dir, 'include', path.base(input))
    if output.endswith('.in'):
      output = output[:-3]
    elif output.endswith('.cmake'):
      output = output[:-6]

  if inherit_environ:
    environ = ChainMap(environ, os.environ)

  output_dir = path.dir(output)
  path.makedirs(output_dir)

  def replace_var(match):
    return environ.get(match.group(1), '')

  with open(input) as src:
    with open(output, 'w') as dst:
      for line_num, line in enumerate(src):
        match = re.match('\s*#cmakedefine(01)?\s+(\w+)\s*(.*)', line)
        if match:
          is01, var, value = match.groups()
          if is01 and value:
            raise ValueError("invalid configuration file: {!r}\n"
              "line {}: #cmakedefine01 does not expect a value part".format(input, line_num))
          if is01:
            if environ.get(var):
              line = '#define {} 1\n'.format(var)
            else:
              line = '#define {} 0\n'.format(var)
          else:
            if environ.get(var):
              line = '#define {} {}\n'.format(var, value)
            else:
              line = '/* #undef {} */\n'.format(var)

        line = re.sub('@([A-z_0-9]+)@', replace_var, line)

        # Replace variable references with $X or ${X}
        def replace(match):
          value = environ.get(match.group(3), None)
          if value:
            return str(value)
          return ''
        line = string.Template.pattern.sub(replace, line)

        dst.write(line)

  return ConfigResult(output, output_dir)
