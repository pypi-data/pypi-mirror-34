# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.5.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class ViewsApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_data_view(self, container_id, body, **kwargs):  # noqa: E501
        """Add a new data view

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str container_id: The ID of the container, one of user, group or project (required)
        :param DataView body: (required)
        :param bool async: Perform the request asynchronously
        :return: CollectionNewOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_data_view_with_http_info(container_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_data_view_with_http_info(container_id, body, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def add_data_view_with_http_info(self, container_id, body, **kwargs):  # noqa: E501
        """Add a new data view

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str container_id: The ID of the container, one of user, group or project (required)
        :param DataView body: (required)
        :param bool async: Perform the request asynchronously
        :return: CollectionNewOutput
        """

        all_params = ['container_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_data_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `add_data_view`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_data_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['ContainerId'] = params['container_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = flywheel.models.DataView.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{ContainerId}/views', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionNewOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def delete_data_view(self, view_id, **kwargs):  # noqa: E501
        """Delete a data view

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async: Perform the request asynchronously
        :return: InlineResponse200
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_data_view_with_http_info(view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_data_view_with_http_info(view_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def delete_data_view_with_http_info(self, view_id, **kwargs):  # noqa: E501
        """Delete a data view

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async: Perform the request asynchronously
        :return: InlineResponse200
        """

        all_params = ['view_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_data_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `delete_data_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['ViewId'] = params['view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/views/{ViewId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_data_view(self, view_id, container_id, dest_file, **kwargs):  # noqa: E501
        """Execute a view, returning data in the preferred format.

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str format:
        :param str dest_file: Destination file path
        :param bool async: Perform the request asynchronously
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            (resp) = self.download_data_view_with_http_info(view_id, container_id, **kwargs)  # noqa: E501
            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()


    def download_data_view_with_http_info(self, view_id, container_id, **kwargs):  # noqa: E501
        """Execute a view, returning data in the preferred format.

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param str container_id: The target container for view execution (required)
        :param str format:
        :param bool async: Perform the request asynchronously
        :return: None
        """

        all_params = ['view_id', 'container_id', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_data_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `download_data_view`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `download_data_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['ViewId'] = params['view_id']  # noqa: E501

        query_params = []
        if 'container_id' in params:
            query_params.append(('containerId', params['container_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv', 'text/tab-separated-values'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/views/{ViewId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def execute_adhoc_data_view(self, container_id, body, dest_file, **kwargs):  # noqa: E501
        """Execute an ad-hoc view, returning data in the preferred format.

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param DataView body: (required)
        :param str format:
        :param str dest_file: Destination file path
        :param bool async: Perform the request asynchronously
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        kwargs['_preload_content'] = False
        # Stream response to file
        with open(dest_file, 'wb') as out_file:
            (resp) = self.execute_adhoc_data_view_with_http_info(container_id, body, **kwargs)  # noqa: E501
            if resp:
                try:
                    for chunk in resp.iter_content(chunk_size=65536):
                        out_file.write(chunk)
                finally:
                    resp.close()


    def execute_adhoc_data_view_with_http_info(self, container_id, body, **kwargs):  # noqa: E501
        """Execute an ad-hoc view, returning data in the preferred format.

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str container_id: The target container for view execution (required)
        :param DataView body: (required)
        :param str format:
        :param bool async: Perform the request asynchronously
        :return: None
        """

        all_params = ['container_id', 'body', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_adhoc_data_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `execute_adhoc_data_view`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_adhoc_data_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'container_id' in params:
            query_params.append(('containerId', params['container_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = flywheel.models.DataView.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv', 'text/tab-separated-values'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/views/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_data_view(self, view_id, **kwargs):  # noqa: E501
        """Return the view identified by ViewId

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async: Perform the request asynchronously
        :return: DataView
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_data_view_with_http_info(view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_view_with_http_info(view_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_data_view_with_http_info(self, view_id, **kwargs):  # noqa: E501
        """Return the view identified by ViewId

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param bool async: Perform the request asynchronously
        :return: DataView
        """

        all_params = ['view_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `get_data_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['ViewId'] = params['view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/views/{ViewId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataView',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_data_view_columns(self, **kwargs):  # noqa: E501
        """Return a list of all known column aliases for use in data views

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param bool async: Perform the request asynchronously
        :return: list[DataViewColumnAlias]
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_data_view_columns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_data_view_columns_with_http_info(**kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_data_view_columns_with_http_info(self, **kwargs):  # noqa: E501
        """Return a list of all known column aliases for use in data views

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param bool async: Perform the request asynchronously
        :return: list[DataViewColumnAlias]
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_view_columns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/views/columns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataViewColumnAlias]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_data_views(self, container_id, **kwargs):  # noqa: E501
        """Return a list of all views belonging to container

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str container_id: The ID of the container, one of user, group or project (required)
        :param bool async: Perform the request asynchronously
        :return: list[DataView]
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_data_views_with_http_info(container_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_views_with_http_info(container_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_data_views_with_http_info(self, container_id, **kwargs):  # noqa: E501
        """Return a list of all views belonging to container

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str container_id: The ID of the container, one of user, group or project (required)
        :param bool async: Perform the request asynchronously
        :return: list[DataView]
        """

        all_params = ['container_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_views" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_data_views`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['ContainerId'] = params['container_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{ContainerId}/views', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataView]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def modify_data_view(self, view_id, body, **kwargs):  # noqa: E501
        """Update the view identified by ViewId

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param DataView body: (required)
        :param bool async: Perform the request asynchronously
        :return: InlineResponse2001
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_data_view_with_http_info(view_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_data_view_with_http_info(view_id, body, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def modify_data_view_with_http_info(self, view_id, body, **kwargs):  # noqa: E501
        """Update the view identified by ViewId

        This is a BETA feature, and is not yet available.
        This method makes a synchronous HTTP request by default.

        :param str view_id: The ID of the view (required)
        :param DataView body: (required)
        :param bool async: Perform the request asynchronously
        :return: InlineResponse2001
        """

        all_params = ['view_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_data_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `modify_data_view`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_data_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['ViewId'] = params['view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = flywheel.models.DataView.positional_to_model(params['body'])
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/views/{ViewId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
