# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
A simplistic, non-parallel backend implemented in Python.
"""

project(module.name, '1.0-0')

import errno
import nr.fs
import os
import shlex
import shutil
import subprocess
import {CacheManager} from 'net.craftr.tool.cache'

from craftr.core.build import topo_sort
from craftr.utils import sh
from nr.stream import stream

# This cache maps the output filenames to the hash of the last build set.
build_log = CacheManager(path.join(session.build_root, 'craftr_build_log.{}.json'.format(session.build_variant)))


def _check_build_set(build_set):
  """
  Checks if the specified *build_set* actually has to be built.
  """

  outfiles = list(stream.concat(build_set.outputs.values()))

  h = build_set.compute_hash()
  for x in outfiles:
    if build_log.get(x) != h:
      return True

  # TODO: Depfile support

  infiles = list(stream.concat(build_set.inputs.values()))
  return nr.fs.compare_all_timestamps(infiles, outfiles)


def _build_set_done(build_set):
  h = build_set.compute_hash()
  for x in stream.concat(build_set.outputs.values()):
    build_log[x] = h


def _remove(p):
  if path.isdir(p):
    shutil.rmtree(p)
  else:
    os.remove(p)


def export():
  pass


def clean(build_sets, recursive, verbose):
  seen = set()
  queue = list(build_sets)
  files_to_remove = []
  while queue:
    bset = queue.pop()
    if bset in seen: continue
    files_to_remove += stream.concat(bset.outputs.values())
    if recursive:
      queue += bset.get_input_build_sets()
  print('Cleaning {} file(s) ...'.format(len(files_to_remove)))
  for x in files_to_remove:
    if verbose:
      print('  {}'.format(x), end='')
    try:
      _remove(x)
      if verbose:
        print(' [OK]')
    except OSError as exc:
      if verbose:
        print(' [{}]'.format(errno.errorcode.get(exc.errno, '???')))


def build(build_sets, verbose):
  if build_sets is None:
    build_sets = session

  try:
    for build_set in topo_sort(build_sets):
      if not build_set.operator:
        continue

      prefix = '[{}/{}]'.format(build_set.operator.target.id, build_set.operator.id)

      if not _check_build_set(build_set):
        print(prefix, 'SKIP')
        continue

      if build_set.description:
        print(prefix, build_set.get_description())
      else:
        print(prefix)
      for files in build_set.outputs.values():
        for filename in files:
          nr.fs.makedirs(nr.fs.dir(filename))

      commands = build_set.get_commands()
      with sh.override_environ(build_set.get_environ()):
        for cmd in commands:
          print('  $', ' '.join(shlex.quote(x) for x in cmd))
          if build_set.operator.syncio:
            stdin, stdout, stderr = None, None, None
          else:
            stdin, stdout, stderr = subprocess.PIPE, subprocess.PIPE, subprocess.STDOUT
          try:
            p = subprocess.Popen(cmd, cwd=build_set.get_cwd(),
              stdin=stdin, stdout=stdout, stderr=stderr)
          except OSError as exc:
            print()
            print(exc)
            returncode = 127
          else:
            out = p.communicate()
            returncode = p.returncode
            if (verbose or returncode != 0) and p.stdout:
              print()
              print(out[0].decode())
          if returncode != 0:
            print('\ncraftr: error: exited with return code {}'.format(returncode))
            return returncode

      _build_set_done(build_set)
  finally:
    build_log.save()

  return 0
