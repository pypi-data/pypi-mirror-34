Metadata-Version: 1.1
Name: luaparser
Version: 2.0.2
Summary: A lua parser in Python
Home-page: https://github.com/boolangery/py-lua-parser
Author: Eliott Dumeix
Author-email: eliott.dumeix@gmail.com
License: MIT
Download-URL: https://github.com/boolangery/py-lua-parser/archive/2.0.2.tar.gz
Description-Content-Type: UNKNOWN
Description: py-lua-parser
        ===============================================================================
        
        .. image:: https://travis-ci.org/boolangery/py-lua-parser.svg?branch=master
            :target: https://travis-ci.org/boolangery/py-lua-parser
        .. image:: https://img.shields.io/pypi/v/luaparser.svg
            :target: https://pypi.python.org/pypi/luaparser/
        .. image:: https://img.shields.io/pypi/pyversions/luaparser.svg
            :target: https://pypi.python.org/pypi/luaparser/
        
        A Lua parser and AST builder written in Python.
        
        
        Installation:
        ------------------------------------------------------------------------------
        
        The package can be installed through `pip`:
        
        .. code-block::
        
            $ python3.6 -m pip install luaparser
        
        It will install the shell command 'luaparser'.
        
        
        Options
        ------------------------------------------------------------------------------
        
        These are the command-line flags:
        
        Usage: luaparser [options] filename
        
        .. code-block::
        
            CLI Options:
              --version                     Show program's version number and exit
              -h, --help                    Show this help message and exit
              -s, --source                  Source passed in a string
              -x, --xml                     Set output format to xml
              -o, --output                  Write output to file
        
        
        Quickstart
        ==============================================================================
        
        Working on AST tree
        ------------------------------------------------------------------------------
        
        Minimal exemple:
        
        .. code-block:: python
        
            from luaparser import ast
        
            src = """
                local function sayHello()
                  print('hello world !')
                end
                sayHello()
                """
        
            tree = ast.parse(src)
            print(ast.toPrettyStr(tree))
        
        will display:
        
        .. code-block::
        
            Chunk: {} 1 key
              body: {} 1 key
                Block: {} 1 key
                  body: [] 2 items
                    0: {} 1 key
                      LocalFunction: {} 3 keys
                        name: {} 1 key
                          Name: {} 1 key
                            id: "sayHello"
                        args: [] 0 item
                        body: [] 1 item
                          0: {} 1 key
                            Call: {} 2 keys
                              func: {} 1 key
                                Name: {} 1 key
                                  id: "print"
                              args: [] 1 item
                                0: {} 1 key
                                  String: {} 1 key
                                    s: "hello world !"
                    1: {} 1 key
                      Call: {} 2 keys
                        func: {} 1 key
                          Name: {} 1 key
                            id: "sayHello"
                        args: [] 0 item
        
        
        You can run through the list of all the nodes in the tree using ast.walk(tree):
        
        .. code-block:: python
        
            from luaparser import ast
            from luaparser import astnodes
        
            tree = ast.parse("local foo = 'bar'")
        
            for node in ast.walk(tree):
                if isinstance(node, astnodes.Name):
                    process(node)
        
        
        Alternatively, you can use a node visitor:
        
        .. code-block:: python
        
            from luaparser import ast
            from luaparser import astnodes
        
            src = "local a = 42"
        
            class NumberVisitor(ast.ASTVisitor):
                def visit_Number(self, node):
                    print('Number value = ' + str(node.n))
        
            tree = ast.parse(src)
            NumberVisitor().visit(tree)
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
