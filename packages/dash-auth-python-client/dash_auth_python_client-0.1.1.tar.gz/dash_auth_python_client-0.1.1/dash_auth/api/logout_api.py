# coding: utf-8

"""
    Dash Auth API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dash_auth.api_client import ApiClient


class LogoutApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_logout_by_logout_id_get(self, logout_id, **kwargs):  # noqa: E501
        """api_logout_by_logout_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_logout_by_logout_id_get(logout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str logout_id: (required)
        :return: Logout
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_logout_by_logout_id_get_with_http_info(logout_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_logout_by_logout_id_get_with_http_info(logout_id, **kwargs)  # noqa: E501
            return data

    def api_logout_by_logout_id_get_with_http_info(self, logout_id, **kwargs):  # noqa: E501
        """api_logout_by_logout_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_logout_by_logout_id_get_with_http_info(logout_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str logout_id: (required)
        :return: Logout
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['logout_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_logout_by_logout_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'logout_id' is set
        if ('logout_id' not in params or
                params['logout_id'] is None):
            raise ValueError("Missing the required parameter `logout_id` when calling `api_logout_by_logout_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'logout_id' in params:
            path_params['logoutId'] = params['logout_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Logout/{logoutId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Logout',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
