# zopeexport.cfg: Zope-Exportfunktionalit채t verwenden
[transmogrifier]
pipeline =
    kickoff
    sitewalker
    uidextractor
    pathfixer
    orphansonly
    writer
    summary

[kickoff]
blueprint = collective.transmogrifier.sections.summary
count = false
print-sections = true

[sitewalker]
blueprint = visaplan.transmogrifier.sitewalker

[echo]
blueprint = visaplan.transmogrifier.echo

[uidextractor]
blueprint = visaplan.transmogrifier.uidextractor
inspect_fields =
    text
    description
    notes
    comment
    cooperation_information
    withdraw
    caption
    legend

[pathfixer]
# richtig: https://pypi.python.org/pypi/plone.app.transmogrifier#id1, falsch:
# https://pypi.python.org/pypi/plone.app.transmogrifier#pathfixer-section
blueprint = plone.app.transmogrifier.pathfixer
stripstring = /unitracc/
# ------------- [ Wert je nach Projekt unterschiedlich ... [
prependstring =
# ------------- ] ... Wert je nach Projekt unterschiedlich ]
## erst die Pfade ggf. geradeziehen ...

[orphansonly]
## ... und dann die "Waisen" ermitteln!
# Sortiert nach Verzeichnisreihenfolge und verwirft alle Objekte,
# die ohnehin schon (als Bestandteil ihrer "Eltern") exportiert werden:
blueprint = visaplan.transmogrifier.orphansonly

[writer]
blueprint = visaplan.transmogrifier.zopeexport
# der Standardkontext "tarball" erfordert spezielle Nachbehandlung
# durch aufrufenden Code:
context = directory
# relativer Pfad ab Instanzverzeichnis funktioniert:
path = var/export/
# ein weiteres Pfadsegment, nur sinnvoll f체r context=directory:
prefix = structure
# (macht keinen Sinn f체r Tarball-Exporte; von mogrify-Browser 체bersteuert)

[summary]
blueprint = collective.transmogrifier.sections.summary
count = true
print-sections = true

[EXPORTING]
blueprint = quintagroup.transmogrifier.logger
keys =
    _type
    _path

