# coding: utf-8

"""
    Factern API
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from factern_client.api_client import ApiClient


class FactsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_member(self, body, **kwargs):  # noqa: E501
        """Create Member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_member(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateMemberRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_member_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_member_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_member_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateMemberRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateMemberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createmember', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateMemberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bid(self, body, **kwargs):  # noqa: E501
        """Create Bid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bid(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateBidRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bid_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bid_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bid_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Bid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bid_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateBidRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bid`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createbid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_alias(self, body, **kwargs):  # noqa: E501
        """Create Alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_alias(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAliasRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateAliasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_alias_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_alias_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_alias_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_alias_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAliasRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateAliasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createalias', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAliasResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application(self, body, **kwargs):  # noqa: E501
        """Create Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_application(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateApplicationRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_application_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateApplicationRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createapplication', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateApplicationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_domain(self, body, **kwargs):  # noqa: E501
        """Create Domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_domain(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateDomainRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_domain_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_domain_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_domain_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_domain_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateDomainRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createdomain', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDomainResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_entity(self, body, **kwargs):  # noqa: E501
        """Create Entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_entity(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateEntityRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateEntityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_entity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_entity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_entity_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_entity_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateEntityRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateEntityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createentity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateEntityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_field(self, body, **kwargs):  # noqa: E501
        """Create Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_field(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateFieldRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateFieldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_field_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_field_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_field_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_field_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateFieldRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateFieldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createfield', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateFieldResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_filter(self, body, **kwargs):  # noqa: E501
        """Create Filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_filter(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateFilterRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_filter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_filter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_filter_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_filter_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateFilterRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createfilter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_group(self, body, **kwargs):  # noqa: E501
        """Create Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_group(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateGroupRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_group_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_group_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_group_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_group_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateGroupRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/creategroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_information(self, body, **kwargs):  # noqa: E501
        """Create Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_information(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateInformationRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateInformationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_information_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_information_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_information_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_information_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateInformationRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateInformationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createinformation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateInformationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_interface(self, body, **kwargs):  # noqa: E501
        """Create Interface  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_interface(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateInterfaceRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_interface_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_interface_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_interface_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Interface  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_interface_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateInterfaceRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createinterface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateInterfaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_label_list(self, body, **kwargs):  # noqa: E501
        """Create Label List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_label_list(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLabelListRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateLabelListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_label_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_label_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_label_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Label List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_label_list_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLabelListRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateLabelListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_label_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_label_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createlabellist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLabelListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_login(self, body, **kwargs):  # noqa: E501
        """Create Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_login(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoginRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_login_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_login_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_login_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_login_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoginRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createlogin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLoginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mirror(self, body, **kwargs):  # noqa: E501
        """Create Mirror  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_mirror(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateMirrorRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateMirrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_mirror_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mirror_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_mirror_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Mirror  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_mirror_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateMirrorRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateMirrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mirror" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_mirror`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createmirror', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateMirrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_price(self, body, **kwargs):  # noqa: E501
        """Create Price  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_price(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePriceRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreatePriceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_price_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_price_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_price_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Price  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_price_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePriceRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreatePriceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createprice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePriceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_scope(self, body, **kwargs):  # noqa: E501
        """Create Scope  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_scope(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateScopeRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateScopeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_scope_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_scope_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_scope_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Scope  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_scope_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateScopeRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateScopeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createscope', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateScopeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_statement(self, body, **kwargs):  # noqa: E501
        """Create Statement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_statement(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddStatementRequest body: (required)
        :param str login:
        :param str representing:
        :return: AddStatementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_statement_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_statement_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_statement_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Statement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_statement_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddStatementRequest body: (required)
        :param str login:
        :param str representing:
        :return: AddStatementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createstatement', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddStatementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template(self, body, **kwargs):  # noqa: E501
        """Create Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_template(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateTemplateRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_template_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateTemplateRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/createtemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTemplateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, body, **kwargs):  # noqa: E501
        """Deleting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteRequest body: (required)
        :param str login:
        :param str representing:
        :return: DeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """Deleting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteRequest body: (required)
        :param str login:
        :param str representing:
        :return: DeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node(self, body, **kwargs):  # noqa: E501
        """Delete Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_node(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_node_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_node_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_node_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/deletenode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def describe(self, body, **kwargs):  # noqa: E501
        """Describe  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.describe(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DescribeRequest body: (required)
        :param str login:
        :param str representing:
        :return: DescribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.describe_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.describe_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def describe_with_http_info(self, body, **kwargs):  # noqa: E501
        """Describe  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.describe_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DescribeRequest body: (required)
        :param str login:
        :param str representing:
        :return: DescribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `describe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/describe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DescribeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def history(self, body, **kwargs):  # noqa: E501
        """History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.history(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: NodeListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.history_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.history_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def history_with_http_info(self, body, **kwargs):  # noqa: E501
        """History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.history_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: NodeListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeListing',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def label(self, body, **kwargs):  # noqa: E501
        """Label a Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.label(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddLabelRequest body: (required)
        :param str login:
        :param str representing:
        :return: AddLabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.label_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.label_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def label_with_http_info(self, body, **kwargs):  # noqa: E501
        """Label a Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.label_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddLabelRequest body: (required)
        :param str login:
        :param str representing:
        :return: AddLabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `label`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/label', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddLabelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def obliterate(self, body, **kwargs):  # noqa: E501
        """Obliterating Information Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.obliterate(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.obliterate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.obliterate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def obliterate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Obliterating Information Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.obliterate_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method obliterate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `obliterate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/obliterate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission(self, body, **kwargs):  # noqa: E501
        """Create Permission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePermissionRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreatePermissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.permission_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.permission_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def permission_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Permission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePermissionRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreatePermissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/permission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePermissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read(self, body, **kwargs):  # noqa: E501
        """Reading  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReadRequest body: (required)
        :param str login:
        :param str representing:
        :return: ReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.read_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def read_with_http_info(self, body, **kwargs):  # noqa: E501
        """Reading  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReadRequest body: (required)
        :param str login:
        :param str representing:
        :return: ReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `read`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/read', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_information(self, body, **kwargs):  # noqa: E501
        """Read Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_information(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReadInformationRequest body: (required)
        :param str login:
        :param str representing:
        :return: ReadInformationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_information_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.read_information_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def read_information_with_http_info(self, body, **kwargs):  # noqa: E501
        """Read Information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_information_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReadInformationRequest body: (required)
        :param str login:
        :param str representing:
        :return: ReadInformationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `read_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/readinformation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadInformationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_information(self, body, **kwargs):  # noqa: E501
        """Replace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.replace_information(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReplaceFieldRequest body: (required)
        :param str login:
        :param str representing:
        :return: Information
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.replace_information_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_information_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def replace_information_with_http_info(self, body, **kwargs):  # noqa: E501
        """Replace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.replace_information_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ReplaceFieldRequest body: (required)
        :param str login:
        :param str representing:
        :return: Information
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/replaceinformation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Information',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_permission(self, body, **kwargs):  # noqa: E501
        """Request Permission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_permission(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.request_permission_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.request_permission_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def request_permission_with_http_info(self, body, **kwargs):  # noqa: E501
        """Request Permission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_permission_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NodeIdRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/requestpermission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_login(self, body, **kwargs):  # noqa: E501
        """Changing Login Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_login(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ResetLoginCredentialsRequest body: (required)
        :param str login:
        :param str representing:
        :return: ResetLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reset_login_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_login_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def reset_login_with_http_info(self, body, **kwargs):  # noqa: E501
        """Changing Login Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_login_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param ResetLoginCredentialsRequest body: (required)
        :param str login:
        :param str representing:
        :return: ResetLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reset_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/resetlogin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResetLoginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_alias(self, body, **kwargs):  # noqa: E501
        """Search For Alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_alias(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SearchAliasRequest body: (required)
        :param str login:
        :param str representing:
        :return: SearchAliasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_alias_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_alias_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def search_alias_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search For Alias  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_alias_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SearchAliasRequest body: (required)
        :param str login:
        :param str representing:
        :return: SearchAliasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/searchalias', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchAliasResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_entity(self, body, **kwargs):  # noqa: E501
        """Search For Entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_entity(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SearchEntityRequest body: (required)
        :param str login:
        :param str representing:
        :return: EntityListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_entity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_entity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def search_entity_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search For Entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_entity_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SearchEntityRequest body: (required)
        :param str login:
        :param str representing:
        :return: EntityListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/searchentity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settle_account(self, body, **kwargs):  # noqa: E501
        """Settle Account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.settle_account(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SettleAccountRequest body: (required)
        :param str login:
        :param str representing:
        :return: SettleAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.settle_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.settle_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def settle_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Settle Account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.settle_account_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SettleAccountRequest body: (required)
        :param str login:
        :param str representing:
        :return: SettleAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settle_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `settle_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/settleaccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettleAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application(self, body, **kwargs):  # noqa: E501
        """Resetting Application Secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_application(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateApplicationRequest body: (required)
        :param str login:
        :param str representing:
        :return: UpdateApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """Resetting Application Secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_application_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateApplicationRequest body: (required)
        :param str login:
        :param str representing:
        :return: UpdateApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/updateapplication', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateApplicationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_status(self, body, **kwargs):  # noqa: E501
        """Enabling/Disabling Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_status(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateStatusRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """Enabling/Disabling Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_status_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateStatusRequest body: (required)
        :param str login:
        :param str representing:
        :return: StandardNodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/updatestatus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardNodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def watch(self, body, **kwargs):  # noqa: E501
        """Create Watch Trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.watch(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateWatchRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateWatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.watch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.watch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def watch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Watch Trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.watch_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateWatchRequest body: (required)
        :param str login:
        :param str representing:
        :return: CreateWatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `watch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/watch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateWatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def write(self, body, **kwargs):  # noqa: E501
        """Writing by Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.write(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param WriteRequest body: (required)
        :param str login:
        :param str representing:
        :return: WriteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.write_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.write_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def write_with_http_info(self, body, **kwargs):  # noqa: E501
        """Writing by Template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.write_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param WriteRequest body: (required)
        :param str login:
        :param str representing:
        :return: WriteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'login', 'representing']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method write" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `write`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'representing' in params:
            query_params.append(('representing', params['representing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/write', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WriteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
