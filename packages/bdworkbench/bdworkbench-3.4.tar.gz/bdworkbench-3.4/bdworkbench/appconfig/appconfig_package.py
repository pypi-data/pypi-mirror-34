#
# Copyright (c) 2016 BlueData Software, Inc.
#

from __future__ import print_function
from .. import SubCommand
from ..inmem_store import SIMPLESETUP_DICT
from ..utils.config import KEY_STAGEDIR, KEY_APPCONFIGDIR, SECTION_WB
from ..utils.misc import checkConfigApiVersion

import os
import tarfile

class AppconfigPackage(SubCommand):
    """

    """
    def __init__(self, config, inmemStore, cmdObj):
        SubCommand.__init__(self, config, inmemStore, cmdObj, 'package')

    def getSubcmdDescripton(self):
        return 'Package the appconfig directory under development.'

    def populateParserArgs(self, subparser):
        subparser.add_argument('-d', '--dir', metavar='PACKAGE_DIR', type=str,
                               help='A directory where the appconfig scripts '
                                    'developed are located. The directory name '
                                    'is used as the package name. If this '
                                    'argument is not specified, the appconfig '
                                    'that was autogenerated is packaged.')
        subparser.add_argument('--configapi', metavar='CONFIG_API_VERSION',
                               dest='configapi', type=int, default=None,
                               help='The config api version used by the '
                               'appconfig package.')

    def run(self, pArgs):
        stagingDir = self.config.get(SECTION_WB, KEY_STAGEDIR)

        if pArgs.dir:
            name = os.path.basename(pArgs.dir) + ".tgz"
            configapi = pArgs.configapi

            tarOutput = os.path.join(stagingDir, name)
            self._package_tgz(tarOutput, os.path.abspath(pArgs.dir))
        else:
            setupDict = self.inmemStore.getDict(SIMPLESETUP_DICT)
            if setupDict.has_key("autogen"):
                autogen = setupDict["autogen"]
                name = autogen["name"] if autogen.has_key("name") else None
                dirpath = autogen["package"] if autogen.has_key("package") else\
                                    None
                configapi = autogen["configapi"] if autogen.has_key("configapi") else\
                                    None

                if (not name) or (not dirpath) or (configapi == None):
                    print("ERROR: Appconfig auto-generation must be completed "
                          "before invoking the package command. Or provide a "
                          "preexisting directory to package.")
                    return False
                else:
                    tarOutput = os.path.join(stagingDir, name)
                    self._package_tgz(tarOutput, os.path.abspath(dirpath))
            else:
                print("ERROR: Appconfig should either be autogenerated or a "
                      "valid preexisting directory must be specified.")
                return False

        if configapi == None:
            ret = self.workbench.onecmd("appconfig file --filepath %s" %(tarOutput))
        else:
            checkConfigApiVersion(configapi)

            ret = self.workbench.onecmd("appconfig file --filepath %s --configapi %s"
                                                %(tarOutput, configapi))

        if ret:
            print("Appconfig package saved at: %s" %(tarOutput))
            return True
        else:
            return False

    def complete(self, text, argsList):
        return []

    def _package_tgz(self, destFile, toPackDir):
        """

        """
        dirpath = os.path.dirname(destFile)
        if not os.path.exists(dirpath):
            os.makedirs(dirpath)

        try:
            tar = tarfile.open(destFile, "w:gz")
            tar.add(toPackDir, os.path.basename(toPackDir))
            tar.close()

            return True
        except Exception as e:
            if os.path.exists(destFile):
                os.remove(destFile)

            print("ERROR: Failed to create appconfig package: ", e)
            return False
