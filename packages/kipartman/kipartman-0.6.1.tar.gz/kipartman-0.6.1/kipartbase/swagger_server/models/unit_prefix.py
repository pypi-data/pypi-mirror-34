# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UnitPrefix(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, symbol=None, power=None):
        """
        UnitPrefix - a model defined in Swagger

        :param id: The id of this UnitPrefix.
        :type id: int
        :param name: The name of this UnitPrefix.
        :type name: str
        :param symbol: The symbol of this UnitPrefix.
        :type symbol: str
        :param power: The power of this UnitPrefix.
        :type power: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'symbol': str,
            'power': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'symbol': 'symbol',
            'power': 'power'
        }

        self._id = id
        self._name = name
        self._symbol = symbol
        self._power = power

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnitPrefix of this UnitPrefix.
        :rtype: UnitPrefix
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this UnitPrefix.

        :return: The id of this UnitPrefix.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UnitPrefix.

        :param id: The id of this UnitPrefix.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this UnitPrefix.

        :return: The name of this UnitPrefix.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UnitPrefix.

        :param name: The name of this UnitPrefix.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def symbol(self):
        """
        Gets the symbol of this UnitPrefix.

        :return: The symbol of this UnitPrefix.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this UnitPrefix.

        :param symbol: The symbol of this UnitPrefix.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")

        self._symbol = symbol

    @property
    def power(self):
        """
        Gets the power of this UnitPrefix.

        :return: The power of this UnitPrefix.
        :rtype: str
        """
        return self._power

    @power.setter
    def power(self, power):
        """
        Sets the power of this UnitPrefix.

        :param power: The power of this UnitPrefix.
        :type power: str
        """
        if power is None:
            raise ValueError("Invalid value for `power`, must not be `None`")

        self._power = power

