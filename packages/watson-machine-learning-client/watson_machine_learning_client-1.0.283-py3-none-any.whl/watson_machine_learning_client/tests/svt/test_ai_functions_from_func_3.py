import unittest

from watson_machine_learning_client.log_util import get_logger
from preparation_and_cleaning import *
from models_preparation import *


class TestAIFunction(unittest.TestCase):
    runtime_uid = None
    deployment_uid = None
    function_uid = None
    scoring_url = None
    logger = get_logger(__name__)

    @classmethod
    def setUpClass(self):
        TestAIFunction.logger.info("Service Instance: setting up credentials")

        self.wml_credentials = get_wml_credentials()
        self.client = get_client()

        self.function_name = 'simplest AI function'
        self.deployment_name = "Test deployment"

    def test_01_service_instance_details(self):
        TestAIFunction.logger.info("Check client ...")
        self.assertTrue(self.client.__class__.__name__ == 'WatsonMachineLearningAPIClient')

        TestAIFunction.logger.info("Getting instance details ...")
        details = self.client.service_instance.get_details()
        TestAIFunction.logger.debug(details)

        self.assertTrue("published_models" in str(details))
        self.assertEqual(type(details), dict)

    def test_02_create_ai_function(self):

        self.client.repository.FunctionMetaNames.show()

        meta = {
            self.client._runtimes.ConfigurationMetaNames.NAME: "runtime_spec_python_3.5",
            self.client._runtimes.ConfigurationMetaNames.DESCRIPTION: "runtime spec created for custom libraries",
            self.client._runtimes.ConfigurationMetaNames.PLATFORM: {
                "name": "python",
                "version": "3.5"
            }
        }
        runtime_details = self.client._runtimes.create(meta)
        TestAIFunction.runtime_uid = self.client._runtimes.get_uid(runtime_details)
        runtime_url = self.client._runtimes.get_url(runtime_details)

        function_props = {
            self.client.repository.FunctionMetaNames.NAME: 'simplest AI function',
            self.client.repository.FunctionMetaNames.TYPE: 'python',
            self.client.repository.FunctionMetaNames.DESCRIPTION: 'desc',
            self.client.repository.FunctionMetaNames.RUNTIME_URL: runtime_url,
            self.client.repository.FunctionMetaNames.TAGS: [{"value": "ProjectA", "description": "Functions created for ProjectA"}],
            self.client.repository.FunctionMetaNames.INPUT_DATA_SCHEMA: {
              "type": "struct",
              "fields": [
                {
                  "name": "x",
                  "type": "double",
                  "nullable": False,
                  "metadata": {}
                },
                {
                  "name": "y",
                  "type": "double",
                  "nullable": False,
                  "metadata": {}
                }
              ]
            },
            self.client.repository.FunctionMetaNames.OUTPUT_DATA_SCHEMA: {
              "type": "struct",
              "fields": [
                {
                  "name": "multiplication",
                  "type": "double",
                  "nullable": False,
                  "metadata": {}
                }
              ]
            }
        }

        def score(payload):
            """
                Example:
                {"fields": ["Customer_Service"],
                 "values": [["service was good."],["The woman at the counter was friendly and tried to accommodate me as best she could. The counter was close to the terminal and the whole thing was quick and expedient."],["I do not  understand why I have to pay additional fee if vehicle is returned without a full tank."]]}
            """
            import pickle
            import base64
            from numpy import array

            class TokenizerWithPadding():
                def __init__(self, sentences):
                    """Initialize tokenizer object with padding"""
                    from keras.preprocessing.text import Tokenizer

                    self.max_words = 1000
                    self.max_features = 50
                    self.tokenizer = Tokenizer(num_words=self.max_words, split=' ')
                    self.tokenizer.fit_on_texts(sentences)

                def transform(self, sentences):
                    """Preprocess data"""
                    from keras.preprocessing.sequence import pad_sequences

                    X = self.tokenizer.texts_to_sequences(sentences)

                    return pad_sequences(X, maxlen=self.max_features)

            padtokenizer = "gANjYnVpbHRpbnMKZ2V0YXR0cgpxAGNfX21haW5fXwpUb2tlbml6ZXJXaXRoUGFkZGluZwpxASmBcQJ9cQMoWAkAAABtYXhfd29yZHNxBE3oA1gMAAAAbWF4X2ZlYXR1cmVzcQVLMlgJAAAAdG9rZW5pemVycQZja2VyYXMucHJlcHJvY2Vzc2luZy50ZXh0ClRva2VuaXplcgpxBymBcQh9cQkoWAkAAABvb3ZfdG9rZW5xCk5YBwAAAGZpbHRlcnNxC1ghAAAAISIjJCUmKCkqKywtLi86Ozw9Pj9AW1xdXl9ge3x9fgkKcQxYCQAAAHdvcmRfZG9jc3ENfXEOKFgOAAAAcHJvZmVzc2lvbmFsbHlxD0sBWAQAAABmYWNlcRBLAVgDAAAAd2FzcRFLS1gDAAAAaG93cRJLAlgDAAAAZm9ycRNLHlgIAAAAdmlzaXRpbmdxFEsBWAUAAABjb3VsZHEVSwdYBgAAAHBsZWFzZXEWSwFYCQAAAG91dGxpbmluZ3EXSwFYBgAAAGJldHRlcnEYSwJYBAAAAGZ1c3NxGUsBWAQAAAB0aGVucRpLBFgIAAAAbG9jYXRpb25xG0sDWAYAAABzcG9rZW5xHEsBWAUAAABzdGFydHEdSwJYBAAAAGNvc3RxHksEWAIAAABzb3EfSwNYBwAAAGFkdmFuY2VxIEsBWAIAAABhc3EhSwZYAwAAAGFueXEiSwZYBAAAAHVzZWRxI0sCWAYAAABjbG9zZWRxJEsCWAQAAABrZXlzcSVLAVgGAAAAY291cG9ucSZLAlgFAAAAaGVmdHlxJ0sCWAYAAABzb2x2ZWRxKEsBWAkAAAByZWZlcmVuY2VxKUsBWAkAAABkZWNpc2lvbnNxKksBWAcAAAB1c3VhbGx5cStLBFgCAAAAYnlxLEsDWAYAAABuZWVkZWRxLUsEWAcAAABzYXRpc2Z5cS5LAVgKAAAAb3ZlcndvcmtlZHEvSwFYCAAAAGFpcnBvcnRzcTBLAVgEAAAAd2lzaHExSwFYBAAAAGZlZXNxMksCWAMAAABkaWRxM0sQWAQAAABhYmxlcTRLBVgEAAAAcGVha3E1SwFYBgAAAHBpY2t1cHE2SwFYBAAAAHdvcmtxN0sCWAoAAAB1bml2ZXJzaXR5cThLAVgIAAAAaW5zaXN0ZWRxOUsBWAkAAABvYm5veGlvdXNxOksBWAQAAABsYXRlcTtLA1gGAAAAc3R1cGlkcTxLAVgHAAAAbGltaXRlZHE9SwFYBwAAAHdpbGxpbmdxPksCWAMAAABoZXJxP0sCWAsAAABhdHRyYWN0aW9uc3FASwFYBQAAAGhhcHB5cUFLAlgDAAAAbmV3cUJLAVgEAAAAd2FpdHFDSwZYCAAAAGZyaWVuZGx5cURLDFgEAAAAcnVkZXFFSwJYBwAAAG5vdGhpbmdxRksDWAMAAABub3RxR0scWAcAAABiZWxpZXZlcUhLAVgGAAAAc2V2ZXJlcUlLAVgGAAAAbm90aW5ncUpLAVgDAAAAZ290cUtLCVgEAAAAdG9va3FMSwZYCAAAAHByb2JsZW1zcU1LCFgLAAAAaW5mb3JtYXRpb25xTksBWAQAAABuZWVkcU9LA1gJAAAAcmVjZXB0aXZlcVBLAVgHAAAAd2hldGhlcnFRSwFYCAAAAGluY2x1ZGVkcVJLAVgJAAAAb2J2aW91c2x5cVNLAVgIAAAAYmFja3NlYXRxVEsBWAMAAABtYXBxVUsBWAgAAABhbnN3ZXJlZHFWSwFYCwAAAHJlc2VydmF0aW9ucVdLA1gCAAAAbWVxWEsaWAYAAABkcml2ZW5xWUsBWAQAAAB0b2xkcVpLA1gEAAAAdGFua3FbSwVYBwAAAGFueW1vcmVxXEsBWAYAAAByYXRoZXJxXUsCWAQAAABoYWlycV5LAlgDAAAAdG9vcV9LA1gFAAAAZm9sa3NxYEsBWAcAAABwcm9ibGVtcWFLA1gHAAAAc2h1dHRsZXFiSwFYAgAAAHVzcWNLDVgEAAAAbWluZXFkSwFYBAAAAGF3YXlxZUsBWAIAAAB1cHFmSwhYCgAAAGV4cGVyaWVuY2VxZ0sLWAQAAAB0aGFucWhLBFgHAAAAaGFzc2xlc3FpSwFYAwAAAGNhbnFqSwFYCgAAAGV2ZXJ5dGhpbmdxa0sEWAUAAABhc2tlZHFsSwJYBwAAAGFscmVhZHlxbUsBWAUAAABwcm9vZnFuSwFYCQAAAGN1c3RvbWVyc3FvSwJYBQAAAHdoaWxlcXBLAVgHAAAAY29tcGFueXFxSw5YBQAAAGdyZWF0cXJLB1gEAAAAdGh1c3FzSwFYAwAAAG91cnF0SwlYAQAAAGNxdUsBWAYAAABlaXRoZXJxdksBWAMAAABhZGRxd0sBWAUA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TT4BSwFNPwFLAU1AAUsBTUEBSwFNQgFLAU1DAUsBTUQBSwFNRQFLAU1GAUsBTUcBSwFNSAFLAU1JAUsBTUoBSwFNSwFLAU1MAUsBTU0BSwFNTgFLAU1PAUsBTVABSwFNUQFLAU1SAUsBTVMBSwFNVAFLAU1VAUsBTVYBSwFNVwFLAU1YAUsBTVkBSwFNWgFLAU1bAUsBTVwBSwFNXQFLAU1eAUsBTV8BSwFNYAFLAU1hAUsBTWIBSwFNYwFLAU1kAUsBTWUBSwFNZgFLAU1nAUsBTWgBSwFNaQFLAU1qAUsBTWsBSwFNbAFLAU1tAUsBTW4BSwFNbwFLAU1wAUsBTXEBSwFNcgFLAU1zAUsBTXQBSwFNdQFLAU12AUsBTXcBSwFNeAFLAU15AUsBTXoBSwFNewFLAU18AUsBTX0BSwFNfgFLAU1/AUsBTYABSwFNgQFLAU2CAUsBTYMBSwFNhAFLAU2FAUsBTYYBSwFNhwFLAU2IAUsBTYkBSwFNigFLAU2LAUsBTYwBSwFNjQFLAU2OAUsBTY8BSwFNkAFLAU2RAUsBTZIBSwFNkwFLAU2UAUsBTZUBSwFNlgFLAU2XAUsBTZgBSwFNmQFLAU2aAUsBTZsBSwFNnAFLAU2dAUsBTZ4BSwFNnwFLAU2gAUsBTaEBSwFNogFLAU2jAUsBTaQBSwFNpQFLAU2mAUsBTacBSwFNqAFLAU2pAUsBTaoBSwFNqwFLAU2sAUsBTa0BSwFNrgFLAU2vAUsBTbABSwFNsQFLAU2yAUsBTbMBSwFNtAFLAU21AUsBTbYBSwFNtwFLAU24AUsBTbkBSwFNugFLAU27AUsBTbwBSwFNvQFLAU2+AUsBTb8BSwFNwAFLAU3BAUsBTcIBSwFNwwFLAU3EAUsBTcUBSwFNxgFLAU3HAUsBTcgBSwFNyQFLAU3KAUsBTcsBSwFNzAFLAU3NAUsBTc4BSwFNzwFLAU3QAUsBTdEBSwFN0gFLAU3TAUsBTdQBSwFN1QFLAU3WAUsBTdcBSwFN2AFLAU3ZAUsBTdoBSwFN2wFLAU3cAUsBTd0BSwFN3gFLAU3fAUsBTeABSwFN4QFLAU3iAUsBTeMBSwFN5AFLAU3lAUsBTeYBSwFN5wFLAU3oAUsBTekBSwFN6gFLAU3rAUsBTewBSwFN7QFLAU3uAUsBTe8BSwFN8AFLAU3xAUsBTfIBSwFN8wFLAU30AUsBTfUBSwFN9gFLAU33AUsBTfgBSwFN+QFLAU36AUsBTfsBSwFN/AFLAU39AUsBTf4BSwFN/wFLAU0AAksBTQECSwFNAgJLAU0DAksBTQQCSwFNBQJLAU0GAksBTQcCSwFNCAJLAU0JAksBTQoCSwFNCwJLAU0MAksBTQ0CSwFNDgJLAU0PAksBTRACSwFNEQJLAU0SAksBTRMCSwFNFAJLAU0VAksBTRYCSwFNFwJLAU0YAksBTRkCSwFNGgJLAU0bAksBTRwCSwFNHQJLAU0eAksBTR8CSwFNIAJLAU0hAksBTSICSwFNIwJLAU0kAksBTSUCSwFNJgJLAU0nAksBTSgCSwFNKQJLAU0qAksBTSsCSwFNLAJLAU0tAksBTS4CSwFNLwJLAU0wAksBTTECSwFNMgJLAU0zAksBTTQCSwFNNQJLAU02AksBTTcCSwFNOAJLAU05AksBTToCSwFNOwJLAU08AksBTT0CSwFNPgJLAU0/AksBTUACSwFNQQJLAU1CAksBTUMCSwFNRAJLAU1FAksBTUYCSwFNRwJLAU1IAksBTUkCSwFNSgJLAU1LAksBTUwCSwFNTQJLAU1OAksBTU8CSwFNUAJLAU1RAksBTVICSwFNUwJLAU1UAksBTVUCSwFNVgJLAU1XAksBTVgCSwFNWQJLAU1aAksBTVsCSwFNXAJLAU1dAksBTV4CSwFNXwJLAU1gAksBTWECSwFNYgJLAU1jAksBTWQCSwFNZQJLAU1mAksBTWcCSwFNaAJLAU1pAksBTWoCSwFNawJLAU1sAksBTW0CSwFNbgJLAU1vAksBTXACSwFNcQJLAU1yAksBTXMCSwFNdAJLAU11AksBTXYCSwFNdwJLAU14AksBTXkCSwFNegJLAU17AksBTXwCSwFNfQJLAU1+AksBTX8CSwFNgAJLAU2BAksBTYICSwFNgwJLAU2EAksBTYUCSwFNhgJLAU2HAksBTYgCSwFNiQJLAU2KAksBTYsCSwFNjAJLAU2NAksBTY4CSwFNjwJLAU2QAksBTZECSwFNkgJLAU2TAksBTZQCSwFNlQJLAU2WAksBTZcCSwFNmAJLAU2ZAksBTZoCSwFNmwJLAU2cAksBTZ0CSwFNngJLAU2fAksBTaACSwFNoQJLAU2iAksBTaMCSwFNpAJLAU2lAksB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ajQBAABNBgFqNQEAAE0KAWo2AQAAS/5ot02FAWo4AQAATakBajkBAABN1QFqOgEAAEvvajsBAABLYmo8AQAATacBaj0BAABL4Go+AQAATYEBaj8BAABLz2pAAQAASw5o6kvGakIBAABNhgFqQwEAAEuHakQBAABLjmpFAQAATbECakYBAABLyGpHAQAATeoBakgBAABLrmp8AQAAS+tqSgEAAE10AmpLAQAATXICakwBAABNQAFqTQEAAE3UAWpOAQAATXACak8BAABL7WhLSzVqUQEAAE2XAWpSAQAATTgBanUBAABLcWpUAQAATYYCalUBAABNEQJqVgEAAE2hAmpXAQAATXYBalgBAABL6moJAgAATXoCaloBAABNIAJqWwEAAE2IAmpcAQAATTICal0BAABNHwJqeQIAAEtnal8BAABNYwJqYAEAAE29AWphAQAAS41qYwEAAE3wAWpkAQAATQECamUBAABNCAFqZgEAAE0OAmpnAQAATTkCamgBAABNMAFqaQEAAE2tAWpqAQAATTgCamsBAABNoQFqbAEAAEt8am0BAABNqAFqbgEAAE1zAmpvAQAAS6RqcAEAAEuranEBAABNYQJqcgEAAE2bAmpzAQAATRABanQBAABNWgFqdgEAAEuCancBAABLBWp4AQAATWMBankBAABLfWp6AQAATRgCansBAABLLGpNAgAAS81oVU09AWp+AQAATYoBan8BAABNYAFqgAEAAEtmaoEBAABNPwFqggEAAEv5aoMBAABN4QFqhAEAAEskaoUBAABNDQFqhgEAAE1RAWqIAQAATUMCaokBAABNjgFqigEAAEvAaosBAABNMAJqjAEAAE2lAWqNAQAATScBao4BAABNUgJqjwEAAE2HAWqQAQAATU8BaPJNLAFqkgEAAE0cAWqTAQAAS+5qlAEAAE11AWqVAQAASypqlgEAAEtHapcBAABNEwJqmAEAAE0nAmqZAQAAS+JqmgEAAE1xAmqbAQAATV4CapwBAABLkWqdAQAASylqngEAAE3fAWqfAQAAS6xqoAEAAEtDaqEBAABNbAJqogEAAE1qAmqjAQAAS09qpAEAAEsxaqUBAABL5GqmAQAATYcCaqcBAABNjwJqqQEAAE0xAWqqAQAATSQBaqsBAABNoAFqrAEAAE2vAWqtAQAATQgCaq4BAABL02qwAQAAS9xqsQEAAE39AWqyAQAATTMBarMBAABL32q0AQAATRACarYBAABNzAFqtwEAAEtUargBAABNKwFquQEAAEvCavQBAABNLwFquwEAAEtlarwBAABLN2q9AQAATesBar4BAABNbQFqvwEAAEv0akEBAABNfAJqwQEAAE2cAmrCAQAATQcBasMBAABLe2rEAQAATTIBasUBAABNtAJqxgEAAE1JAmrHAQAAS7NqyAEAAE2sAmrJAQAATZICasoBAABNowJqywEAAEu9aswBAABNKQFqzQEAAE0aAmrOAQAASxZqzwEAAE1fAWrQAQAAS3Bq0QEAAE1MAWrSAQAAS11q0wEAAEuoatQBAABLH2rVAQAATToBatYBAABL82rXAQAATWcBatgBAABNdQJq2QEAAEtTatoBAABNSAFq2wEAAE1NAWrcAQAAS/toEEvJat0BAABLoGreAQAAS0lq3wEAAE0DAmrgAQAATQQCauEBAABNkwJoT0u5auMBAABNPAJq5AEAAE1lAmrlAQAATXIBauYBAABNGQFq5wEAAEutaugBAABN0AFq6QEAAEs+auoBAABNXAJq6wEAAEt/auwBAABLzmrtAQAATY0Cau4BAABNfwFq7wEAAE2eAWrwAQAASx1q8QEAAE3kAWryAQAATa4CavMBAABNkgFqugEAAE1PAmj5TT4BavYBAABNKwJq9wEAAEvxavgBAABNnwFq+QEAAEsXavoBAABLIGr7AQAATZwBavwBAABNRgJqEQEAAE0dAWr+AQAAS4lq/wEAAE1ZAWoAAgAATbIBagECAABNzgFqAgIAAEtEagMCAABLn2oEAgAATToCagYCAABNYgFqBwIAAEvZaggCAABLxWpZAQAAS69qCgIAAEvLagsCAABNDwJqKAIAAE0XAWoNAgAAS0JqDgIAAEsPaikCAABLpWoQAgAATb8BahECAABLd2oSAgAATckBahMCAABLbWoUAgAASy5qFQIAAEv2ahYCAABNSwFqFwIAAE14AWoYAgAAS2xqGgIAAEuyahsCAABN2gFqHAIAAE0lAmodAgAAS5lqHgIAAEujah8CAABL5mpTAQAAS7hqIAIAAE1BAmohAgAATU0CaiICAABNwQFqIwIAAE1RAmokAgAATZgCaiUCAABLxGomAgAAS1lqJwIAAE2dAmoMAgAATRUBag8CAABL6GoqAgAATfwBaisCAABLeGosAgAATaYBai8CAABLg2owAgAATekBajECAABNpAFqMgIAAE3EAWpHAgAAS6dqNAIAAE1sAWo1AgAATRICajYCAABL9Wo3AgAATawBajgCAABNuwJqOQIAAE0qAWo6AgAATaUCajsCAABN5gFqPAIAAE2mAmo9AgAATbABaj4CAABNAgFqPwIAAE1rAWpAAgAATZABaqsCAABLtWpCAgAATQsBakMCAABNvgFqRAIAAE2XAmpFAgAATfQBakYCAABNRQFqLgIAAEtXakgCAABL/WotAgAATSgCakoCAABNlQJqSwIAAE22AWpMAgAATYMCak4CAABLW2pPAgAAS6ZqvAIAAEuLalECAABLTGpSAgAATVgBalMCAABN3AFqVAIAAE3xAWpVAgAATZEBalYCAABNPAFqVwIAAEvUalgCAABNigJqWQIAAE25AmpaAgAATWsCalsCAABNhAJqXAIAAEuqal0CAABL+mpeAgAATY8Bal8CAABL+GpgAgAATRsCamECAABNegFqYgIAAE1QAmpjAgAATQwCamQCAABNXQJqZQIAAE2FAmpmAgAATTMCamcCAABNJAJowU26AWppAgAATTUCamoCAABNsgJqaAIAAE0eAmprAgAAS2pqbAIAAEtOam0CAABNaAJqbgIAAEu2am8CAABNbgJqcAIAAE1mAmpxAgAAS9hqcgIAAE3PAWpzAgAATUUCanQCAABNrgFqdQIAAEvwanYCAABLCWp3AgAATQ0CangCAABNsAJqegIAAEvlansCAABNYAJqfAIAAEtran0CAABNpAJqfgIAAEv8an8CAABNlAJqgAIAAE1uAWqBAgAAS7BqggIAAE2IAWo3AQAASw1qhAIAAEsGaoUCAABN2AFqhgIAAE0aAWqHAgAATXkCaogCAABNogJqiQIAAE0UAmqKAgAASyVqiwIAAEu+aowCAABNoAJqjQIAAE2zAmqOAgAATYICal4BAABNlgJqkAIAAEvaapECAABL52qSAgAAS01qkwIAAE03AWqPAgAASwNqlAIAAE28AWqVAgAATYwBapYCAABNtwFqxAIAAE0eAWqXAgAATR0CapgCAABL7GqZAgAATdkBapoCAABLc2qbAgAATcABapwCAABLXmqdAgAATbgCarUBAABNRgFqnwIAAE2WAWqgAgAASx5qoQIAAE2rAWqiAgAATRQBaqMCAABNIgFqwAEAAE0YAWqlAgAATVUBaq8BAABL0GqnAgAAS7RqqAIAAE0hAmqpAgAASydqqgIAAE2VAWpBAgAAS91qrAIAAE0cAmoQAQAATaoCaq0CAABNIAFqrgIAAE3yAWqvAgAAS6FqsAIAAE1XAWqxAgAAS5dqsgIAAE0pAmqzAgAATVYCajMCAABNeQFqtAIAAE1cAWq1AgAATcYBarcCAABN+AFquAIAAEtFarkCAABNSwJqugIAAE19Amq7AgAATVABarYCAABNlAFqvQIAAE17Amq+AgAATaoBaIZN0gFqGQIAAE1lAWrBAgAATXYCasICAABLYWrDAgAATXsBagUCAABNEgFqpgIAAE21AWrGAgAATVUCascCAABNEwFqyAIAAE1OAWrJAgAATVgCasoCAABNjgJ1WAUAAABsb3dlcnLUAgAAiFgLAAAAd29yZF9jb3VudHNy1QIAAGNjb2xsZWN0aW9ucwpPcmRlcmVkRGljdApy1gIAAClSctcCAAAoanYCAABLMmgRS3JqUgEAAEsBag4CAABLIGhLSwlo7EuKancBAABLUWqgAQAASwdqTgIAAEsFaqkCAABLDGoCAgAASwdo6ksCaJ5LAmjFSz5oM0sgaEdLMmo3AQAASyFo0EtpaKtLCWikSwtoWEsdao8CAABLbWjYS0Roh0sMaoQCAABLTGoUAgAASwtqowEAAEsGaItLLmhnSwtqnQEAAEsMaLVLFWhDSwZoE0sgapoCAABLBGhmSwhqRgEAAEsCargCAABLB2hySwdqlgEAAEsHahkBAABLIGjHSwNoEEsCaL1LB2qcAQAASwNozUsBatUBAABLAWiVSwRqzgEAAEsdaGFLA2jISwZoV0sDav0BAABLBGgfSwNop0sCaOJLA2hMSwZoX0sDarwBAABLCWoIAQAASxJqsQIAAEsDaHtLAWr5AQAASx1qVgIAAEsBaIpLA2hVSwFqKgEAAEsXaHRLCmhrSwRq8AEAAEsSatkBAABLBmjeSwVo+UsBaKpLCWq3AQAASwZqCgIAAEsCaoEBAABLAWqkAQAASwpoo0sfaE1LCGjkSwho0ksCak0CAABLAmpMAQAASwFqHQIAAEsDauwBAABLAmjcSwFqPwEAAEsCaq8BAABLAmoRAgAASwRo1UslatIBAABLBWoLAQAASwFqMgEAAEsBaGNLDmjDSwNoZUsBaBhLAmj7SwpqRgIAAEsBarUBAABLAWqVAQAASwxojUsDaqACAABLEWjuSxlocUsPaIxLAmreAQAASwdqwAIAAEsBaPZLB2raAQAASwFoc0sBaq4BAABLAmqcAgAASwVoREsMaukBAABLCGi0SwZqVwIAAEsCahMBAABLAWoUAQAASwNqFgIAAEsBaKZLAmrRAQAASwFoFUsHah4BAABLBWh5SwVoN0sCaN9LAmrbAQAASwFqKwIAAEsEanECAABLAmiSSwRqBwIAAEsCaoMCAABLCGqQAgAASwJqwgIAAEsFaBpLBGrIAgAASwFon0sCaIlLHmrDAQAASwRqsAEAAEsCapABAABLAWq7AgAASwFo40sIakECAABLAmqGAQAASwFo10sBajsBAABLBWolAQAASwFo4UsBagYBAABLBWjMSwVoI0sCaKxLGmrUAQAASxFqbAEAAEsEaJpLA2qzAQAASwJoRksDahoBAABLD2qlAgAASwFquwEAAEsFankBAABLBGilSwpoIUsJaj0BAABLAmoDAgAASwNqgAEAAEsFavoBAABLEGgrSwRoMEsBahsBAABLCGrdAQAASwNqsAIAAEsBaq8CAABLA2omAQAASwNqUgIAAEsBausBAABLBGr/AQAASwFqdAEAAEsBaoQBAABLDmh4SwFqHgIAAEsDarQCAABLAWpvAQAASwNq9QEAAEsCaDZLAWpRAgAASwdohEsBaikCAABLA2rPAQAASwFqEgEAAEsEankCAABLBWpPAgAASwNoW0sFan8BAABLAWivSwpooksNapICAABLB2jtSwFqmQEAAEsCaBJLAmoGAgAASwFqeAEAAEsBaqUBAABLAmp6AgAASwJqQAEAAEshah8CAABLAmpHAgAASwNqIgEAAEsEagoBAABLAWoZAgAASwFqkQIAAEsCag8CAABLAmrTAQAASwNogUsFauIBAABLAWg+SwJqewEAAEsMaCJLBmpYAQAASwJqawIAAEsFanwBAABLAmqYAgAASwJoO0sDanYBAABLBGrXAQAASwFogEsBap4CAABLAWpJAgAASwFqPwIAAEsBalwCAABLA2o0AgAASwFqLwIAAEsEar4BAABLAWouAgAASwZqTwEAAEsCaoACAABLAWoYAQAASwFqfAIAAEsFapMBAABLAmjLSwFqOgEAAEsCalABAABLAWpwAQAASwNq5QEAAEsBaKhLAWh3SwFqdQIAAEsCag0CAABLCGqfAQAASwNqlAEAAEsBalcBAABLAWr3AQAASwJoxEsBahcCAABLAWozAgAASwFq5wEAAEsDag8BAABLAmrWAQAASwJo70sJamECAABLAWhoSwRqvwEAAEsCasMCAABLAWiWSwFowksBaLFLAWruAQAASwFqGAIAAEsFaBZLAWo+AQAASwFqfQEAAEsBalACAABLBGo2AgAASwJouEsBahMCAABLBWg5SwFqFQIAAEsCaCRLAmi3SwFqQgEAAEsBao8BAABLAWqCAgAASwFoKEsBan4BAABLAWg0SwVqSAEAAEsDaPVLBmhZSwFqlQIAAEsBal8CAABLAmgbSwRqQwEAAEsEaoIBAABLAmipSwFqiQEAAEsBal4CAABLAWpdAgAASwJqQAIAAEsBalUCAABLAWrcAQAASwJq8wEAAEsBan4CAABLAmooAQAASwFqtgIAAEsBakgCAABLAmqqAgAASwFqnwIAAEsBaooCAABLDmpRAQAASwFqNgEAAEsCaP9LAmi6SwFobksBaCVLAWgdSwJqWQEAAEsDaFJLAWouAQAASwJq+wEAAEsBaLBLAWqBAgAASwNq7wEAAEsBaj4CAABLAmr4AQAASwFqqwEAAEsBamsBAABLAWqHAQAASwNovEsBaC1LBGjpSwFqMQIAAEsBaowBAABLAWosAgAASwFqPAEAAEsBam0BAABLAWo4AQAASwFo/EsCar4CAABLAWqhAgAASwFqNwIAAEsBamkBAABLAWp0AgAASwFqrAEAAEsBaj0CAABLAWpsAgAASwdorksBagACAABLAWoNAQAASwFov0sBaqYCAABLAWoaAgAASwNqSwIAAEsBapYCAABLAWjmSwFqIQEAAEsCav4BAABLBGjdSwFqxwEAAEsDaMFLAWodAQAASwVoeksBaicBAABLAmqUAgAASwFqYAEAAEsBajQBAABLAmpDAgAASwFqwgEAAEsCamUBAABLAmhsSwJqpwIAAEsDaqsCAABLA2oQAgAASwFqbgIAAEsDapsCAABLAWoiAgAASwFoVksBagABAABLAWoyAgAASwFqJAEAAEsBajUBAABLAmpCAgAASwJqtQIAAEsBaClLAWovAQAASwFqEgIAAEsBaNlLAWheSwJoD0sBarYBAABLAWoVAQAASwFqhQEAAEsCaH5LA2oBAgAASwFqcgIAAEsBaqQCAABLAmroAQAASwFobUsBaIZLAWh1SwFq0AEAAEsFak0BAABLAWo5AQAASwFqUwEAAEsDasUCAABLAmp1AQAASwVoT0sDanMBAABLAmoMAQAASwFoFEsBaoUCAABLAWqZAgAASwFqGwIAAEsBaNZLAWgeSwRqUwIAAEsBaD9LA2jRSwFoMUsBap4BAABLAWopAQAASwFqgwEAAEsBaFRLAWogAQAASwJou0sBavEBAABLAWjKSwFqOwIAAEsBar8CAABLAWjTSwFqMAIAAEsBakcBAABLAWq9AQAASwFogksBaDpLAWjUSwFoF0sBagUCAABLAmpjAQAASwFqxwIAAEsCalQCAABLAWgsSwNob0sDaq4CAABLAWjPSwFqogIAAEsCagwCAABLAmpFAgAASwFqHwEAAEsBaC5LAWiDSwFqtwIAAEsBaEVLAmj3SwFqBAEAAEsBaigCAABLAmiYSwFqKgIAAEsBarEBAABLAWrAAQAASwJq5gEAAEsCarwCAABLBGhRSwFof0sBapEBAABLAWoHAQAASwRqZAEAAEsBaCBLAWphAQAASwRqhgIAAEsCaiYCAABLBmrfAQAASwFq4AEAAEsBaPNLAWotAQAASwFqYgEAAEsBaF1LAmqtAQAASwFqywEAAEsDaGlLAWpEAQAASwRqkgEAAEsCahEBAABLAmiTSwFqxAIAAEsCaKBLAmoXAQAASwFqYwIAAEsBaosCAABLA2qtAgAASwJoJksCaFpLA2qjAgAASwJqdwIAAEsBaJFLBWpmAQAASwFqCwIAAEsBarQBAABLAWpVAQAASwFqNQIAAEsBapcBAABLAWqJAgAASwFoQUsCaLNLAWqqAQAASwJo/UsBahYBAABLAWp6AQAASwFqAgEAAEsBaooBAABLA2jaSwJqzQEAAEsBamACAABLAWqsAgAASwFqlwIAAEsBamgCAABLAWpdAQAASwFqSQEAAEsGaloBAABLAWi2SwNqqAIAAEsBahwBAABLAWhgSwFo6EsCao0BAABLAmgySwJqZwIAAEsBahwCAABLAWosAQAASwRqzAEAAEsCaJtLAWo5AgAASwJqmAEAAEsBai0CAABLAWq4AQAASwJqsgIAAEsBaElLAWr2AQAASwFofEsBaFBLAWhTSwFoj0sBaosBAABLAWhkSwFqXAEAAEsBarkBAABLA2pmAgAASwFoL0sBamkCAABLAWoDAQAASwForUsBamoBAABLAWpnAQAASwFqBAIAAEsBaJdLA2jySwJoQksBauMBAABLAWg1SwFosksBaqgBAABLAmjxSwJo20sBaBxLAWogAgAASwFo/ksBaogBAABLAWhwSwFqcwIAAEsBavwBAABLAWhISwFoPUsBasYBAABLAWjGSwFquQIAAEsBaFxLAWohAgAASwFovksBaroBAABLAWpiAgAASwFqIwIAAEsBao4BAABLAWihSwFouUsBasYCAABLAWqzAgAASwFoiEsBaskCAABLAWjJSwFqJQIAAEsDaJ1LAWh9SwFq6gEAAEsBamQCAABLAWqbAQAASwFomUsBansCAABLAWr0AQAASwJqcQEAAEsBajEBAABLAWpfAQAASwFolEsBauQBAABLAWpwAgAASwFo+ksBam0CAABLAWjwSwFqogEAAEsBaloCAABLAWqhAQAASwFo9EsBam8CAABLAWh2SwFqTgEAAEsBapoBAABLAWpLAQAASwFqbgEAAEsBakoBAABLAWrYAQAASwFqwQIAAEsBaOVLAWgqSwFqhwIAAEsBagkCAABLAWq9AgAASwFqaAEAAEsCakEBAABLAWq6AgAASwFohUsBaE5LAWicSwFqqQEAAEsCaPhLAWqOAgAASwFqTAIAAEsBalsCAABLAWplAgAASwFqVAEAAEsBasQBAABLAmqmAQAASwFqsgEAAEsCaCdLAmpbAQAASwFowEsBalgCAABLAWiQSwFo60sBau0BAABLAWrKAgAASwFqpwEAAEsBaDxLAWorAQAASwFqyQEAAEsBaBlLAmrhAQAASwFqfwIAAEsBakoCAABLAWpeAQAASwFqMwEAAEsCakQCAABLAWokAgAASwFqCAIAAEsDag4BAABLAWhiSwFqcgEAAEsBasEBAABLAWonAgAASwFqBQEAAEsBaDhLAWqMAgAASwFqVgEAAEsBaogCAABLAWrKAQAASwFqfQIAAEsBajoCAABLAWo8AgAASwFoaksBaiMBAABLAWqTAgAASwJojksBahABAABLAWhASwFqyAEAAEsBagEBAABLAWryAQAASwFozksBangCAABLAWpFAQAASwFqagIAAEsBao0CAABLAWrFAQAASwFqCQEAAEsBajABAABLAWhKSwFqnQIAAEsBalkCAABLAWjnSwFqOAIAAEsBaOBLAXV1YnViWAkAAAB0cmFuc2Zvcm1y2AIAAIZy2QIAAFJy2gIAAC4="

            transform = pickle.loads(base64.b64decode(padtokenizer))

            values = array(payload['values']).reshape(len(payload['values']))
            values_transformed = transform(values)
            return {"fields": payload["fields"], "values": values_transformed}

        ai_function_details = self.client.repository.store_function(function_props, score)

        TestAIFunction.function_uid = self.client.repository.get_function_uid(ai_function_details)
        function_url = self.client.repository.get_function_url(ai_function_details)
        TestAIFunction.logger.info("AI function ID:" + str(TestAIFunction.function_uid))
        TestAIFunction.logger.info("AI function URL:" + str(function_url))
        self.assertIsNotNone(TestAIFunction.function_uid)
        self.assertIsNotNone(function_url)

    def test_03_download_ai_function_content(self):
        try:
            os.remove('test_ai_function.tar.gz')
        except:
            pass

        self.client.repository.download(TestAIFunction.function_uid, filename='test_ai_function.tar.gz')

        try:
            os.remove('test_ai_function.tar.gz')
        except:
            pass

    def test_04_get_details(self):
        details = self.client.repository.get_function_details()
        self.assertTrue(self.function_name in str(details))

        details = self.client.repository.get_function_details(self.function_uid)
        self.assertTrue(self.function_name in str(details))

        details = self.client.repository.get_details()
        self.assertTrue("functions" in details)

        details = self.client.repository.get_details(self.function_uid)
        self.assertTrue(self.function_name in str(details))

    def test_05_list(self):
        self.client.repository.list()

        self.client.repository.list_functions()

    def test_06_create_deployment(self):
        TestAIFunction.logger.info("Create deployment")
        deployment = self.client.deployments.create(asset_uid=self.function_uid, name=self.deployment_name, asynchronous=False)
        TestAIFunction.logger.debug("Online deployment: " + str(deployment))
        TestAIFunction.scoring_url = self.client.deployments.get_scoring_url(deployment)
        TestAIFunction.logger.debug("Scoring url: {}".format(TestAIFunction.scoring_url))
        TestAIFunction.deployment_uid = self.client.deployments.get_uid(deployment)
        TestAIFunction.logger.debug("Deployment uid: {}".format(TestAIFunction.deployment_uid))
        self.assertTrue("online" in str(deployment))

    def test_07_get_deployment_details(self):
        TestAIFunction.logger.info("Get deployment details")
        deployment_details = self.client.deployments.get_details()
        TestAIFunction.logger.debug("Deployment details: {}".format(deployment_details))
        self.assertTrue(self.deployment_name in str(deployment_details))

    def test_08_score(self):
        sample_payload = {
            "fields": ["ID", "Gender", "Status", "Children", "Age", "Customer_Status", "Car_Owner", "Customer_Service",
                       "Satisfaction"],
            "values": [[2624, 'Male', 'S', 0, 49.27, 'Active', 'No',
                        "Good experience with all the rental co.'s I contacted. I Just called with rental dates and received pricing and selected rental co.",
                        1]]}
        predictions = self.client.deployments.score(TestAIFunction.scoring_url, sample_payload)
        print("Predictions: {}".format(predictions))
        self.assertTrue("values" in str(predictions))

    def test_09_delete_deployment(self):
        TestAIFunction.logger.info("Delete deployment")
        self.client.deployments.delete(TestAIFunction.deployment_uid)

    def test_10_delete_function(self):
        TestAIFunction.logger.info("Delete function")
        self.client.repository.delete(TestAIFunction.function_uid)

    def test_11_delete_runtime(self):
        self.client._runtimes.delete(TestAIFunction.runtime_uid)


if __name__ == '__main__':
    unittest.main()
