# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SaleDelivery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'account_id': 'str',
        'sale_id': 'int',
        'delivery_id': 'int',
        'detail_ids': 'list[int]',
        'name': 'str',
        'furigana': 'str',
        'postal': 'str',
        'pref_id': 'int',
        'pref_name': 'str',
        'address1': 'str',
        'address2': 'str',
        'tel': 'str',
        'preferred_date': 'str',
        'preferred_period': 'str',
        'slip_number': 'str',
        'noshi_text': 'str',
        'noshi_charge': 'int',
        'card_name': 'str',
        'card_text': 'str',
        'card_charge': 'int',
        'wrapping_name': 'str',
        'wrapping_charge': 'int',
        'delivery_charge': 'int',
        'total_charge': 'int',
        'memo': 'str',
        'delivered': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'sale_id': 'sale_id',
        'delivery_id': 'delivery_id',
        'detail_ids': 'detail_ids',
        'name': 'name',
        'furigana': 'furigana',
        'postal': 'postal',
        'pref_id': 'pref_id',
        'pref_name': 'pref_name',
        'address1': 'address1',
        'address2': 'address2',
        'tel': 'tel',
        'preferred_date': 'preferred_date',
        'preferred_period': 'preferred_period',
        'slip_number': 'slip_number',
        'noshi_text': 'noshi_text',
        'noshi_charge': 'noshi_charge',
        'card_name': 'card_name',
        'card_text': 'card_text',
        'card_charge': 'card_charge',
        'wrapping_name': 'wrapping_name',
        'wrapping_charge': 'wrapping_charge',
        'delivery_charge': 'delivery_charge',
        'total_charge': 'total_charge',
        'memo': 'memo',
        'delivered': 'delivered'
    }

    def __init__(self, id=None, account_id=None, sale_id=None, delivery_id=None, detail_ids=None, name=None, furigana=None, postal=None, pref_id=None, pref_name=None, address1=None, address2=None, tel=None, preferred_date=None, preferred_period=None, slip_number=None, noshi_text=None, noshi_charge=None, card_name=None, card_text=None, card_charge=None, wrapping_name=None, wrapping_charge=None, delivery_charge=None, total_charge=None, memo=None, delivered=None):  # noqa: E501
        """SaleDelivery - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._account_id = None
        self._sale_id = None
        self._delivery_id = None
        self._detail_ids = None
        self._name = None
        self._furigana = None
        self._postal = None
        self._pref_id = None
        self._pref_name = None
        self._address1 = None
        self._address2 = None
        self._tel = None
        self._preferred_date = None
        self._preferred_period = None
        self._slip_number = None
        self._noshi_text = None
        self._noshi_charge = None
        self._card_name = None
        self._card_text = None
        self._card_charge = None
        self._wrapping_name = None
        self._wrapping_charge = None
        self._delivery_charge = None
        self._total_charge = None
        self._memo = None
        self._delivered = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if sale_id is not None:
            self.sale_id = sale_id
        if delivery_id is not None:
            self.delivery_id = delivery_id
        if detail_ids is not None:
            self.detail_ids = detail_ids
        if name is not None:
            self.name = name
        if furigana is not None:
            self.furigana = furigana
        if postal is not None:
            self.postal = postal
        if pref_id is not None:
            self.pref_id = pref_id
        if pref_name is not None:
            self.pref_name = pref_name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if tel is not None:
            self.tel = tel
        if preferred_date is not None:
            self.preferred_date = preferred_date
        if preferred_period is not None:
            self.preferred_period = preferred_period
        if slip_number is not None:
            self.slip_number = slip_number
        if noshi_text is not None:
            self.noshi_text = noshi_text
        if noshi_charge is not None:
            self.noshi_charge = noshi_charge
        if card_name is not None:
            self.card_name = card_name
        if card_text is not None:
            self.card_text = card_text
        if card_charge is not None:
            self.card_charge = card_charge
        if wrapping_name is not None:
            self.wrapping_name = wrapping_name
        if wrapping_charge is not None:
            self.wrapping_charge = wrapping_charge
        if delivery_charge is not None:
            self.delivery_charge = delivery_charge
        if total_charge is not None:
            self.total_charge = total_charge
        if memo is not None:
            self.memo = memo
        if delivered is not None:
            self.delivered = delivered

    @property
    def id(self):
        """Gets the id of this SaleDelivery.  # noqa: E501

        配送ID  # noqa: E501

        :return: The id of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SaleDelivery.

        配送ID  # noqa: E501

        :param id: The id of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this SaleDelivery.  # noqa: E501

        ショップアカウントID  # noqa: E501

        :return: The account_id of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SaleDelivery.

        ショップアカウントID  # noqa: E501

        :param account_id: The account_id of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def sale_id(self):
        """Gets the sale_id of this SaleDelivery.  # noqa: E501

        売上ID  # noqa: E501

        :return: The sale_id of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this SaleDelivery.

        売上ID  # noqa: E501

        :param sale_id: The sale_id of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._sale_id = sale_id

    @property
    def delivery_id(self):
        """Gets the delivery_id of this SaleDelivery.  # noqa: E501

        使用された配送方法ID  # noqa: E501

        :return: The delivery_id of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._delivery_id

    @delivery_id.setter
    def delivery_id(self, delivery_id):
        """Sets the delivery_id of this SaleDelivery.

        使用された配送方法ID  # noqa: E501

        :param delivery_id: The delivery_id of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._delivery_id = delivery_id

    @property
    def detail_ids(self):
        """Gets the detail_ids of this SaleDelivery.  # noqa: E501

        この配送に含まれる受注明細IDの配列  # noqa: E501

        :return: The detail_ids of this SaleDelivery.  # noqa: E501
        :rtype: list[int]
        """
        return self._detail_ids

    @detail_ids.setter
    def detail_ids(self, detail_ids):
        """Sets the detail_ids of this SaleDelivery.

        この配送に含まれる受注明細IDの配列  # noqa: E501

        :param detail_ids: The detail_ids of this SaleDelivery.  # noqa: E501
        :type: list[int]
        """

        self._detail_ids = detail_ids

    @property
    def name(self):
        """Gets the name of this SaleDelivery.  # noqa: E501

        宛名  # noqa: E501

        :return: The name of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SaleDelivery.

        宛名  # noqa: E501

        :param name: The name of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def furigana(self):
        """Gets the furigana of this SaleDelivery.  # noqa: E501

        宛名のフリガナ  # noqa: E501

        :return: The furigana of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._furigana

    @furigana.setter
    def furigana(self, furigana):
        """Sets the furigana of this SaleDelivery.

        宛名のフリガナ  # noqa: E501

        :param furigana: The furigana of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._furigana = furigana

    @property
    def postal(self):
        """Gets the postal of this SaleDelivery.  # noqa: E501

        郵便番号  # noqa: E501

        :return: The postal of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._postal

    @postal.setter
    def postal(self, postal):
        """Sets the postal of this SaleDelivery.

        郵便番号  # noqa: E501

        :param postal: The postal of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._postal = postal

    @property
    def pref_id(self):
        """Gets the pref_id of this SaleDelivery.  # noqa: E501

        都道府県の通し番号。北海道が1、沖縄が47  # noqa: E501

        :return: The pref_id of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._pref_id

    @pref_id.setter
    def pref_id(self, pref_id):
        """Sets the pref_id of this SaleDelivery.

        都道府県の通し番号。北海道が1、沖縄が47  # noqa: E501

        :param pref_id: The pref_id of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._pref_id = pref_id

    @property
    def pref_name(self):
        """Gets the pref_name of this SaleDelivery.  # noqa: E501

        都道府県名  # noqa: E501

        :return: The pref_name of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._pref_name

    @pref_name.setter
    def pref_name(self, pref_name):
        """Sets the pref_name of this SaleDelivery.

        都道府県名  # noqa: E501

        :param pref_name: The pref_name of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._pref_name = pref_name

    @property
    def address1(self):
        """Gets the address1 of this SaleDelivery.  # noqa: E501

        住所1  # noqa: E501

        :return: The address1 of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this SaleDelivery.

        住所1  # noqa: E501

        :param address1: The address1 of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this SaleDelivery.  # noqa: E501

        住所2  # noqa: E501

        :return: The address2 of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this SaleDelivery.

        住所2  # noqa: E501

        :param address2: The address2 of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def tel(self):
        """Gets the tel of this SaleDelivery.  # noqa: E501

        電話番号  # noqa: E501

        :return: The tel of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._tel

    @tel.setter
    def tel(self, tel):
        """Sets the tel of this SaleDelivery.

        電話番号  # noqa: E501

        :param tel: The tel of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._tel = tel

    @property
    def preferred_date(self):
        """Gets the preferred_date of this SaleDelivery.  # noqa: E501

        配送希望日  # noqa: E501

        :return: The preferred_date of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._preferred_date

    @preferred_date.setter
    def preferred_date(self, preferred_date):
        """Sets the preferred_date of this SaleDelivery.

        配送希望日  # noqa: E501

        :param preferred_date: The preferred_date of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._preferred_date = preferred_date

    @property
    def preferred_period(self):
        """Gets the preferred_period of this SaleDelivery.  # noqa: E501

        配送希望時間帯  # noqa: E501

        :return: The preferred_period of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._preferred_period

    @preferred_period.setter
    def preferred_period(self, preferred_period):
        """Sets the preferred_period of this SaleDelivery.

        配送希望時間帯  # noqa: E501

        :param preferred_period: The preferred_period of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._preferred_period = preferred_period

    @property
    def slip_number(self):
        """Gets the slip_number of this SaleDelivery.  # noqa: E501

        配送伝票番号  # noqa: E501

        :return: The slip_number of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._slip_number

    @slip_number.setter
    def slip_number(self, slip_number):
        """Sets the slip_number of this SaleDelivery.

        配送伝票番号  # noqa: E501

        :param slip_number: The slip_number of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._slip_number = slip_number

    @property
    def noshi_text(self):
        """Gets the noshi_text of this SaleDelivery.  # noqa: E501

        熨斗の文言  # noqa: E501

        :return: The noshi_text of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._noshi_text

    @noshi_text.setter
    def noshi_text(self, noshi_text):
        """Sets the noshi_text of this SaleDelivery.

        熨斗の文言  # noqa: E501

        :param noshi_text: The noshi_text of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._noshi_text = noshi_text

    @property
    def noshi_charge(self):
        """Gets the noshi_charge of this SaleDelivery.  # noqa: E501

        熨斗の料金  # noqa: E501

        :return: The noshi_charge of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._noshi_charge

    @noshi_charge.setter
    def noshi_charge(self, noshi_charge):
        """Sets the noshi_charge of this SaleDelivery.

        熨斗の料金  # noqa: E501

        :param noshi_charge: The noshi_charge of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._noshi_charge = noshi_charge

    @property
    def card_name(self):
        """Gets the card_name of this SaleDelivery.  # noqa: E501

        メッセージカードの表示名  # noqa: E501

        :return: The card_name of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._card_name

    @card_name.setter
    def card_name(self, card_name):
        """Sets the card_name of this SaleDelivery.

        メッセージカードの表示名  # noqa: E501

        :param card_name: The card_name of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._card_name = card_name

    @property
    def card_text(self):
        """Gets the card_text of this SaleDelivery.  # noqa: E501

        メッセージカードのテキスト  # noqa: E501

        :return: The card_text of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._card_text

    @card_text.setter
    def card_text(self, card_text):
        """Sets the card_text of this SaleDelivery.

        メッセージカードのテキスト  # noqa: E501

        :param card_text: The card_text of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._card_text = card_text

    @property
    def card_charge(self):
        """Gets the card_charge of this SaleDelivery.  # noqa: E501

        メッセージカードの料金  # noqa: E501

        :return: The card_charge of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._card_charge

    @card_charge.setter
    def card_charge(self, card_charge):
        """Sets the card_charge of this SaleDelivery.

        メッセージカードの料金  # noqa: E501

        :param card_charge: The card_charge of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._card_charge = card_charge

    @property
    def wrapping_name(self):
        """Gets the wrapping_name of this SaleDelivery.  # noqa: E501

        ラッピングの表示名  # noqa: E501

        :return: The wrapping_name of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._wrapping_name

    @wrapping_name.setter
    def wrapping_name(self, wrapping_name):
        """Sets the wrapping_name of this SaleDelivery.

        ラッピングの表示名  # noqa: E501

        :param wrapping_name: The wrapping_name of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._wrapping_name = wrapping_name

    @property
    def wrapping_charge(self):
        """Gets the wrapping_charge of this SaleDelivery.  # noqa: E501

        ラッピングの料金  # noqa: E501

        :return: The wrapping_charge of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._wrapping_charge

    @wrapping_charge.setter
    def wrapping_charge(self, wrapping_charge):
        """Sets the wrapping_charge of this SaleDelivery.

        ラッピングの料金  # noqa: E501

        :param wrapping_charge: The wrapping_charge of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._wrapping_charge = wrapping_charge

    @property
    def delivery_charge(self):
        """Gets the delivery_charge of this SaleDelivery.  # noqa: E501

        配送料  # noqa: E501

        :return: The delivery_charge of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._delivery_charge

    @delivery_charge.setter
    def delivery_charge(self, delivery_charge):
        """Sets the delivery_charge of this SaleDelivery.

        配送料  # noqa: E501

        :param delivery_charge: The delivery_charge of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._delivery_charge = delivery_charge

    @property
    def total_charge(self):
        """Gets the total_charge of this SaleDelivery.  # noqa: E501

        配送料・手数料の小計  # noqa: E501

        :return: The total_charge of this SaleDelivery.  # noqa: E501
        :rtype: int
        """
        return self._total_charge

    @total_charge.setter
    def total_charge(self, total_charge):
        """Sets the total_charge of this SaleDelivery.

        配送料・手数料の小計  # noqa: E501

        :param total_charge: The total_charge of this SaleDelivery.  # noqa: E501
        :type: int
        """

        self._total_charge = total_charge

    @property
    def memo(self):
        """Gets the memo of this SaleDelivery.  # noqa: E501

        備考  # noqa: E501

        :return: The memo of this SaleDelivery.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this SaleDelivery.

        備考  # noqa: E501

        :param memo: The memo of this SaleDelivery.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def delivered(self):
        """Gets the delivered of this SaleDelivery.  # noqa: E501

        発送済みであるか否か  # noqa: E501

        :return: The delivered of this SaleDelivery.  # noqa: E501
        :rtype: bool
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this SaleDelivery.

        発送済みであるか否か  # noqa: E501

        :param delivered: The delivered of this SaleDelivery.  # noqa: E501
        :type: bool
        """

        self._delivered = delivered

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaleDelivery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
