# coding: utf-8

"""
    Dash API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dash_api.api_client import ApiClient


class RolesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_roles_by_id_delete(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_get(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_put(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_put(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param Role model:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_put_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param Role model:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resource_types_by_resource_type_id_permissions_get(self, id, resource_type_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_by_resource_type_id_permissions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_by_resource_type_id_permissions_get(id, resource_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_type_id: (required)
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resource_types_by_resource_type_id_permissions_get_with_http_info(id, resource_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resource_types_by_resource_type_id_permissions_get_with_http_info(id, resource_type_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resource_types_by_resource_type_id_permissions_get_with_http_info(self, id, resource_type_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_by_resource_type_id_permissions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_by_resource_type_id_permissions_get_with_http_info(id, resource_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_type_id: (required)
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_type_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resource_types_by_resource_type_id_permissions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resource_types_by_resource_type_id_permissions_get`")  # noqa: E501
        # verify the required parameter 'resource_type_id' is set
        if ('resource_type_id' not in params or
                params['resource_type_id'] is None):
            raise ValueError("Missing the required parameter `resource_type_id` when calling `api_roles_by_id_resource_types_by_resource_type_id_permissions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_type_id' in params:
            path_params['resourceTypeId'] = params['resource_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resourceTypes/{resourceTypeId}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Permission]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resource_types_by_resource_type_id_permissions_post(self, id, resource_type_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_by_resource_type_id_permissions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_by_resource_type_id_permissions_post(id, resource_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_type_id: (required)
        :param list[Permission] permissions:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resource_types_by_resource_type_id_permissions_post_with_http_info(id, resource_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resource_types_by_resource_type_id_permissions_post_with_http_info(id, resource_type_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resource_types_by_resource_type_id_permissions_post_with_http_info(self, id, resource_type_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_by_resource_type_id_permissions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_by_resource_type_id_permissions_post_with_http_info(id, resource_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_type_id: (required)
        :param list[Permission] permissions:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_type_id', 'permissions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resource_types_by_resource_type_id_permissions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resource_types_by_resource_type_id_permissions_post`")  # noqa: E501
        # verify the required parameter 'resource_type_id' is set
        if ('resource_type_id' not in params or
                params['resource_type_id'] is None):
            raise ValueError("Missing the required parameter `resource_type_id` when calling `api_roles_by_id_resource_types_by_resource_type_id_permissions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_type_id' in params:
            path_params['resourceTypeId'] = params['resource_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'permissions' in params:
            body_params = params['permissions']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resourceTypes/{resourceTypeId}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resource_types_get(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: list[ResourceType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resource_types_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resource_types_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resource_types_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: list[ResourceType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resource_types_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resource_types_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resourceTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceType]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resource_types_post(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param list[ResourceType] resource_types:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resource_types_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resource_types_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resource_types_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resource_types_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resource_types_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param list[ResourceType] resource_types:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resource_types_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resource_types_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource_types' in params:
            body_params = params['resource_types']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resourceTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resources_by_resource_id_permissions_get(self, id, resource_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_by_resource_id_permissions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_by_resource_id_permissions_get(id, resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_id: (required)
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resources_by_resource_id_permissions_get_with_http_info(id, resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resources_by_resource_id_permissions_get_with_http_info(id, resource_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resources_by_resource_id_permissions_get_with_http_info(self, id, resource_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_by_resource_id_permissions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_by_resource_id_permissions_get_with_http_info(id, resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_id: (required)
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resources_by_resource_id_permissions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resources_by_resource_id_permissions_get`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `api_roles_by_id_resources_by_resource_id_permissions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resources/{resourceId}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Permission]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resources_by_resource_id_permissions_post(self, id, resource_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_by_resource_id_permissions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_by_resource_id_permissions_post(id, resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_id: (required)
        :param list[Permission] permissions:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resources_by_resource_id_permissions_post_with_http_info(id, resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resources_by_resource_id_permissions_post_with_http_info(id, resource_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resources_by_resource_id_permissions_post_with_http_info(self, id, resource_id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_by_resource_id_permissions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_by_resource_id_permissions_post_with_http_info(id, resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param int resource_id: (required)
        :param list[Permission] permissions:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_id', 'permissions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resources_by_resource_id_permissions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resources_by_resource_id_permissions_post`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `api_roles_by_id_resources_by_resource_id_permissions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'permissions' in params:
            body_params = params['permissions']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resources/{resourceId}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resources_get(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resources_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resources_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resources_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resources_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resources_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Resource]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_resources_post(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param list[Resource] resources:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_resources_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_resources_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_resources_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_resources_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_resources_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param list[Resource] resources:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resources']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_resources_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_resources_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resources' in params:
            body_params = params['resources']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/resources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_users_by_provider_id_get(self, id, provider_id, **kwargs):  # noqa: E501
        """api_roles_by_id_users_by_provider_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_users_by_provider_id_get(id, provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param str provider_id: (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_users_by_provider_id_get_with_http_info(id, provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_users_by_provider_id_get_with_http_info(id, provider_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_users_by_provider_id_get_with_http_info(self, id, provider_id, **kwargs):  # noqa: E501
        """api_roles_by_id_users_by_provider_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_users_by_provider_id_get_with_http_info(id, provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param str provider_id: (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'provider_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_users_by_provider_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_users_by_provider_id_get`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_roles_by_id_users_by_provider_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/users/{providerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_users_get(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_users_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_users_get(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_users_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_users_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_users_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_users_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_users_get_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_users_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_users_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_id_users_post(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_users_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_users_post(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param User user:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_id_users_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_id_users_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_id_users_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_roles_by_id_users_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_id_users_post_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: (required)
        :param User user:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_id_users_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_roles_by_id_users_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{id}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete(self, role_id, provider_id, restriction_id, **kwargs):  # noqa: E501
        """api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete(role_id, provider_id, restriction_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: (required)
        :param str provider_id: (required)
        :param int restriction_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete_with_http_info(role_id, provider_id, restriction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete_with_http_info(role_id, provider_id, restriction_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete_with_http_info(self, role_id, provider_id, restriction_id, **kwargs):  # noqa: E501
        """api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete_with_http_info(role_id, provider_id, restriction_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: (required)
        :param str provider_id: (required)
        :param int restriction_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'provider_id', 'restriction_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete`")  # noqa: E501
        # verify the required parameter 'restriction_id' is set
        if ('restriction_id' not in params or
                params['restriction_id'] is None):
            raise ValueError("Missing the required parameter `restriction_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_by_restriction_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501
        if 'restriction_id' in params:
            path_params['restrictionId'] = params['restriction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{roleId}/users/{providerId}/restrictions/{restrictionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_role_id_users_by_provider_id_restrictions_get(self, role_id, provider_id, **kwargs):  # noqa: E501
        """api_roles_by_role_id_users_by_provider_id_restrictions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_role_id_users_by_provider_id_restrictions_get(role_id, provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: (required)
        :param str provider_id: (required)
        :return: Restriction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_role_id_users_by_provider_id_restrictions_get_with_http_info(role_id, provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_role_id_users_by_provider_id_restrictions_get_with_http_info(role_id, provider_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_role_id_users_by_provider_id_restrictions_get_with_http_info(self, role_id, provider_id, **kwargs):  # noqa: E501
        """api_roles_by_role_id_users_by_provider_id_restrictions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_role_id_users_by_provider_id_restrictions_get_with_http_info(role_id, provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: (required)
        :param str provider_id: (required)
        :return: Restriction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'provider_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_role_id_users_by_provider_id_restrictions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_get`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{roleId}/users/{providerId}/restrictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Restriction',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_by_role_id_users_by_provider_id_restrictions_post(self, role_id, provider_id, **kwargs):  # noqa: E501
        """api_roles_by_role_id_users_by_provider_id_restrictions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_role_id_users_by_provider_id_restrictions_post(role_id, provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: (required)
        :param str provider_id: (required)
        :param Restriction restriction:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_by_role_id_users_by_provider_id_restrictions_post_with_http_info(role_id, provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_by_role_id_users_by_provider_id_restrictions_post_with_http_info(role_id, provider_id, **kwargs)  # noqa: E501
            return data

    def api_roles_by_role_id_users_by_provider_id_restrictions_post_with_http_info(self, role_id, provider_id, **kwargs):  # noqa: E501
        """api_roles_by_role_id_users_by_provider_id_restrictions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_by_role_id_users_by_provider_id_restrictions_post_with_http_info(role_id, provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: (required)
        :param str provider_id: (required)
        :param Restriction restriction:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'provider_id', 'restriction']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_by_role_id_users_by_provider_id_restrictions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_post`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_roles_by_role_id_users_by_provider_id_restrictions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'restriction' in params:
            body_params = params['restriction']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles/{roleId}/users/{providerId}/restrictions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_get(self, **kwargs):  # noqa: E501
        """api_roles_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_roles_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_roles_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_roles_post(self, **kwargs):  # noqa: E501
        """api_roles_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Role input:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_roles_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_roles_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_roles_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_roles_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_roles_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Role input:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_roles_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
