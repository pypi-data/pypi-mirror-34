# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Customer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'account_id': 'str',
        'name': 'str',
        'furigana': 'str',
        'hojin': 'str',
        'busho': 'str',
        'sex': 'str',
        'postal': 'str',
        'pref_id': 'int',
        'pref_name': 'str',
        'address1': 'str',
        'address2': 'str',
        'mail': 'str',
        'tel': 'str',
        'fax': 'str',
        'tel_mobile': 'str',
        'memo': 'str',
        'points': 'int',
        'member': 'bool',
        'sales_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'name': 'name',
        'furigana': 'furigana',
        'hojin': 'hojin',
        'busho': 'busho',
        'sex': 'sex',
        'postal': 'postal',
        'pref_id': 'pref_id',
        'pref_name': 'pref_name',
        'address1': 'address1',
        'address2': 'address2',
        'mail': 'mail',
        'tel': 'tel',
        'fax': 'fax',
        'tel_mobile': 'tel_mobile',
        'memo': 'memo',
        'points': 'points',
        'member': 'member',
        'sales_count': 'sales_count'
    }

    def __init__(self, id=None, account_id=None, name=None, furigana=None, hojin=None, busho=None, sex=None, postal=None, pref_id=None, pref_name=None, address1=None, address2=None, mail=None, tel=None, fax=None, tel_mobile=None, memo=None, points=None, member=None, sales_count=None):  # noqa: E501
        """Customer - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._account_id = None
        self._name = None
        self._furigana = None
        self._hojin = None
        self._busho = None
        self._sex = None
        self._postal = None
        self._pref_id = None
        self._pref_name = None
        self._address1 = None
        self._address2 = None
        self._mail = None
        self._tel = None
        self._fax = None
        self._tel_mobile = None
        self._memo = None
        self._points = None
        self._member = None
        self._sales_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if furigana is not None:
            self.furigana = furigana
        if hojin is not None:
            self.hojin = hojin
        if busho is not None:
            self.busho = busho
        if sex is not None:
            self.sex = sex
        if postal is not None:
            self.postal = postal
        if pref_id is not None:
            self.pref_id = pref_id
        if pref_name is not None:
            self.pref_name = pref_name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if mail is not None:
            self.mail = mail
        if tel is not None:
            self.tel = tel
        if fax is not None:
            self.fax = fax
        if tel_mobile is not None:
            self.tel_mobile = tel_mobile
        if memo is not None:
            self.memo = memo
        if points is not None:
            self.points = points
        if member is not None:
            self.member = member
        if sales_count is not None:
            self.sales_count = sales_count

    @property
    def id(self):
        """Gets the id of this Customer.  # noqa: E501

        顧客ID  # noqa: E501

        :return: The id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.

        顧客ID  # noqa: E501

        :param id: The id of this Customer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Customer.  # noqa: E501

        ショップアカウントID  # noqa: E501

        :return: The account_id of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Customer.

        ショップアカウントID  # noqa: E501

        :param account_id: The account_id of this Customer.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this Customer.  # noqa: E501

        顧客の名前  # noqa: E501

        :return: The name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Customer.

        顧客の名前  # noqa: E501

        :param name: The name of this Customer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def furigana(self):
        """Gets the furigana of this Customer.  # noqa: E501

        名前のフリガナ  # noqa: E501

        :return: The furigana of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._furigana

    @furigana.setter
    def furigana(self, furigana):
        """Sets the furigana of this Customer.

        名前のフリガナ  # noqa: E501

        :param furigana: The furigana of this Customer.  # noqa: E501
        :type: str
        """

        self._furigana = furigana

    @property
    def hojin(self):
        """Gets the hojin of this Customer.  # noqa: E501

        法人名  # noqa: E501

        :return: The hojin of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._hojin

    @hojin.setter
    def hojin(self, hojin):
        """Sets the hojin of this Customer.

        法人名  # noqa: E501

        :param hojin: The hojin of this Customer.  # noqa: E501
        :type: str
        """

        self._hojin = hojin

    @property
    def busho(self):
        """Gets the busho of this Customer.  # noqa: E501

        部署名  # noqa: E501

        :return: The busho of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._busho

    @busho.setter
    def busho(self, busho):
        """Sets the busho of this Customer.

        部署名  # noqa: E501

        :param busho: The busho of this Customer.  # noqa: E501
        :type: str
        """

        self._busho = busho

    @property
    def sex(self):
        """Gets the sex of this Customer.  # noqa: E501

        性別  # noqa: E501

        :return: The sex of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Customer.

        性別  # noqa: E501

        :param sex: The sex of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if sex not in allowed_values:
            raise ValueError(
                "Invalid value for `sex` ({0}), must be one of {1}"  # noqa: E501
                .format(sex, allowed_values)
            )

        self._sex = sex

    @property
    def postal(self):
        """Gets the postal of this Customer.  # noqa: E501

        郵便番号  # noqa: E501

        :return: The postal of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._postal

    @postal.setter
    def postal(self, postal):
        """Sets the postal of this Customer.

        郵便番号  # noqa: E501

        :param postal: The postal of this Customer.  # noqa: E501
        :type: str
        """

        self._postal = postal

    @property
    def pref_id(self):
        """Gets the pref_id of this Customer.  # noqa: E501

        都道府県の通し番号。北海道が1、沖縄が47  # noqa: E501

        :return: The pref_id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._pref_id

    @pref_id.setter
    def pref_id(self, pref_id):
        """Sets the pref_id of this Customer.

        都道府県の通し番号。北海道が1、沖縄が47  # noqa: E501

        :param pref_id: The pref_id of this Customer.  # noqa: E501
        :type: int
        """

        self._pref_id = pref_id

    @property
    def pref_name(self):
        """Gets the pref_name of this Customer.  # noqa: E501

        都道府県名  # noqa: E501

        :return: The pref_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._pref_name

    @pref_name.setter
    def pref_name(self, pref_name):
        """Sets the pref_name of this Customer.

        都道府県名  # noqa: E501

        :param pref_name: The pref_name of this Customer.  # noqa: E501
        :type: str
        """

        self._pref_name = pref_name

    @property
    def address1(self):
        """Gets the address1 of this Customer.  # noqa: E501

        住所1  # noqa: E501

        :return: The address1 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Customer.

        住所1  # noqa: E501

        :param address1: The address1 of this Customer.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Customer.  # noqa: E501

        住所2  # noqa: E501

        :return: The address2 of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Customer.

        住所2  # noqa: E501

        :param address2: The address2 of this Customer.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def mail(self):
        """Gets the mail of this Customer.  # noqa: E501

        メールアドレス  # noqa: E501

        :return: The mail of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this Customer.

        メールアドレス  # noqa: E501

        :param mail: The mail of this Customer.  # noqa: E501
        :type: str
        """

        self._mail = mail

    @property
    def tel(self):
        """Gets the tel of this Customer.  # noqa: E501

        電話番号  # noqa: E501

        :return: The tel of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._tel

    @tel.setter
    def tel(self, tel):
        """Sets the tel of this Customer.

        電話番号  # noqa: E501

        :param tel: The tel of this Customer.  # noqa: E501
        :type: str
        """

        self._tel = tel

    @property
    def fax(self):
        """Gets the fax of this Customer.  # noqa: E501

        FAX番号  # noqa: E501

        :return: The fax of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Customer.

        FAX番号  # noqa: E501

        :param fax: The fax of this Customer.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def tel_mobile(self):
        """Gets the tel_mobile of this Customer.  # noqa: E501

        携帯電話番号  # noqa: E501

        :return: The tel_mobile of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._tel_mobile

    @tel_mobile.setter
    def tel_mobile(self, tel_mobile):
        """Sets the tel_mobile of this Customer.

        携帯電話番号  # noqa: E501

        :param tel_mobile: The tel_mobile of this Customer.  # noqa: E501
        :type: str
        """

        self._tel_mobile = tel_mobile

    @property
    def memo(self):
        """Gets the memo of this Customer.  # noqa: E501

        備考  # noqa: E501

        :return: The memo of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Customer.

        備考  # noqa: E501

        :param memo: The memo of this Customer.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def points(self):
        """Gets the points of this Customer.  # noqa: E501

        保有ポイント数  # noqa: E501

        :return: The points of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Customer.

        保有ポイント数  # noqa: E501

        :param points: The points of this Customer.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def member(self):
        """Gets the member of this Customer.  # noqa: E501

        会員登録済みであるか否か  # noqa: E501

        :return: The member of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Customer.

        会員登録済みであるか否か  # noqa: E501

        :param member: The member of this Customer.  # noqa: E501
        :type: bool
        """

        self._member = member

    @property
    def sales_count(self):
        """Gets the sales_count of this Customer.  # noqa: E501

        これまでの購入回数  # noqa: E501

        :return: The sales_count of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._sales_count

    @sales_count.setter
    def sales_count(self, sales_count):
        """Sets the sales_count of this Customer.

        これまでの購入回数  # noqa: E501

        :param sales_count: The sales_count of this Customer.  # noqa: E501
        :type: int
        """

        self._sales_count = sales_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
