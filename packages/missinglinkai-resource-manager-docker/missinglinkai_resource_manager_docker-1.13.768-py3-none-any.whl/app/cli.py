import logging

import click
import jwt

from controllers.configuration import get_active_config
from .cli_tools import CliTools

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%m-%d %H:%M:%S', )

logger = logging.getLogger('websockets')
logger.setLevel(logging.INFO)
logger = logging.getLogger('docker')
logger.setLevel(logging.INFO)
logger = logging.getLogger('urllib3')
logger.setLevel(logging.INFO)
logger = logging.getLogger('controllers.transport.backbone')
logger.setLevel(logging.INFO)
logger = logging.getLogger('api.api_commands')
logger.setLevel(logging.INFO)
logger = logging.getLogger('controllers.docker_controller')
logger.setLevel(logging.INFO)


@click.group(help='Mali Resource Manager version#%s' % CliTools.get_version())
def cli():
    pass


@cli.command('version')
def print_version():
    click.echo(CliTools.get_version())


@cli.command('config')
@click.option('--ml-token', help='Resource identifying token generated by MissingLink')
@click.option('--ml-server', help='Resource identifying token generated by MissingLink')
@click.option('--ml-config-prefix', default=None, help='')
@click.option('--ml-config-file', help='')
@click.option('--ml-backend', default='https://missinglinkai.appspot.com/_ah/api/missinglink/v1', help='backend base url')
@click.option('--ssh-private-key', help='Path to the private key to be used when working with source control.')
def mk_config(ml_token, ml_server, ml_config_prefix, ml_config_file, ml_backend, ssh_private_key):
    CliTools.load_config()
    active_config = get_active_config()
    logging.error(ml_config_file)
    click.echo(f"ml_token={(ml_token or '')[0:7]}...  ssh_private_key={(ssh_private_key or '')[0:7]}...")
    if ml_server is not None:
        active_config.general.ws_server = ml_server
        active_config.general.save()
        logging.info('Missing Link Server is set to %s', ml_server)
        click.echo('Missing Link Server is set to {}'.format(ml_server))

    active_config.general.backend_base_url = ml_backend
    active_config.general.save()

    if ml_token is not None:
        tok = jwt.decode(ml_token, verify=False)
        sid = tok.get("uid")
        active_config.general.cluster_id = sid
        active_config.general.jwt = ml_token
        active_config.general.save()
        logging.info('Missing Link Token is set. Resource Id: %s', sid)
        click.echo('Missing Link Token is set. Resource Id: {}'.format(sid))

    if ssh_private_key is not None:
        CliTools.save_ssh_key(ssh_private_key)
        click.echo('SSH key is set')

    if ml_config_file is not None:
        if ml_config_prefix == str(None):
            ml_config_prefix = None

        active_config.general.mali_prefix = ml_config_prefix
        active_config.general.save()
        CliTools.save_mali_config(config_prefix=ml_config_prefix, config_data=ml_config_file)


@cli.command('run')
def mk_run():
    CliTools.run_ws()
