# coding: utf-8

"""
    Dash API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dash_api.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_user_by_provider_id_charges_by_charge_id_get(self, provider_id, charge_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_charges_by_charge_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_charges_by_charge_id_get(provider_id, charge_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param int charge_id: (required)
        :return: Charge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_charges_by_charge_id_get_with_http_info(provider_id, charge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_charges_by_charge_id_get_with_http_info(provider_id, charge_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_charges_by_charge_id_get_with_http_info(self, provider_id, charge_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_charges_by_charge_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_charges_by_charge_id_get_with_http_info(provider_id, charge_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param int charge_id: (required)
        :return: Charge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'charge_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_charges_by_charge_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_charges_by_charge_id_get`")  # noqa: E501
        # verify the required parameter 'charge_id' is set
        if ('charge_id' not in params or
                params['charge_id'] is None):
            raise ValueError("Missing the required parameter `charge_id` when calling `api_user_by_provider_id_charges_by_charge_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501
        if 'charge_id' in params:
            path_params['chargeId'] = params['charge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/charges/{chargeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Charge',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_charges_by_relationship_type_post(self, relationship, provider_id, relationship_type, **kwargs):  # noqa: E501
        """api_user_by_provider_id_charges_by_relationship_type_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_charges_by_relationship_type_post(relationship, provider_id, relationship_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str relationship: (required)
        :param str provider_id: (required)
        :param str relationship_type: (required)
        :param Charge charge:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_charges_by_relationship_type_post_with_http_info(relationship, provider_id, relationship_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_charges_by_relationship_type_post_with_http_info(relationship, provider_id, relationship_type, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_charges_by_relationship_type_post_with_http_info(self, relationship, provider_id, relationship_type, **kwargs):  # noqa: E501
        """api_user_by_provider_id_charges_by_relationship_type_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_charges_by_relationship_type_post_with_http_info(relationship, provider_id, relationship_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str relationship: (required)
        :param str provider_id: (required)
        :param str relationship_type: (required)
        :param Charge charge:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['relationship', 'provider_id', 'relationship_type', 'charge']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_charges_by_relationship_type_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'relationship' is set
        if ('relationship' not in params or
                params['relationship'] is None):
            raise ValueError("Missing the required parameter `relationship` when calling `api_user_by_provider_id_charges_by_relationship_type_post`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_charges_by_relationship_type_post`")  # noqa: E501
        # verify the required parameter 'relationship_type' is set
        if ('relationship_type' not in params or
                params['relationship_type'] is None):
            raise ValueError("Missing the required parameter `relationship_type` when calling `api_user_by_provider_id_charges_by_relationship_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'relationship' in params:
            path_params['relationship'] = params['relationship']  # noqa: E501
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501
        if 'relationship_type' in params:
            path_params['relationshipType'] = params['relationship_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'charge' in params:
            body_params = params['charge']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/charges/{relationshipType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_charges_get(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_charges_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_charges_get(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param str relationship:
        :return: list[Charge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_charges_get_with_http_info(provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_charges_get_with_http_info(provider_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_charges_get_with_http_info(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_charges_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_charges_get_with_http_info(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param str relationship:
        :return: list[Charge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'relationship']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_charges_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_charges_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []
        if 'relationship' in params:
            query_params.append(('relationship', params['relationship']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Charge]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_get(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_get(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_get_with_http_info(provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_get_with_http_info(provider_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_get_with_http_info(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_get_with_http_info(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_head(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_head  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_head(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_head_with_http_info(provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_head_with_http_info(provider_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_head_with_http_info(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_head  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_head_with_http_info(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_head`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_organisations_by_assignment_post(self, provider_id, assignment, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_by_assignment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_by_assignment_post(provider_id, assignment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param str assignment: (required)
        :param Organisation organisation:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_organisations_by_assignment_post_with_http_info(provider_id, assignment, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_organisations_by_assignment_post_with_http_info(provider_id, assignment, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_organisations_by_assignment_post_with_http_info(self, provider_id, assignment, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_by_assignment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_by_assignment_post_with_http_info(provider_id, assignment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param str assignment: (required)
        :param Organisation organisation:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'assignment', 'organisation']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_organisations_by_assignment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_organisations_by_assignment_post`")  # noqa: E501
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params or
                params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `api_user_by_provider_id_organisations_by_assignment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501
        if 'assignment' in params:
            path_params['assignment'] = params['assignment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organisation' in params:
            body_params = params['organisation']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/organisations/{assignment}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_organisations_by_organisation_id_delete(self, provider_id, organisation_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_by_organisation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_by_organisation_id_delete(provider_id, organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param int organisation_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_organisations_by_organisation_id_delete_with_http_info(provider_id, organisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_organisations_by_organisation_id_delete_with_http_info(provider_id, organisation_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_organisations_by_organisation_id_delete_with_http_info(self, provider_id, organisation_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_by_organisation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_by_organisation_id_delete_with_http_info(provider_id, organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param int organisation_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'organisation_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_organisations_by_organisation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_organisations_by_organisation_id_delete`")  # noqa: E501
        # verify the required parameter 'organisation_id' is set
        if ('organisation_id' not in params or
                params['organisation_id'] is None):
            raise ValueError("Missing the required parameter `organisation_id` when calling `api_user_by_provider_id_organisations_by_organisation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501
        if 'organisation_id' in params:
            path_params['organisationId'] = params['organisation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/organisations/{organisationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_organisations_by_organisation_id_get(self, provider_id, organisation_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_by_organisation_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_by_organisation_id_get(provider_id, organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param int organisation_id: (required)
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_organisations_by_organisation_id_get_with_http_info(provider_id, organisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_organisations_by_organisation_id_get_with_http_info(provider_id, organisation_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_organisations_by_organisation_id_get_with_http_info(self, provider_id, organisation_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_by_organisation_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_by_organisation_id_get_with_http_info(provider_id, organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param int organisation_id: (required)
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'organisation_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_organisations_by_organisation_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_organisations_by_organisation_id_get`")  # noqa: E501
        # verify the required parameter 'organisation_id' is set
        if ('organisation_id' not in params or
                params['organisation_id'] is None):
            raise ValueError("Missing the required parameter `organisation_id` when calling `api_user_by_provider_id_organisations_by_organisation_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501
        if 'organisation_id' in params:
            path_params['organisationId'] = params['organisation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/organisations/{organisationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organisation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_by_provider_id_organisations_get(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_get(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param list[str] assignments:
        :return: list[Organisation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_by_provider_id_organisations_get_with_http_info(provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_user_by_provider_id_organisations_get_with_http_info(provider_id, **kwargs)  # noqa: E501
            return data

    def api_user_by_provider_id_organisations_get_with_http_info(self, provider_id, **kwargs):  # noqa: E501
        """api_user_by_provider_id_organisations_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_by_provider_id_organisations_get_with_http_info(provider_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_id: (required)
        :param list[str] assignments:
        :return: list[Organisation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_id', 'assignments']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_by_provider_id_organisations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `api_user_by_provider_id_organisations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']  # noqa: E501

        query_params = []
        if 'assignments' in params:
            query_params.append(('assignments', params['assignments']))  # noqa: E501
            collection_formats['assignments'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user/{providerId}/organisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Organisation]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_get(self, **kwargs):  # noqa: E501
        """api_user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str given_name:
        :param str last_name:
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_user_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_user_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str given_name:
        :param str last_name:
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['given_name', 'last_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'given_name' in params:
            query_params.append(('given_name', params['given_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('last_name', params['last_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_user_post(self, **kwargs):  # noqa: E501
        """api_user_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param User model:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_user_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_user_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_user_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_user_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_user_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param User model:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_user_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
