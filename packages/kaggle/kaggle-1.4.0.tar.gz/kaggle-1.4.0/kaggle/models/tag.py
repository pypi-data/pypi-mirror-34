#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Tag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'str',
        'name': 'str',
        'description': 'str',
        'full_path': 'str',
        'is_automatic': 'bool',
        'competition_count': 'int',
        'dataset_count': 'int',
        'script_count': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'ref': 'ref',
        'name': 'name',
        'description': 'description',
        'full_path': 'fullPath',
        'is_automatic': 'isAutomatic',
        'competition_count': 'competitionCount',
        'dataset_count': 'datasetCount',
        'script_count': 'scriptCount',
        'total_count': 'totalCount'
    }

    def __init__(self, ref=None, name=None, description=None, full_path=None, is_automatic=None, competition_count=0, dataset_count=0, script_count=0, total_count=0):  # noqa: E501
        """Tag - a model defined in Swagger"""  # noqa: E501

        self._ref = None
        self._name = None
        self._description = None
        self._full_path = None
        self._is_automatic = None
        self._competition_count = None
        self._dataset_count = None
        self._script_count = None
        self._total_count = None
        self.discriminator = None

        self.ref = ref
        self.name = name
        if description is not None:
            self.description = description
        self.full_path = full_path
        if is_automatic is not None:
            self.is_automatic = is_automatic
        if competition_count is not None:
            self.competition_count = competition_count
        if dataset_count is not None:
            self.dataset_count = dataset_count
        if script_count is not None:
            self.script_count = script_count
        if total_count is not None:
            self.total_count = total_count

    @property
    def ref(self):
        """Gets the ref of this Tag.  # noqa: E501

        The reference name of the tag contained in the URL. For example, the `ref` of the tag defined at https://www.kaggle.com/tags/finance is `finance`.  # noqa: E501

        :return: The ref of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Tag.

        The reference name of the tag contained in the URL. For example, the `ref` of the tag defined at https://www.kaggle.com/tags/finance is `finance`.  # noqa: E501

        :param ref: The ref of this Tag.  # noqa: E501
        :type: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501

        self._ref = ref

    @property
    def name(self):
        """Gets the name of this Tag.  # noqa: E501

        The actual name of the tag.  # noqa: E501

        :return: The name of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.

        The actual name of the tag.  # noqa: E501

        :param name: The name of this Tag.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Tag.  # noqa: E501

        The tag's description.  # noqa: E501

        :return: The description of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tag.

        The tag's description.  # noqa: E501

        :param description: The description of this Tag.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def full_path(self):
        """Gets the full_path of this Tag.  # noqa: E501

        Shows this tag and all of its parent tags.  # noqa: E501

        :return: The full_path of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """Sets the full_path of this Tag.

        Shows this tag and all of its parent tags.  # noqa: E501

        :param full_path: The full_path of this Tag.  # noqa: E501
        :type: str
        """
        if full_path is None:
            raise ValueError("Invalid value for `full_path`, must not be `None`")  # noqa: E501

        self._full_path = full_path

    @property
    def is_automatic(self):
        """Gets the is_automatic of this Tag.  # noqa: E501


        :return: The is_automatic of this Tag.  # noqa: E501
        :rtype: bool
        """
        return self._is_automatic

    @is_automatic.setter
    def is_automatic(self, is_automatic):
        """Sets the is_automatic of this Tag.


        :param is_automatic: The is_automatic of this Tag.  # noqa: E501
        :type: bool
        """

        self._is_automatic = is_automatic

    @property
    def competition_count(self):
        """Gets the competition_count of this Tag.  # noqa: E501

        The number of competitions associated with this tag.  # noqa: E501

        :return: The competition_count of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._competition_count

    @competition_count.setter
    def competition_count(self, competition_count):
        """Sets the competition_count of this Tag.

        The number of competitions associated with this tag.  # noqa: E501

        :param competition_count: The competition_count of this Tag.  # noqa: E501
        :type: int
        """
        if competition_count is not None and competition_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `competition_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._competition_count = competition_count

    @property
    def dataset_count(self):
        """Gets the dataset_count of this Tag.  # noqa: E501

        The number of datasets associated with this tag.  # noqa: E501

        :return: The dataset_count of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._dataset_count

    @dataset_count.setter
    def dataset_count(self, dataset_count):
        """Sets the dataset_count of this Tag.

        The number of datasets associated with this tag.  # noqa: E501

        :param dataset_count: The dataset_count of this Tag.  # noqa: E501
        :type: int
        """
        if dataset_count is not None and dataset_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `dataset_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dataset_count = dataset_count

    @property
    def script_count(self):
        """Gets the script_count of this Tag.  # noqa: E501

        The number of kernels (both scripts and notebooks) associated with this tag.  # noqa: E501

        :return: The script_count of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._script_count

    @script_count.setter
    def script_count(self, script_count):
        """Sets the script_count of this Tag.

        The number of kernels (both scripts and notebooks) associated with this tag.  # noqa: E501

        :param script_count: The script_count of this Tag.  # noqa: E501
        :type: int
        """
        if script_count is not None and script_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `script_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._script_count = script_count

    @property
    def total_count(self):
        """Gets the total_count of this Tag.  # noqa: E501

        The total number of items associated with this tag.  # noqa: E501

        :return: The total_count of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Tag.

        The total number of items associated with this tag.  # noqa: E501

        :param total_count: The total_count of this Tag.  # noqa: E501
        :type: int
        """
        if total_count is not None and total_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
