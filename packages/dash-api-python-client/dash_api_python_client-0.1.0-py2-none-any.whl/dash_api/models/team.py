# coding: utf-8

"""
    Dash API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dash_api.models.activity import Activity  # noqa: F401,E501
from dash_api.models.organisation import Organisation  # noqa: F401,E501
from dash_api.models.user import User  # noqa: F401,E501


class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'user': 'User',
        'organisation': 'Organisation',
        'activity': 'Activity'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user': 'user',
        'organisation': 'organisation',
        'activity': 'activity'
    }

    def __init__(self, id=None, name=None, user=None, organisation=None, activity=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._user = None
        self._organisation = None
        self._activity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.user = user
        self.organisation = organisation
        self.activity = activity

    @property
    def id(self):
        """Gets the id of this Team.  # noqa: E501


        :return: The id of this Team.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.


        :param id: The id of this Team.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501


        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 450:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `450`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def user(self):
        """Gets the user of this Team.  # noqa: E501


        :return: The user of this Team.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Team.


        :param user: The user of this Team.  # noqa: E501
        :type: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def organisation(self):
        """Gets the organisation of this Team.  # noqa: E501


        :return: The organisation of this Team.  # noqa: E501
        :rtype: Organisation
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this Team.


        :param organisation: The organisation of this Team.  # noqa: E501
        :type: Organisation
        """
        if organisation is None:
            raise ValueError("Invalid value for `organisation`, must not be `None`")  # noqa: E501

        self._organisation = organisation

    @property
    def activity(self):
        """Gets the activity of this Team.  # noqa: E501


        :return: The activity of this Team.  # noqa: E501
        :rtype: Activity
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Team.


        :param activity: The activity of this Team.  # noqa: E501
        :type: Activity
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
