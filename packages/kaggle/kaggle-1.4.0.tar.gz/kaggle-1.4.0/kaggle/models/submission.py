#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Submission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'int',
        'total_bytes': 'int',
        'date': 'datetime',
        'description': 'str',
        'error_description': 'str',
        'file_name': 'str',
        'public_score': 'str',
        'private_score': 'str',
        'status': 'str',
        'submitted_by': 'str',
        'submitted_by_ref': 'str',
        'team_name': 'str',
        'type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'ref': 'ref',
        'total_bytes': 'totalBytes',
        'date': 'date',
        'description': 'description',
        'error_description': 'errorDescription',
        'file_name': 'fileName',
        'public_score': 'publicScore',
        'private_score': 'privateScore',
        'status': 'status',
        'submitted_by': 'submittedBy',
        'submitted_by_ref': 'submittedByRef',
        'team_name': 'teamName',
        'type': 'type',
        'url': 'url'
    }

    def __init__(self, ref=None, total_bytes=None, date=None, description=None, error_description=None, file_name=None, public_score=None, private_score=None, status=None, submitted_by=None, submitted_by_ref=None, team_name=None, type=None, url=None):  # noqa: E501
        """Submission - a model defined in Swagger"""  # noqa: E501

        self._ref = None
        self._total_bytes = None
        self._date = None
        self._description = None
        self._error_description = None
        self._file_name = None
        self._public_score = None
        self._private_score = None
        self._status = None
        self._submitted_by = None
        self._submitted_by_ref = None
        self._team_name = None
        self._type = None
        self._url = None
        self.discriminator = None

        self.ref = ref
        if total_bytes is not None:
            self.total_bytes = total_bytes
        self.date = date
        self.description = description
        if error_description is not None:
            self.error_description = error_description
        self.file_name = file_name
        self.public_score = public_score
        self.private_score = private_score
        self.status = status
        if submitted_by is not None:
            self.submitted_by = submitted_by
        if submitted_by_ref is not None:
            self.submitted_by_ref = submitted_by_ref
        if team_name is not None:
            self.team_name = team_name
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url

    @property
    def ref(self):
        """Gets the ref of this Submission.  # noqa: E501

        The submission reference ID.  # noqa: E501

        :return: The ref of this Submission.  # noqa: E501
        :rtype: int
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Submission.

        The submission reference ID.  # noqa: E501

        :param ref: The ref of this Submission.  # noqa: E501
        :type: int
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501

        self._ref = ref

    @property
    def total_bytes(self):
        """Gets the total_bytes of this Submission.  # noqa: E501

        The size of the submission in bytes.  # noqa: E501

        :return: The total_bytes of this Submission.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this Submission.

        The size of the submission in bytes.  # noqa: E501

        :param total_bytes: The total_bytes of this Submission.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    @property
    def date(self):
        """Gets the date of this Submission.  # noqa: E501

        The date the submission was made.  # noqa: E501

        :return: The date of this Submission.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Submission.

        The date the submission was made.  # noqa: E501

        :param date: The date of this Submission.  # noqa: E501
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def description(self):
        """Gets the description of this Submission.  # noqa: E501

        The submission's description.  # noqa: E501

        :return: The description of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Submission.

        The submission's description.  # noqa: E501

        :param description: The description of this Submission.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def error_description(self):
        """Gets the error_description of this Submission.  # noqa: E501

        The details of any errors with the submission.  # noqa: E501

        :return: The error_description of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this Submission.

        The details of any errors with the submission.  # noqa: E501

        :param error_description: The error_description of this Submission.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def file_name(self):
        """Gets the file_name of this Submission.  # noqa: E501

        The name of the submission file.  # noqa: E501

        :return: The file_name of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Submission.

        The name of the submission file.  # noqa: E501

        :param file_name: The file_name of this Submission.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def public_score(self):
        """Gets the public_score of this Submission.  # noqa: E501

        The submission's public score.  # noqa: E501

        :return: The public_score of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._public_score

    @public_score.setter
    def public_score(self, public_score):
        """Sets the public_score of this Submission.

        The submission's public score.  # noqa: E501

        :param public_score: The public_score of this Submission.  # noqa: E501
        :type: str
        """
        if public_score is None:
            raise ValueError("Invalid value for `public_score`, must not be `None`")  # noqa: E501

        self._public_score = public_score

    @property
    def private_score(self):
        """Gets the private_score of this Submission.  # noqa: E501

        The submission's private score.  # noqa: E501

        :return: The private_score of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._private_score

    @private_score.setter
    def private_score(self, private_score):
        """Sets the private_score of this Submission.

        The submission's private score.  # noqa: E501

        :param private_score: The private_score of this Submission.  # noqa: E501
        :type: str
        """
        if private_score is None:
            raise ValueError("Invalid value for `private_score`, must not be `None`")  # noqa: E501

        self._private_score = private_score

    @property
    def status(self):
        """Gets the status of this Submission.  # noqa: E501

        The processing status of the submission.  # noqa: E501

        :return: The status of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Submission.

        The processing status of the submission.  # noqa: E501

        :param status: The status of this Submission.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "complete", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted_by(self):
        """Gets the submitted_by of this Submission.  # noqa: E501


        :return: The submitted_by of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this Submission.


        :param submitted_by: The submitted_by of this Submission.  # noqa: E501
        :type: str
        """

        self._submitted_by = submitted_by

    @property
    def submitted_by_ref(self):
        """Gets the submitted_by_ref of this Submission.  # noqa: E501


        :return: The submitted_by_ref of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by_ref

    @submitted_by_ref.setter
    def submitted_by_ref(self, submitted_by_ref):
        """Sets the submitted_by_ref of this Submission.


        :param submitted_by_ref: The submitted_by_ref of this Submission.  # noqa: E501
        :type: str
        """

        self._submitted_by_ref = submitted_by_ref

    @property
    def team_name(self):
        """Gets the team_name of this Submission.  # noqa: E501


        :return: The team_name of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this Submission.


        :param team_name: The team_name of this Submission.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def type(self):
        """Gets the type of this Submission.  # noqa: E501

        The type of the submission.  # noqa: E501

        :return: The type of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Submission.

        The type of the submission.  # noqa: E501

        :param type: The type of this Submission.  # noqa: E501
        :type: str
        """
        allowed_values = ["standard", "sandbox", "benchmark"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Submission.  # noqa: E501

        The URL where the submission can be viewed.  # noqa: E501

        :return: The url of this Submission.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Submission.

        The URL where the submission can be viewed.  # noqa: E501

        :param url: The url of this Submission.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Submission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
