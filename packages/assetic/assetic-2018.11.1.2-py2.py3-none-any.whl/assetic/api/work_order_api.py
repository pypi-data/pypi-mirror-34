# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from assetic.api_client import ApiClient


class WorkOrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def work_order_get(self, **kwargs):  # noqa: E501
        """[Deprecated] Gets work orders based on request parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str assigned_id: Filter WO on the basis of task assigned to a particular resource
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkOrderListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def work_order_get_with_http_info(self, **kwargs):  # noqa: E501
        """[Deprecated] Gets work orders based on request parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str assigned_id: Filter WO on the basis of task assigned to a particular resource
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkOrderListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assigned_id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'assigned_id' in params:
            query_params.append(('assignedId', params['assigned_id']))  # noqa: E501
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assetic3IntegrationRepresentationsWorkOrderListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_0(self, id, **kwargs):  # noqa: E501
        """[Deprecated] Get specific work order by providing Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_0(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the value you want to return (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_get_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """[Deprecated] Get specific work order by providing Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_0_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The ID of the value you want to return (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_interruption_by_work_order_id(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET Complex Asset Interruption by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_interruption_by_work_order_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsInterruptionListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_interruption_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_interruption_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_get_interruption_by_work_order_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET Complex Asset Interruption by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_interruption_by_work_order_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsInterruptionListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_interruption_by_work_order_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_interruption_by_work_order_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/interruption', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assetic3IntegrationRepresentationsInterruptionListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_interruption_by_work_order_id_0(self, id, interruption_id, **kwargs):  # noqa: E501
        """[Deprecated] Get CA down time by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_interruption_by_work_order_id_0(id, interruption_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param str interruption_id: The CA down time Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_interruption_by_work_order_id_0_with_http_info(id, interruption_id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_interruption_by_work_order_id_0_with_http_info(id, interruption_id, **kwargs)  # noqa: E501
            return data

    def work_order_get_interruption_by_work_order_id_0_with_http_info(self, id, interruption_id, **kwargs):  # noqa: E501
        """[Deprecated] Get CA down time by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_interruption_by_work_order_id_0_with_http_info(id, interruption_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param str interruption_id: The CA down time Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'interruption_id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_interruption_by_work_order_id_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_interruption_by_work_order_id_0`")  # noqa: E501
        # verify the required parameter 'interruption_id' is set
        if ('interruption_id' not in params or
                params['interruption_id'] is None):
            raise ValueError("Missing the required parameter `interruption_id` when calling `work_order_get_interruption_by_work_order_id_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'interruption_id' in params:
            path_params['interruptionId'] = params['interruption_id']  # noqa: E501

        query_params = []
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/interruption/{interruptionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_labour_by_work_order_id(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET crafts by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_labour_by_work_order_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkOrderLabourListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_labour_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_labour_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_get_labour_by_work_order_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET crafts by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_labour_by_work_order_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkOrderLabourListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_labour_by_work_order_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_labour_by_work_order_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/labour', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assetic3IntegrationRepresentationsWorkOrderLabourListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_materials_by_work_order_id(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET materials by Work order Id and task Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_materials_by_work_order_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkOrderMaterialListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_materials_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_materials_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_get_materials_by_work_order_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET materials by Work order Id and task Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_materials_by_work_order_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkOrderMaterialListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_materials_by_work_order_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_materials_by_work_order_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/materials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assetic3IntegrationRepresentationsWorkOrderMaterialListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_work_order_defect_location(self, id, **kwargs):  # noqa: E501
        """[Deprecated] Get WO defect location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_work_order_defect_location(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_work_order_defect_location_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_work_order_defect_location_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_get_work_order_defect_location_with_http_info(self, id, **kwargs):  # noqa: E501
        """[Deprecated] Get WO defect location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_work_order_defect_location_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_work_order_defect_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_work_order_defect_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/spatiallocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_work_task_by_work_task_id(self, id, work_task_id, **kwargs):  # noqa: E501
        """[Deprecated] GET Work task by Work order Id and task Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_work_task_by_work_task_id(id, work_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param str work_task_id: The work task Id of the value you want to return (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_work_task_by_work_task_id_with_http_info(id, work_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_work_task_by_work_task_id_with_http_info(id, work_task_id, **kwargs)  # noqa: E501
            return data

    def work_order_get_work_task_by_work_task_id_with_http_info(self, id, work_task_id, **kwargs):  # noqa: E501
        """[Deprecated] GET Work task by Work order Id and task Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_work_task_by_work_task_id_with_http_info(id, work_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The work order Id of the value you want to return (required)
        :param str work_task_id: The work task Id of the value you want to return (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_task_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_work_task_by_work_task_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_work_task_by_work_task_id`")  # noqa: E501
        # verify the required parameter 'work_task_id' is set
        if ('work_task_id' not in params or
                params['work_task_id'] is None):
            raise ValueError("Missing the required parameter `work_task_id` when calling `work_order_get_work_task_by_work_task_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'work_task_id' in params:
            path_params['workTaskId'] = params['work_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/worktasks/{workTaskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_get_work_tasks_by_work_order_id(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET Work tasks by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_work_tasks_by_work_order_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkTaskListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_get_work_tasks_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_work_tasks_by_work_order_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_get_work_tasks_by_work_order_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """[Deprecated] GET Work tasks by Work order Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_get_work_tasks_by_work_order_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Id of the value you want to return (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: Assetic3IntegrationRepresentationsWorkTaskListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_work_tasks_by_work_order_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_get_work_tasks_by_work_order_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/worktasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assetic3IntegrationRepresentationsWorkTaskListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_post(self, work_order, **kwargs):  # noqa: E501
        """[Deprecated] Create new Work Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_post(work_order, async=True)
        >>> result = thread.get()

        :param async bool
        :param Assetic3IntegrationRepresentationsWorkOrder work_order: Work order details to be saved (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_post_with_http_info(work_order, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_post_with_http_info(work_order, **kwargs)  # noqa: E501
            return data

    def work_order_post_with_http_info(self, work_order, **kwargs):  # noqa: E501
        """[Deprecated] Create new Work Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_post_with_http_info(work_order, async=True)
        >>> result = thread.get()

        :param async bool
        :param Assetic3IntegrationRepresentationsWorkOrder work_order: Work order details to be saved (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_order' is set
        if ('work_order' not in params or
                params['work_order'] is None):
            raise ValueError("Missing the required parameter `work_order` when calling `work_order_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_order' in params:
            body_params = params['work_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_post_interruption(self, id, interruption, **kwargs):  # noqa: E501
        """[Deprecated] Save CA down time for Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_post_interruption(id, interruption, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsInterruption interruption: complex asset interruption to be saved (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_post_interruption_with_http_info(id, interruption, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_post_interruption_with_http_info(id, interruption, **kwargs)  # noqa: E501
            return data

    def work_order_post_interruption_with_http_info(self, id, interruption, **kwargs):  # noqa: E501
        """[Deprecated] Save CA down time for Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_post_interruption_with_http_info(id, interruption, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsInterruption interruption: complex asset interruption to be saved (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'interruption']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_post_interruption" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_post_interruption`")  # noqa: E501
        # verify the required parameter 'interruption' is set
        if ('interruption' not in params or
                params['interruption'] is None):
            raise ValueError("Missing the required parameter `interruption` when calling `work_order_post_interruption`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'interruption' in params:
            body_params = params['interruption']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/interruption', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_post_work_order_defect_location(self, id, work_order_defect_location, **kwargs):  # noqa: E501
        """[Deprecated] Post WO defect location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_post_work_order_defect_location(id, work_order_defect_location, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrderDefectLocation work_order_defect_location: work order defect location to be created (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_post_work_order_defect_location_with_http_info(id, work_order_defect_location, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_post_work_order_defect_location_with_http_info(id, work_order_defect_location, **kwargs)  # noqa: E501
            return data

    def work_order_post_work_order_defect_location_with_http_info(self, id, work_order_defect_location, **kwargs):  # noqa: E501
        """[Deprecated] Post WO defect location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_post_work_order_defect_location_with_http_info(id, work_order_defect_location, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrderDefectLocation work_order_defect_location: work order defect location to be created (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_order_defect_location']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_post_work_order_defect_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_post_work_order_defect_location`")  # noqa: E501
        # verify the required parameter 'work_order_defect_location' is set
        if ('work_order_defect_location' not in params or
                params['work_order_defect_location'] is None):
            raise ValueError("Missing the required parameter `work_order_defect_location` when calling `work_order_post_work_order_defect_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_order_defect_location' in params:
            body_params = params['work_order_defect_location']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/spatiallocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_put(self, id, work_order, **kwargs):  # noqa: E501
        """[Deprecated] Update work order data for given model values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_put(id, work_order, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrder work_order: work order model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_put_with_http_info(id, work_order, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_put_with_http_info(id, work_order, **kwargs)  # noqa: E501
            return data

    def work_order_put_with_http_info(self, id, work_order, **kwargs):  # noqa: E501
        """[Deprecated] Update work order data for given model values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_put_with_http_info(id, work_order, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrder work_order: work order model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_put`")  # noqa: E501
        # verify the required parameter 'work_order' is set
        if ('work_order' not in params or
                params['work_order'] is None):
            raise ValueError("Missing the required parameter `work_order` when calling `work_order_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_order' in params:
            body_params = params['work_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_put_0(self, id, work_task_id, work_task, **kwargs):  # noqa: E501
        """[Deprecated] Updates the work task&#39;s fields : OtherCosts, Description, ExternalCosts, LossOfService, MaterialStatusId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_put_0(id, work_task_id, work_task, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param str work_task_id: work task identifier (required)
        :param Assetic3IntegrationRepresentationsWorkTask work_task: work order model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_put_0_with_http_info(id, work_task_id, work_task, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_put_0_with_http_info(id, work_task_id, work_task, **kwargs)  # noqa: E501
            return data

    def work_order_put_0_with_http_info(self, id, work_task_id, work_task, **kwargs):  # noqa: E501
        """[Deprecated] Updates the work task&#39;s fields : OtherCosts, Description, ExternalCosts, LossOfService, MaterialStatusId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_put_0_with_http_info(id, work_task_id, work_task, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param str work_task_id: work task identifier (required)
        :param Assetic3IntegrationRepresentationsWorkTask work_task: work order model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_task_id', 'work_task']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_put_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_put_0`")  # noqa: E501
        # verify the required parameter 'work_task_id' is set
        if ('work_task_id' not in params or
                params['work_task_id'] is None):
            raise ValueError("Missing the required parameter `work_task_id` when calling `work_order_put_0`")  # noqa: E501
        # verify the required parameter 'work_task' is set
        if ('work_task' not in params or
                params['work_task'] is None):
            raise ValueError("Missing the required parameter `work_task` when calling `work_order_put_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'work_task_id' in params:
            path_params['workTaskId'] = params['work_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_task' in params:
            body_params = params['work_task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/worktasks/{workTaskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_update_work_order_material(self, id, work_order_material, **kwargs):  # noqa: E501
        """[Deprecated] Updates the work order material&#39;s fields : Planned Quantity, Actual Quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_update_work_order_material(id, work_order_material, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrderMaterial work_order_material: work order material model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_update_work_order_material_with_http_info(id, work_order_material, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_update_work_order_material_with_http_info(id, work_order_material, **kwargs)  # noqa: E501
            return data

    def work_order_update_work_order_material_with_http_info(self, id, work_order_material, **kwargs):  # noqa: E501
        """[Deprecated] Updates the work order material&#39;s fields : Planned Quantity, Actual Quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_update_work_order_material_with_http_info(id, work_order_material, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrderMaterial work_order_material: work order material model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_order_material']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_update_work_order_material" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_update_work_order_material`")  # noqa: E501
        # verify the required parameter 'work_order_material' is set
        if ('work_order_material' not in params or
                params['work_order_material'] is None):
            raise ValueError("Missing the required parameter `work_order_material` when calling `work_order_update_work_order_material`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_order_material' in params:
            body_params = params['work_order_material']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/materials', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_update_work_task_on_execute(self, id, work_task_id, work_order_labour, **kwargs):  # noqa: E501
        """[Deprecated] Updates the work task crafts&#39;s fields for execution: Task Status, Actual Hours, Comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_update_work_task_on_execute(id, work_task_id, work_order_labour, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param str work_task_id: work task identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrderLabour work_order_labour: work order labour model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.work_order_update_work_task_on_execute_with_http_info(id, work_task_id, work_order_labour, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_update_work_task_on_execute_with_http_info(id, work_task_id, work_order_labour, **kwargs)  # noqa: E501
            return data

    def work_order_update_work_task_on_execute_with_http_info(self, id, work_task_id, work_order_labour, **kwargs):  # noqa: E501
        """[Deprecated] Updates the work task crafts&#39;s fields for execution: Task Status, Actual Hours, Comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.work_order_update_work_task_on_execute_with_http_info(id, work_task_id, work_order_labour, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: work order identifier (required)
        :param str work_task_id: work task identifier (required)
        :param Assetic3IntegrationRepresentationsWorkOrderLabour work_order_labour: work order labour model (required)
        :return: SystemObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_task_id', 'work_order_labour']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_update_work_task_on_execute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_update_work_task_on_execute`")  # noqa: E501
        # verify the required parameter 'work_task_id' is set
        if ('work_task_id' not in params or
                params['work_task_id'] is None):
            raise ValueError("Missing the required parameter `work_task_id` when calling `work_order_update_work_task_on_execute`")  # noqa: E501
        # verify the required parameter 'work_order_labour' is set
        if ('work_order_labour' not in params or
                params['work_order_labour'] is None):
            raise ValueError("Missing the required parameter `work_order_labour` when calling `work_order_update_work_task_on_execute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'work_task_id' in params:
            path_params['workTaskId'] = params['work_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_order_labour' in params:
            body_params = params['work_order_labour']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/labour/{workTaskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
