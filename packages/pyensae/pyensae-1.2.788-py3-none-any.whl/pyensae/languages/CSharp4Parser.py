# Generated from \CSharp4.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a5")
        buf.write("\u0ef4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\3\2\3\2\3\3\3")
        buf.write("\3\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u0339\n\5\3\5\3\5\3\5\3")
        buf.write("\5\7\5\u033f\n\5\f\5\16\5\u0342\13\5\3\6\3\6\5\6\u0346")
        buf.write("\n\6\3\7\3\7\3\7\3\7\7\7\u034c\n\7\f\7\16\7\u034f\13\7")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u0355\n\b\3\t\3\t\5\t\u0359\n\t\3")
        buf.write("\n\3\n\3\n\5\n\u035e\n\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r")
        buf.write("\3\16\3\16\3\16\7\16\u036a\n\16\f\16\16\16\u036d\13\16")
        buf.write("\3\17\3\17\7\17\u0371\n\17\f\17\16\17\u0374\13\17\3\17")
        buf.write("\7\17\u0377\n\17\f\17\16\17\u037a\13\17\3\17\7\17\u037d")
        buf.write("\n\17\f\17\16\17\u0380\13\17\3\17\3\17\3\17\3\17\7\17")
        buf.write("\u0386\n\17\f\17\16\17\u0389\13\17\3\17\7\17\u038c\n\17")
        buf.write("\f\17\16\17\u038f\13\17\3\17\3\17\3\17\7\17\u0394\n\17")
        buf.write("\f\17\16\17\u0397\13\17\3\17\7\17\u039a\n\17\f\17\16\17")
        buf.write("\u039d\13\17\3\17\7\17\u03a0\n\17\f\17\16\17\u03a3\13")
        buf.write("\17\3\17\5\17\u03a6\n\17\3\20\3\20\3\20\3\20\5\20\u03ac")
        buf.write("\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24")
        buf.write("\3\24\7\24\u03b9\n\24\f\24\16\24\u03bc\13\24\3\25\3\25")
        buf.write("\3\26\3\26\3\27\3\27\3\30\3\30\3\30\7\30\u03c7\n\30\f")
        buf.write("\30\16\30\u03ca\13\30\3\31\5\31\u03cd\n\31\3\31\3\31\3")
        buf.write("\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\5\33\u03d9\n\33")
        buf.write("\3\34\3\34\7\34\u03dd\n\34\f\34\16\34\u03e0\13\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\5\34\u03e8\n\34\3\34\7\34\u03eb")
        buf.write("\n\34\f\34\16\34\u03ee\13\34\7\34\u03f0\n\34\f\34\16\34")
        buf.write("\u03f3\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0404\n\35\3\35")
        buf.write("\5\35\u0407\n\35\3\35\3\35\3\35\5\35\u040c\n\35\3\35\3")
        buf.write("\35\3\35\3\35\5\35\u0412\n\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\5\35\u041a\n\35\3\36\3\36\3\36\3\36\3\37\3\37\3")
        buf.write("\37\3 \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\7#\u042e\n#\f#")
        buf.write("\16#\u0431\13#\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%")
        buf.write("\u043f\n%\3&\3&\3&\3&\5&\u0445\n&\3&\3&\5&\u0449\n&\3")
        buf.write("&\5&\u044c\n&\3\'\3\'\5\'\u0450\n\'\3(\3(\3(\3(\3(\5(")
        buf.write("\u0457\n(\3(\3(\5(\u045b\n(\3)\3)\3)\7)\u0460\n)\f)\16")
        buf.write(")\u0463\13)\3*\3*\3*\3*\3+\3+\5+\u046b\n+\3,\3,\3,\5,")
        buf.write("\u0470\n,\3,\3,\3-\3-\3-\7-\u0477\n-\f-\16-\u047a\13-")
        buf.write("\3.\3.\3.\3.\3.\5.\u0481\n.\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\5/\u048c\n/\3/\5/\u048f\n/\3/\3/\3/\5/\u0494\n/\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62")
        buf.write("\3\62\3\62\5\62\u04a4\n\62\3\62\3\62\5\62\u04a8\n\62\3")
        buf.write("\63\3\63\3\63\7\63\u04ad\n\63\f\63\16\63\u04b0\13\63\3")
        buf.write("\64\3\64\3\64\3\64\3\64\5\64\u04b7\n\64\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u04c3\n\65\3")
        buf.write("\66\3\66\5\66\u04c7\n\66\3\66\3\66\3\66\5\66\u04cc\n\66")
        buf.write("\5\66\u04ce\n\66\3\66\3\66\3\66\5\66\u04d3\n\66\7\66\u04d5")
        buf.write("\n\66\f\66\16\66\u04d8\13\66\3\67\3\67\5\67\u04dc\n\67")
        buf.write("\3\67\3\67\38\38\78\u04e2\n8\f8\168\u04e5\138\39\39\3")
        buf.write("9\39\39\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\5<\u0503\n<\3=\3=\3=\3=\3=\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\5>\u0557\n>\3?\3?\3?\3@\3@\3@\3A\3A\3A\3A\3")
        buf.write("A\3B\3B\3B\3B\3B\3B\3B\7B\u056b\nB\fB\16B\u056e\13B\3")
        buf.write("C\3C\3C\3C\3C\7C\u0575\nC\fC\16C\u0578\13C\3D\3D\3D\3")
        buf.write("D\3D\3D\7D\u0580\nD\fD\16D\u0583\13D\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\7E\u0592\nE\fE\16E\u0595\13E\3")
        buf.write("F\3F\3F\3F\3F\7F\u059c\nF\fF\16F\u059f\13F\3F\3F\3F\3")
        buf.write("G\3G\3H\3H\5H\u05a8\nH\3I\3I\3J\3J\3J\3J\3J\7J\u05b1\n")
        buf.write("J\fJ\16J\u05b4\13J\3K\3K\3K\7K\u05b9\nK\fK\16K\u05bc\13")
        buf.write("K\3L\3L\3L\7L\u05c1\nL\fL\16L\u05c4\13L\3M\3M\3M\7M\u05c9")
        buf.write("\nM\fM\16M\u05cc\13M\3N\3N\3N\7N\u05d1\nN\fN\16N\u05d4")
        buf.write("\13N\3O\3O\3O\7O\u05d9\nO\fO\16O\u05dc\13O\3P\3P\3P\5")
        buf.write("P\u05e1\nP\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u05e9\nQ\3R\3R\3R\3R\3")
        buf.write("S\3S\5S\u05f1\nS\3S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\5T\u0600\nT\3U\3U\5U\u0604\nU\3U\3U\3V\3V\3V\7V\u060b")
        buf.write("\nV\fV\16V\u060e\13V\3W\5W\u0611\nW\3W\3W\3W\3X\3X\3Y")
        buf.write("\3Y\5Y\u061a\nY\3Y\3Y\5Y\u061e\nY\3Z\3Z\3Z\7Z\u0623\n")
        buf.write("Z\fZ\16Z\u0626\13Z\3[\3[\3\\\3\\\5\\\u062c\n\\\3]\3]\3")
        buf.write("]\3^\3^\5^\u0633\n^\3^\3^\3^\3^\3_\5_\u063a\n_\3_\3_\5")
        buf.write("_\u063e\n_\3`\3`\7`\u0642\n`\f`\16`\u0645\13`\3a\3a\3")
        buf.write("a\3a\3a\5a\u064c\na\3b\3b\3b\3b\3b\3c\3c\3c\3d\3d\5d\u0658")
        buf.write("\nd\3d\3d\3d\3d\3d\3d\3d\3d\3e\3e\5e\u0664\ne\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3f\3f\5f\u0672\nf\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\5f\u067e\nf\3g\3g\3g\3h\3h\3h\7h\u0686")
        buf.write("\nh\fh\16h\u0689\13h\3i\3i\5i\u068d\ni\3j\3j\5j\u0691")
        buf.write("\nj\3k\3k\5k\u0695\nk\3l\3l\3l\3m\3m\3m\3m\3m\3n\3n\3")
        buf.write("n\3n\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u06b2")
        buf.write("\np\3q\3q\5q\u06b6\nq\3r\3r\3r\5r\u06bb\nr\3s\3s\3t\3")
        buf.write("t\3u\3u\3u\5u\u06c4\nu\3v\3v\5v\u06c8\nv\3w\3w\3w\3w\3")
        buf.write("w\3w\3w\3w\3w\3w\3w\3w\5w\u06d6\nw\3x\3x\5x\u06da\nx\3")
        buf.write("x\3x\3y\6y\u06df\ny\ry\16y\u06e0\3z\3z\3{\3{\3{\3{\3|")
        buf.write("\3|\3|\3|\3|\3|\5|\u06ef\n|\3}\3}\3}\3~\3~\3\177\3\177")
        buf.write("\3\177\7\177\u06f9\n\177\f\177\16\177\u06fc\13\177\3\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u0701\n\u0080\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u0706\n\u0081\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085")
        buf.write("\3\u0085\5\u0085\u0713\n\u0085\3\u0086\3\u0086\5\u0086")
        buf.write("\u0717\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\5\u0087\u0720\n\u0087\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\5\u0089")
        buf.write("\u072a\n\u0089\3\u0089\3\u0089\3\u008a\3\u008a\7\u008a")
        buf.write("\u0730\n\u008a\f\u008a\16\u008a\u0733\13\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008c\3\u008c\7\u008c\u073a\n\u008c")
        buf.write("\f\u008c\16\u008c\u073d\13\u008c\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\5\u008d\u0745\n\u008d\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\5\u008e\u074b\n\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091")
        buf.write("\3\u0091\3\u0091\5\u0091\u075e\n\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0762\n\u0091\3\u0091\3\u0091\5\u0091\u0766\n")
        buf.write("\u0091\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\5\u0092")
        buf.write("\u076d\n\u0092\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095")
        buf.write("\3\u0095\3\u0095\7\u0095\u0776\n\u0095\f\u0095\16\u0095")
        buf.write("\u0779\13\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\5\u0097\u0789\n\u0097\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\5\u009a\u079d\n\u009a\3\u009b\3\u009b")
        buf.write("\5\u009b\u07a1\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c")
        buf.write("\5\u009c\u07a7\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d")
        buf.write("\3\u009d\5\u009d\u07ae\n\u009d\3\u009d\5\u009d\u07b1\n")
        buf.write("\u009d\3\u009e\3\u009e\5\u009e\u07b5\n\u009e\3\u009e\5")
        buf.write("\u009e\u07b8\n\u009e\3\u009f\3\u009f\7\u009f\u07bc\n\u009f")
        buf.write("\f\u009f\16\u009f\u07bf\13\u009f\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u07c5\n\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u07e4")
        buf.write("\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u07ef\n\u00a8\3\u00a9")
        buf.write("\5\u00a9\u07f2\n\u00a9\3\u00a9\5\u00a9\u07f5\n\u00a9\3")
        buf.write("\u00a9\5\u00a9\u07f8\n\u00a9\3\u00a9\7\u00a9\u07fb\n\u00a9")
        buf.write("\f\u00a9\16\u00a9\u07fe\13\u00a9\3\u00a9\5\u00a9\u0801")
        buf.write("\n\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\5\u00aa\u0809\n\u00aa\3\u00ab\3\u00ab\3\u00ab\7\u00ab")
        buf.write("\u080e\n\u00ab\f\u00ab\16\u00ab\u0811\13\u00ab\3\u00ac")
        buf.write("\3\u00ac\5\u00ac\u0815\n\u00ac\3\u00ac\5\u00ac\u0818\n")
        buf.write("\u00ac\3\u00ac\5\u00ac\u081b\n\u00ac\3\u00ac\3\u00ac\3")
        buf.write("\u00ad\6\u00ad\u0820\n\u00ad\r\u00ad\16\u00ad\u0821\3")
        buf.write("\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\6\u00af")
        buf.write("\u082a\n\u00af\r\u00af\16\u00af\u082b\3\u00b0\3\u00b0")
        buf.write("\5\u00b0\u0830\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3")
        buf.write("\6\u00b3\u083d\n\u00b3\r\u00b3\16\u00b3\u083e\3\u00b4")
        buf.write("\3\u00b4\5\u00b4\u0843\n\u00b4\3\u00b5\5\u00b5\u0846\n")
        buf.write("\u00b5\3\u00b5\5\u00b5\u0849\n\u00b5\3\u00b5\3\u00b5\3")
        buf.write("\u00b5\3\u00b5\3\u00b5\5\u00b5\u0850\n\u00b5\3\u00b6\3")
        buf.write("\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7\5\u00b7\u0858\n")
        buf.write("\u00b7\3\u00b7\5\u00b7\u085b\n\u00b7\3\u00b7\5\u00b7\u085e")
        buf.write("\n\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0863\n\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0866\n\u00b7\3\u00b7\5\u00b7\u0869\n")
        buf.write("\u00b7\3\u00b7\3\u00b7\5\u00b7\u086d\n\u00b7\3\u00b8\3")
        buf.write("\u00b8\7\u00b8\u0871\n\u00b8\f\u00b8\16\u00b8\u0874\13")
        buf.write("\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u087f\n\u00b9\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\3\u00bb\5\u00bb\u0886\n\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u088b\n\u00bb\3\u00bb")
        buf.write("\7\u00bb\u088e\n\u00bb\f\u00bb\16\u00bb\u0891\13\u00bb")
        buf.write("\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd")
        buf.write("\u0899\n\u00bd\f\u00bd\16\u00bd\u089c\13\u00bd\3\u00be")
        buf.write("\3\u00be\3\u00be\7\u00be\u08a1\n\u00be\f\u00be\16\u00be")
        buf.write("\u08a4\13\u00be\3\u00bf\3\u00bf\7\u00bf\u08a8\n\u00bf")
        buf.write("\f\u00bf\16\u00bf\u08ab\13\u00bf\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1")
        buf.write("\u08b6\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u08ba\n\u00c1\5")
        buf.write("\u00c1\u08bc\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u08c1")
        buf.write("\n\u00c2\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u08c6\n\u00c3")
        buf.write("\f\u00c3\16\u00c3\u08c9\13\u00c3\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c5\3\u00c5\5\u00c5\u08d1\n\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c6\6\u00c6\u08d6\n\u00c6\r\u00c6\16\u00c6")
        buf.write("\u08d7\3\u00c7\5\u00c7\u08db\n\u00c7\3\u00c7\5\u00c7\u08de")
        buf.write("\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\5\u00c7\u08e7\n\u00c7\3\u00c7\5\u00c7\u08ea\n")
        buf.write("\u00c7\3\u00c8\6\u00c8\u08ed\n\u00c8\r\u00c8\16\u00c8")
        buf.write("\u08ee\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\5\u00c9\u0900\n\u00c9\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u0911\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u091d")
        buf.write("\n\u00cb\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u0922\n\u00cc")
        buf.write("\f\u00cc\16\u00cc\u0925\13\u00cc\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u092e\n\u00ce")
        buf.write("\f\u00ce\16\u00ce\u0931\13\u00ce\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u0938\n\u00cf\3\u00d0\3\u00d0")
        buf.write("\5\u00d0\u093c\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d2")
        buf.write("\5\u00d2\u0942\n\u00d2\3\u00d2\5\u00d2\u0945\n\u00d2\3")
        buf.write("\u00d2\5\u00d2\u0948\n\u00d2\3\u00d2\3\u00d2\3\u00d2\5")
        buf.write("\u00d2\u094d\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0951\n\u00d2")
        buf.write("\3\u00d2\3\u00d2\5\u00d2\u0955\n\u00d2\3\u00d3\6\u00d3")
        buf.write("\u0958\n\u00d3\r\u00d3\16\u00d3\u0959\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0968\n\u00d4\3\u00d5")
        buf.write("\3\u00d5\5\u00d5\u096c\n\u00d5\3\u00d6\3\u00d6\3\u00d7")
        buf.write("\3\u00d7\5\u00d7\u0972\n\u00d7\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\5\u00d8\u0978\n\u00d8\5\u00d8\u097a\n\u00d8\3")
        buf.write("\u00d9\3\u00d9\3\u00d9\7\u00d9\u097f\n\u00d9\f\u00d9\16")
        buf.write("\u00d9\u0982\13\u00d9\3\u00da\5\u00da\u0985\n\u00da\3")
        buf.write("\u00da\5\u00da\u0988\n\u00da\3\u00da\3\u00da\3\u00da\5")
        buf.write("\u00da\u098d\n\u00da\3\u00da\5\u00da\u0990\n\u00da\3\u00db")
        buf.write("\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dd\5\u00dd\u0998")
        buf.write("\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\5\u00de")
        buf.write("\u099f\n\u00de\3\u00de\5\u00de\u09a2\n\u00de\3\u00de\3")
        buf.write("\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00df\6\u00df")
        buf.write("\u09ab\n\u00df\r\u00df\16\u00df\u09ac\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u09bb\n\u00e0\3\u00e1")
        buf.write("\5\u00e1\u09be\n\u00e1\3\u00e1\5\u00e1\u09c1\n\u00e1\3")
        buf.write("\u00e1\3\u00e1\3\u00e1\5\u00e1\u09c6\n\u00e1\3\u00e1\3")
        buf.write("\u00e1\3\u00e1\5\u00e1\u09cb\n\u00e1\5\u00e1\u09cd\n\u00e1")
        buf.write("\3\u00e2\5\u00e2\u09d0\n\u00e2\3\u00e2\5\u00e2\u09d3\n")
        buf.write("\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3\5\u00e3\u09d9\n")
        buf.write("\u00e3\3\u00e3\5\u00e3\u09dc\n\u00e3\3\u00e3\3\u00e3\3")
        buf.write("\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\5\u00e4\u09e8\n\u00e4\3\u00e5\3\u00e5\5\u00e5")
        buf.write("\u09ec\n\u00e5\3\u00e6\5\u00e6\u09ef\n\u00e6\3\u00e6\5")
        buf.write("\u00e6\u09f2\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6")
        buf.write("\u09fe\n\u00e6\3\u00e7\3\u00e7\7\u00e7\u0a02\n\u00e7\f")
        buf.write("\u00e7\16\u00e7\u0a05\13\u00e7\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\5\u00e8\u0a13\n\u00e8\3\u00e9\5\u00e9")
        buf.write("\u0a16\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0a20\n\u00e9\3\u00ea")
        buf.write("\5\u00ea\u0a23\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb")
        buf.write("\5\u00eb\u0a29\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec")
        buf.write("\5\u00ec\u0a2f\n\u00ec\3\u00ec\5\u00ec\u0a32\n\u00ec\3")
        buf.write("\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed")
        buf.write("\7\u00ed\u0a3b\n\u00ed\f\u00ed\16\u00ed\u0a3e\13\u00ed")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0a4b\n\u00ee")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0a51\n\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00f0\5\u00f0")
        buf.write("\u0a59\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f1")
        buf.write("\3\u00f1\7\u00f1\u0a61\n\u00f1\f\u00f1\16\u00f1\u0a64")
        buf.write("\13\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0a6a")
        buf.write("\n\u00f2\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0a6f\n\u00f3")
        buf.write("\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write("\3\u00f7\3\u00f7\5\u00f7\u0a96\n\u00f7\3\u00f8\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8")
        buf.write("\u0aae\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0ac0\n\u00f9")
        buf.write("\3\u00fa\3\u00fa\5\u00fa\u0ac4\n\u00fa\3\u00fb\5\u00fb")
        buf.write("\u0ac7\n\u00fb\3\u00fb\5\u00fb\u0aca\n\u00fb\3\u00fb\3")
        buf.write("\u00fb\3\u00fb\3\u00fc\6\u00fc\u0ad0\n\u00fc\r\u00fc\16")
        buf.write("\u00fc\u0ad1\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3")
        buf.write("\u00fd\5\u00fd\u0ada\n\u00fd\3\u00fe\3\u00fe\3\u00fe\5")
        buf.write("\u00fe\u0adf\n\u00fe\3\u00fe\3\u00fe\5\u00fe\u0ae3\n\u00fe")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0ae9\n\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0af0")
        buf.write("\n\u00ff\3\u00ff\5\u00ff\u0af3\n\u00ff\3\u0100\3\u0100")
        buf.write("\5\u0100\u0af7\n\u0100\3\u0101\5\u0101\u0afa\n\u0101\3")
        buf.write("\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102")
        buf.write("\3\u0102\3\u0103\3\u0103\5\u0103\u0b06\n\u0103\3\u0104")
        buf.write("\3\u0104\3\u0105\3\u0105\5\u0105\u0b0c\n\u0105\3\u0106")
        buf.write("\3\u0106\5\u0106\u0b10\n\u0106\3\u0107\5\u0107\u0b13\n")
        buf.write("\u0107\3\u0107\5\u0107\u0b16\n\u0107\3\u0107\5\u0107\u0b19")
        buf.write("\n\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u0b1e\n\u0107")
        buf.write("\3\u0107\5\u0107\u0b21\n\u0107\3\u0107\5\u0107\u0b24\n")
        buf.write("\u0107\3\u0107\3\u0107\5\u0107\u0b28\n\u0107\3\u0108\3")
        buf.write("\u0108\7\u0108\u0b2c\n\u0108\f\u0108\16\u0108\u0b2f\13")
        buf.write("\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109")
        buf.write("\5\u0109\u0b37\n\u0109\3\u010a\3\u010a\3\u010a\3\u010b")
        buf.write("\3\u010b\5\u010b\u0b3e\n\u010b\3\u010b\3\u010b\3\u010c")
        buf.write("\3\u010c\7\u010c\u0b44\n\u010c\f\u010c\16\u010c\u0b47")
        buf.write("\13\u010c\3\u010d\5\u010d\u0b4a\n\u010d\3\u010d\5\u010d")
        buf.write("\u0b4d\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d")
        buf.write("\3\u010d\5\u010d\u0b55\n\u010d\3\u010e\3\u010e\7\u010e")
        buf.write("\u0b59\n\u010e\f\u010e\16\u010e\u0b5c\13\u010e\3\u010e")
        buf.write("\6\u010e\u0b5f\n\u010e\r\u010e\16\u010e\u0b60\3\u010f")
        buf.write("\3\u010f\3\u010f\3\u010f\7\u010f\u0b67\n\u010f\f\u010f")
        buf.write("\16\u010f\u0b6a\13\u010f\3\u0110\6\u0110\u0b6d\n\u0110")
        buf.write("\r\u0110\16\u0110\u0b6e\3\u0111\3\u0111\5\u0111\u0b73")
        buf.write("\n\u0111\3\u0111\3\u0111\3\u0112\3\u0112\7\u0112\u0b79")
        buf.write("\n\u0112\f\u0112\16\u0112\u0b7c\13\u0112\3\u0113\3\u0113")
        buf.write("\3\u0113\3\u0113\3\u0113\5\u0113\u0b83\n\u0113\3\u0113")
        buf.write("\3\u0113\5\u0113\u0b87\n\u0113\3\u0114\3\u0114\3\u0114")
        buf.write("\7\u0114\u0b8c\n\u0114\f\u0114\16\u0114\u0b8f\13\u0114")
        buf.write("\3\u0115\5\u0115\u0b92\n\u0115\3\u0115\5\u0115\u0b95\n")
        buf.write("\u0115\3\u0115\5\u0115\u0b98\n\u0115\3\u0115\3\u0115\3")
        buf.write("\u0115\5\u0115\u0b9d\n\u0115\3\u0115\5\u0115\u0ba0\n\u0115")
        buf.write("\3\u0115\5\u0115\u0ba3\n\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u0ba7\n\u0115\3\u0116\3\u0116\7\u0116\u0bab\n\u0116\f")
        buf.write("\u0116\16\u0116\u0bae\13\u0116\3\u0117\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\5\u0117\u0bb6\n\u0117\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\3\u0119\5\u0119\u0bbd\n\u0119")
        buf.write("\3\u0119\5\u0119\u0bc0\n\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\5\u0119\u0bc5\n\u0119\3\u0119\5\u0119\u0bc8\n\u0119\3")
        buf.write("\u0119\7\u0119\u0bcb\n\u0119\f\u0119\16\u0119\u0bce\13")
        buf.write("\u0119\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011c")
        buf.write("\3\u011c\5\u011c\u0bd7\n\u011c\3\u011c\3\u011c\3\u011d")
        buf.write("\6\u011d\u0bdc\n\u011d\r\u011d\16\u011d\u0bdd\3\u011e")
        buf.write("\5\u011e\u0be1\n\u011e\3\u011e\5\u011e\u0be4\n\u011e\3")
        buf.write("\u011e\3\u011e\3\u011e\5\u011e\u0be9\n\u011e\3\u011e\3")
        buf.write("\u011e\5\u011e\u0bed\n\u011e\3\u011e\3\u011e\5\u011e\u0bf1")
        buf.write("\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\5\u011e\u0c02\n\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\5\u011e\u0c07\n\u011e\3\u011e\3\u011e\5\u011e")
        buf.write("\u0c0b\n\u011e\3\u011e\3\u011e\5\u011e\u0c0f\n\u011e\3")
        buf.write("\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\5\u011e\u0c18\n\u011e\3\u011f\5\u011f\u0c1b\n\u011f\3")
        buf.write("\u011f\5\u011f\u0c1e\n\u011f\3\u011f\3\u011f\3\u011f\5")
        buf.write("\u011f\u0c23\n\u011f\3\u011f\3\u011f\5\u011f\u0c27\n\u011f")
        buf.write("\3\u011f\3\u011f\5\u011f\u0c2b\n\u011f\3\u011f\3\u011f")
        buf.write("\3\u0120\5\u0120\u0c30\n\u0120\3\u0120\5\u0120\u0c33\n")
        buf.write("\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\3\u0121\5\u0121\u0c3c\n\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\5\u0121\u0c41\n\u0121\3\u0121\3\u0121\3\u0121\5\u0121")
        buf.write("\u0c46\n\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u0c4b\n")
        buf.write("\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u0c50\n\u0121\5")
        buf.write("\u0121\u0c52\n\u0121\3\u0122\5\u0122\u0c55\n\u0122\3\u0122")
        buf.write("\5\u0122\u0c58\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\3\u0123\5\u0123\u0c60\n\u0123\3\u0123\5\u0123")
        buf.write("\u0c63\n\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\5\u0124\u0c6f")
        buf.write("\n\u0124\3\u0124\5\u0124\u0c72\n\u0124\3\u0124\3\u0124")
        buf.write("\3\u0124\5\u0124\u0c77\n\u0124\3\u0124\3\u0124\5\u0124")
        buf.write("\u0c7b\n\u0124\3\u0125\3\u0125\3\u0125\3\u0126\3\u0126")
        buf.write("\3\u0126\3\u0126\3\u0126\5\u0126\u0c85\n\u0126\3\u0126")
        buf.write("\3\u0126\5\u0126\u0c89\n\u0126\3\u0127\6\u0127\u0c8c\n")
        buf.write("\u0127\r\u0127\16\u0127\u0c8d\3\u0128\3\u0128\3\u0129")
        buf.write("\3\u0129\3\u0129\7\u0129\u0c95\n\u0129\f\u0129\16\u0129")
        buf.write("\u0c98\13\u0129\3\u012a\5\u012a\u0c9b\n\u012a\3\u012a")
        buf.write("\3\u012a\3\u012a\5\u012a\u0ca0\n\u012a\3\u012b\5\u012b")
        buf.write("\u0ca3\n\u012b\3\u012b\5\u012b\u0ca6\n\u012b\3\u012b\3")
        buf.write("\u012b\3\u012b\3\u012b\5\u012b\u0cac\n\u012b\3\u012b\3")
        buf.write("\u012b\5\u012b\u0cb0\n\u012b\3\u012b\3\u012b\5\u012b\u0cb4")
        buf.write("\n\u012b\3\u012b\3\u012b\3\u012c\3\u012c\7\u012c\u0cba")
        buf.write("\n\u012c\f\u012c\16\u012c\u0cbd\13\u012c\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u0cc5\n\u012d")
        buf.write("\3\u012e\3\u012e\3\u012f\6\u012f\u0cca\n\u012f\r\u012f")
        buf.write("\16\u012f\u0ccb\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130")
        buf.write("\u0cd2\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131")
        buf.write("\3\u0132\3\u0132\5\u0132\u0cdb\n\u0132\3\u0133\3\u0133")
        buf.write("\3\u0134\6\u0134\u0ce0\n\u0134\r\u0134\16\u0134\u0ce1")
        buf.write("\3\u0135\3\u0135\5\u0135\u0ce6\n\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u0cea\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136")
        buf.write("\3\u0136\3\u0137\3\u0137\5\u0137\u0cf3\n\u0137\3\u0138")
        buf.write("\3\u0138\3\u0138\7\u0138\u0cf8\n\u0138\f\u0138\16\u0138")
        buf.write("\u0cfb\13\u0138\3\u0139\3\u0139\5\u0139\u0cff\n\u0139")
        buf.write("\3\u013a\3\u013a\3\u013b\3\u013b\5\u013b\u0d05\n\u013b")
        buf.write("\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\7\u013c\u0d0c")
        buf.write("\n\u013c\f\u013c\16\u013c\u0d0f\13\u013c\3\u013d\3\u013d")
        buf.write("\3\u013e\3\u013e\3\u013e\7\u013e\u0d16\n\u013e\f\u013e")
        buf.write("\16\u013e\u0d19\13\u013e\3\u013f\3\u013f\3\u013f\3\u013f")
        buf.write("\3\u0140\3\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0143")
        buf.write("\3\u0143\3\u0144\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146")
        buf.write("\3\u0147\3\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a")
        buf.write("\3\u014a\3\u014b\3\u014b\3\u014c\5\u014c\u0d38\n\u014c")
        buf.write("\3\u014c\5\u014c\u0d3b\n\u014c\3\u014c\5\u014c\u0d3e\n")
        buf.write("\u014c\3\u014c\3\u014c\5\u014c\u0d42\n\u014c\3\u014c\3")
        buf.write("\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\5\u014d")
        buf.write("\u0d4b\n\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write("\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write("\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write("\3\u014d\3\u014d\5\u014d\u0d62\n\u014d\3\u014e\3\u014e")
        buf.write("\5\u014e\u0d66\n\u014e\3\u014f\3\u014f\3\u014f\3\u0150")
        buf.write("\3\u0150\3\u0151\3\u0151\3\u0151\7\u0151\u0d70\n\u0151")
        buf.write("\f\u0151\16\u0151\u0d73\13\u0151\3\u0151\3\u0151\3\u0151")
        buf.write("\3\u0151\3\u0151\7\u0151\u0d7a\n\u0151\f\u0151\16\u0151")
        buf.write("\u0d7d\13\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151")
        buf.write("\u0d83\n\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154")
        buf.write("\3\u0154\5\u0154\u0d8b\n\u0154\3\u0155\3\u0155\3\u0155")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0157\3\u0157\3\u0157\3\u0157")
        buf.write("\3\u0157\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158")
        buf.write("\3\u0158\3\u0159\3\u0159\3\u0159\7\u0159\u0da2\n\u0159")
        buf.write("\f\u0159\16\u0159\u0da5\13\u0159\3\u015a\3\u015a\3\u015a")
        buf.write("\3\u015a\3\u015b\3\u015b\3\u015b\5\u015b\u0dae\n\u015b")
        buf.write("\3\u015c\3\u015c\3\u015d\5\u015d\u0db3\n\u015d\3\u015d")
        buf.write("\5\u015d\u0db6\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d")
        buf.write("\3\u015d\3\u015e\6\u015e\u0dbe\n\u015e\r\u015e\16\u015e")
        buf.write("\u0dbf\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161\6\u0161")
        buf.write("\u0dc7\n\u0161\r\u0161\16\u0161\u0dc8\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163\3\u0164\3\u0164")
        buf.write("\3\u0164\3\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0166")
        buf.write("\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0169\3\u0169")
        buf.write("\3\u016a\3\u016a\3\u016b\3\u016b\3\u016c\3\u016c\3\u016d")
        buf.write("\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f\3\u0170\3\u0170")
        buf.write("\3\u0171\3\u0171\3\u0172\3\u0172\3\u0173\3\u0173\3\u0174")
        buf.write("\3\u0174\3\u0175\3\u0175\3\u0176\3\u0176\3\u0177\3\u0177")
        buf.write("\3\u0178\3\u0178\3\u0179\3\u0179\3\u017a\3\u017a\3\u017b")
        buf.write("\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\3\u017d\3\u017d\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e")
        buf.write("\3\u017e\3\u017e\3\u017e\5\u017e\u0e16\n\u017e\3\u017f")
        buf.write("\3\u017f\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\5\u0181")
        buf.write("\u0e1f\n\u0181\3\u0181\5\u0181\u0e22\n\u0181\3\u0181\5")
        buf.write("\u0181\u0e25\n\u0181\3\u0181\3\u0181\5\u0181\u0e29\n\u0181")
        buf.write("\3\u0182\3\u0182\3\u0182\5\u0182\u0e2e\n\u0182\3\u0182")
        buf.write("\5\u0182\u0e31\n\u0182\3\u0182\5\u0182\u0e34\n\u0182\3")
        buf.write("\u0182\3\u0182\5\u0182\u0e38\n\u0182\3\u0183\3\u0183\3")
        buf.write("\u0183\5\u0183\u0e3d\n\u0183\3\u0183\5\u0183\u0e40\n\u0183")
        buf.write("\3\u0183\5\u0183\u0e43\n\u0183\3\u0183\3\u0183\5\u0183")
        buf.write("\u0e47\n\u0183\3\u0184\3\u0184\3\u0184\5\u0184\u0e4c\n")
        buf.write("\u0184\3\u0184\3\u0184\5\u0184\u0e50\n\u0184\3\u0185\3")
        buf.write("\u0185\3\u0185\3\u0185\5\u0185\u0e56\n\u0185\3\u0185\3")
        buf.write("\u0185\5\u0185\u0e5a\n\u0185\3\u0185\3\u0185\5\u0185\u0e5e")
        buf.write("\n\u0185\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186\3\u0186")
        buf.write("\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186")
        buf.write("\u0e6c\n\u0186\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188")
        buf.write("\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\3\u0189")
        buf.write("\3\u0189\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a")
        buf.write("\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b")
        buf.write("\3\u018b\3\u018c\3\u018c\3\u018c\5\u018c\u0e8c\n\u018c")
        buf.write("\3\u018c\3\u018c\5\u018c\u0e90\n\u018c\3\u018c\3\u018c")
        buf.write("\3\u018d\3\u018d\5\u018d\u0e96\n\u018d\3\u018d\3\u018d")
        buf.write("\5\u018d\u0e9a\n\u018d\3\u018d\3\u018d\5\u018d\u0e9e\n")
        buf.write("\u018d\3\u018d\3\u018d\3\u018e\3\u018e\3\u018f\3\u018f")
        buf.write("\3\u018f\3\u018f\3\u018f\5\u018f\u0ea9\n\u018f\3\u018f")
        buf.write("\3\u018f\3\u018f\3\u018f\7\u018f\u0eaf\n\u018f\f\u018f")
        buf.write("\16\u018f\u0eb2\13\u018f\3\u0190\3\u0190\3\u0190\3\u0190")
        buf.write("\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\5\u0190\u0ebd")
        buf.write("\n\u0190\3\u0190\3\u0190\3\u0190\3\u0191\3\u0191\5\u0191")
        buf.write("\u0ec4\n\u0191\3\u0191\3\u0191\5\u0191\u0ec8\n\u0191\3")
        buf.write("\u0191\3\u0191\5\u0191\u0ecc\n\u0191\3\u0191\3\u0191\3")
        buf.write("\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0193\3\u0193")
        buf.write("\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194")
        buf.write("\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195\3\u0195")
        buf.write("\3\u0195\3\u0196\3\u0196\5\u0196\u0ee8\n\u0196\3\u0196")
        buf.write("\3\u0196\3\u0197\3\u0197\5\u0197\u0eee\n\u0197\3\u0197")
        buf.write("\3\u0197\5\u0197\u0ef2\n\u0197\3\u0197\2\2\u0198\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write("\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write("\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write("\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a")
        buf.write("\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c")
        buf.write("\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e")
        buf.write("\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180")
        buf.write("\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192")
        buf.write("\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4")
        buf.write("\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6")
        buf.write("\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8")
        buf.write("\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da")
        buf.write("\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec")
        buf.write("\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe")
        buf.write("\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210")
        buf.write("\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222")
        buf.write("\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234")
        buf.write("\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246")
        buf.write("\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258")
        buf.write("\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a")
        buf.write("\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c")
        buf.write("\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e")
        buf.write("\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0")
        buf.write("\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2")
        buf.write("\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4")
        buf.write("\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6")
        buf.write("\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8")
        buf.write("\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa")
        buf.write("\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c")
        buf.write("\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e")
        buf.write("\u0320\u0322\u0324\u0326\u0328\u032a\u032c\2\22\23\2\f")
        buf.write("\16\20\20\24\24  ##&&\60\61\63\63::<=DDFFJJPPTUkkmn\n")
        buf.write("\2\25\25\30\30\67\67??RRVVbcff\4\2\"\"--\4\2\u0080\u0080")
        buf.write("\u008b\u008b\20\2\22\22\25\25\30\30\35\35\"\"--\67\67")
        buf.write("??CCRRVVZZbcff\5\2w}\u008a\u008b\u0093\u0094\5\2yy\u008b")
        buf.write("\u008b\u0090\u0091\4\2GGOO\5\2GGOO]]\7\2**__~\177\u0086")
        buf.write("\u0087\u008e\u008f\4\2\66\66GG\5\299AAKM\4\2))ee\6\29")
        buf.write("9AAKMee\4\2**__\23\2\13\13\17\17\21\23\25\37!\"$%\'/\62")
        buf.write("\62\649;;>CEEGIKOQSVjll\2\u101c\2\u032e\3\2\2\2\4\u0330")
        buf.write("\3\2\2\2\6\u0332\3\2\2\2\b\u0338\3\2\2\2\n\u0345\3\2\2")
        buf.write("\2\f\u0347\3\2\2\2\16\u0354\3\2\2\2\20\u0358\3\2\2\2\22")
        buf.write("\u035d\3\2\2\2\24\u035f\3\2\2\2\26\u0361\3\2\2\2\30\u0363")
        buf.write("\3\2\2\2\32\u0366\3\2\2\2\34\u03a5\3\2\2\2\36\u03ab\3")
        buf.write("\2\2\2 \u03ad\3\2\2\2\"\u03af\3\2\2\2$\u03b1\3\2\2\2&")
        buf.write("\u03b5\3\2\2\2(\u03bd\3\2\2\2*\u03bf\3\2\2\2,\u03c1\3")
        buf.write("\2\2\2.\u03c3\3\2\2\2\60\u03cc\3\2\2\2\62\u03d0\3\2\2")
        buf.write("\2\64\u03d8\3\2\2\2\66\u03da\3\2\2\28\u0419\3\2\2\2:\u041b")
        buf.write("\3\2\2\2<\u041f\3\2\2\2>\u0422\3\2\2\2@\u0426\3\2\2\2")
        buf.write("B\u0428\3\2\2\2D\u042a\3\2\2\2F\u0432\3\2\2\2H\u043e\3")
        buf.write("\2\2\2J\u0440\3\2\2\2L\u044f\3\2\2\2N\u045a\3\2\2\2P\u045c")
        buf.write("\3\2\2\2R\u0464\3\2\2\2T\u046a\3\2\2\2V\u046c\3\2\2\2")
        buf.write("X\u0473\3\2\2\2Z\u0480\3\2\2\2\\\u0482\3\2\2\2^\u0495")
        buf.write("\3\2\2\2`\u049b\3\2\2\2b\u04a7\3\2\2\2d\u04a9\3\2\2\2")
        buf.write("f\u04b6\3\2\2\2h\u04b8\3\2\2\2j\u04c4\3\2\2\2l\u04d9\3")
        buf.write("\2\2\2n\u04df\3\2\2\2p\u04e6\3\2\2\2r\u04eb\3\2\2\2t\u04f0")
        buf.write("\3\2\2\2v\u0502\3\2\2\2x\u0504\3\2\2\2z\u0556\3\2\2\2")
        buf.write("|\u0558\3\2\2\2~\u055b\3\2\2\2\u0080\u055e\3\2\2\2\u0082")
        buf.write("\u0563\3\2\2\2\u0084\u056f\3\2\2\2\u0086\u0579\3\2\2\2")
        buf.write("\u0088\u0584\3\2\2\2\u008a\u0596\3\2\2\2\u008c\u05a3\3")
        buf.write("\2\2\2\u008e\u05a5\3\2\2\2\u0090\u05a9\3\2\2\2\u0092\u05ab")
        buf.write("\3\2\2\2\u0094\u05b5\3\2\2\2\u0096\u05bd\3\2\2\2\u0098")
        buf.write("\u05c5\3\2\2\2\u009a\u05cd\3\2\2\2\u009c\u05d5\3\2\2\2")
        buf.write("\u009e\u05dd\3\2\2\2\u00a0\u05e2\3\2\2\2\u00a2\u05ea\3")
        buf.write("\2\2\2\u00a4\u05ee\3\2\2\2\u00a6\u05ff\3\2\2\2\u00a8\u0601")
        buf.write("\3\2\2\2\u00aa\u0607\3\2\2\2\u00ac\u0610\3\2\2\2\u00ae")
        buf.write("\u0615\3\2\2\2\u00b0\u061d\3\2\2\2\u00b2\u061f\3\2\2\2")
        buf.write("\u00b4\u0627\3\2\2\2\u00b6\u062b\3\2\2\2\u00b8\u062d\3")
        buf.write("\2\2\2\u00ba\u0630\3\2\2\2\u00bc\u0639\3\2\2\2\u00be\u063f")
        buf.write("\3\2\2\2\u00c0\u064b\3\2\2\2\u00c2\u064d\3\2\2\2\u00c4")
        buf.write("\u0652\3\2\2\2\u00c6\u0655\3\2\2\2\u00c8\u0661\3\2\2\2")
        buf.write("\u00ca\u066f\3\2\2\2\u00cc\u067f\3\2\2\2\u00ce\u0682\3")
        buf.write("\2\2\2\u00d0\u068a\3\2\2\2\u00d2\u0690\3\2\2\2\u00d4\u0694")
        buf.write("\3\2\2\2\u00d6\u0696\3\2\2\2\u00d8\u0699\3\2\2\2\u00da")
        buf.write("\u069e\3\2\2\2\u00dc\u06a2\3\2\2\2\u00de\u06b1\3\2\2\2")
        buf.write("\u00e0\u06b5\3\2\2\2\u00e2\u06ba\3\2\2\2\u00e4\u06bc\3")
        buf.write("\2\2\2\u00e6\u06be\3\2\2\2\u00e8\u06c3\3\2\2\2\u00ea\u06c7")
        buf.write("\3\2\2\2\u00ec\u06d5\3\2\2\2\u00ee\u06d7\3\2\2\2\u00f0")
        buf.write("\u06de\3\2\2\2\u00f2\u06e2\3\2\2\2\u00f4\u06e4\3\2\2\2")
        buf.write("\u00f6\u06ee\3\2\2\2\u00f8\u06f0\3\2\2\2\u00fa\u06f3\3")
        buf.write("\2\2\2\u00fc\u06f5\3\2\2\2\u00fe\u06fd\3\2\2\2\u0100\u0705")
        buf.write("\3\2\2\2\u0102\u0707\3\2\2\2\u0104\u070b\3\2\2\2\u0106")
        buf.write("\u070e\3\2\2\2\u0108\u0712\3\2\2\2\u010a\u0716\3\2\2\2")
        buf.write("\u010c\u0718\3\2\2\2\u010e\u0721\3\2\2\2\u0110\u0727\3")
        buf.write("\2\2\2\u0112\u072d\3\2\2\2\u0114\u0734\3\2\2\2\u0116\u0737")
        buf.write("\3\2\2\2\u0118\u0744\3\2\2\2\u011a\u074a\3\2\2\2\u011c")
        buf.write("\u074c\3\2\2\2\u011e\u0752\3\2\2\2\u0120\u075a\3\2\2\2")
        buf.write("\u0122\u076c\3\2\2\2\u0124\u076e\3\2\2\2\u0126\u0770\3")
        buf.write("\2\2\2\u0128\u0772\3\2\2\2\u012a\u077a\3\2\2\2\u012c\u0788")
        buf.write("\3\2\2\2\u012e\u078a\3\2\2\2\u0130\u078d\3\2\2\2\u0132")
        buf.write("\u079c\3\2\2\2\u0134\u079e\3\2\2\2\u0136\u07a4\3\2\2\2")
        buf.write("\u0138\u07aa\3\2\2\2\u013a\u07b7\3\2\2\2\u013c\u07b9\3")
        buf.write("\2\2\2\u013e\u07c0\3\2\2\2\u0140\u07c9\3\2\2\2\u0142\u07cc")
        buf.write("\3\2\2\2\u0144\u07cf\3\2\2\2\u0146\u07d2\3\2\2\2\u0148")
        buf.write("\u07d5\3\2\2\2\u014a\u07db\3\2\2\2\u014c\u07e3\3\2\2\2")
        buf.write("\u014e\u07ee\3\2\2\2\u0150\u07f1\3\2\2\2\u0152\u0804\3")
        buf.write("\2\2\2\u0154\u080a\3\2\2\2\u0156\u0812\3\2\2\2\u0158\u081f")
        buf.write("\3\2\2\2\u015a\u0823\3\2\2\2\u015c\u0829\3\2\2\2\u015e")
        buf.write("\u082f\3\2\2\2\u0160\u0831\3\2\2\2\u0162\u0837\3\2\2\2")
        buf.write("\u0164\u083c\3\2\2\2\u0166\u0842\3\2\2\2\u0168\u0845\3")
        buf.write("\2\2\2\u016a\u0851\3\2\2\2\u016c\u0857\3\2\2\2\u016e\u086e")
        buf.write("\3\2\2\2\u0170\u087e\3\2\2\2\u0172\u0880\3\2\2\2\u0174")
        buf.write("\u0885\3\2\2\2\u0176\u0892\3\2\2\2\u0178\u0894\3\2\2\2")
        buf.write("\u017a\u089d\3\2\2\2\u017c\u08a5\3\2\2\2\u017e\u08ac\3")
        buf.write("\2\2\2\u0180\u08bb\3\2\2\2\u0182\u08c0\3\2\2\2\u0184\u08c2")
        buf.write("\3\2\2\2\u0186\u08ca\3\2\2\2\u0188\u08ce\3\2\2\2\u018a")
        buf.write("\u08d5\3\2\2\2\u018c\u08e9\3\2\2\2\u018e\u08ec\3\2\2\2")
        buf.write("\u0190\u08ff\3\2\2\2\u0192\u0910\3\2\2\2\u0194\u0912\3")
        buf.write("\2\2\2\u0196\u091e\3\2\2\2\u0198\u0926\3\2\2\2\u019a\u092a")
        buf.write("\3\2\2\2\u019c\u0937\3\2\2\2\u019e\u093b\3\2\2\2\u01a0")
        buf.write("\u093d\3\2\2\2\u01a2\u0941\3\2\2\2\u01a4\u0957\3\2\2\2")
        buf.write("\u01a6\u0967\3\2\2\2\u01a8\u096b\3\2\2\2\u01aa\u096d\3")
        buf.write("\2\2\2\u01ac\u0971\3\2\2\2\u01ae\u0979\3\2\2\2\u01b0\u097b")
        buf.write("\3\2\2\2\u01b2\u098f\3\2\2\2\u01b4\u0991\3\2\2\2\u01b6")
        buf.write("\u0994\3\2\2\2\u01b8\u0997\3\2\2\2\u01ba\u099e\3\2\2\2")
        buf.write("\u01bc\u09aa\3\2\2\2\u01be\u09ba\3\2\2\2\u01c0\u09bd\3")
        buf.write("\2\2\2\u01c2\u09cf\3\2\2\2\u01c4\u09d8\3\2\2\2\u01c6\u09e7")
        buf.write("\3\2\2\2\u01c8\u09eb\3\2\2\2\u01ca\u09ee\3\2\2\2\u01cc")
        buf.write("\u09ff\3\2\2\2\u01ce\u0a12\3\2\2\2\u01d0\u0a15\3\2\2\2")
        buf.write("\u01d2\u0a22\3\2\2\2\u01d4\u0a28\3\2\2\2\u01d6\u0a2e\3")
        buf.write("\2\2\2\u01d8\u0a38\3\2\2\2\u01da\u0a4a\3\2\2\2\u01dc\u0a4c")
        buf.write("\3\2\2\2\u01de\u0a58\3\2\2\2\u01e0\u0a5e\3\2\2\2\u01e2")
        buf.write("\u0a69\3\2\2\2\u01e4\u0a6e\3\2\2\2\u01e6\u0a70\3\2\2\2")
        buf.write("\u01e8\u0a78\3\2\2\2\u01ea\u0a7a\3\2\2\2\u01ec\u0a95\3")
        buf.write("\2\2\2\u01ee\u0aad\3\2\2\2\u01f0\u0abf\3\2\2\2\u01f2\u0ac3")
        buf.write("\3\2\2\2\u01f4\u0ac6\3\2\2\2\u01f6\u0acf\3\2\2\2\u01f8")
        buf.write("\u0ad9\3\2\2\2\u01fa\u0adb\3\2\2\2\u01fc\u0af2\3\2\2\2")
        buf.write("\u01fe\u0af6\3\2\2\2\u0200\u0af9\3\2\2\2\u0202\u0b01\3")
        buf.write("\2\2\2\u0204\u0b05\3\2\2\2\u0206\u0b07\3\2\2\2\u0208\u0b0b")
        buf.write("\3\2\2\2\u020a\u0b0f\3\2\2\2\u020c\u0b12\3\2\2\2\u020e")
        buf.write("\u0b29\3\2\2\2\u0210\u0b36\3\2\2\2\u0212\u0b38\3\2\2\2")
        buf.write("\u0214\u0b3b\3\2\2\2\u0216\u0b41\3\2\2\2\u0218\u0b49\3")
        buf.write("\2\2\2\u021a\u0b56\3\2\2\2\u021c\u0b62\3\2\2\2\u021e\u0b6c")
        buf.write("\3\2\2\2\u0220\u0b70\3\2\2\2\u0222\u0b76\3\2\2\2\u0224")
        buf.write("\u0b86\3\2\2\2\u0226\u0b88\3\2\2\2\u0228\u0b91\3\2\2\2")
        buf.write("\u022a\u0ba8\3\2\2\2\u022c\u0bb5\3\2\2\2\u022e\u0bb7\3")
        buf.write("\2\2\2\u0230\u0bbc\3\2\2\2\u0232\u0bcf\3\2\2\2\u0234\u0bd1")
        buf.write("\3\2\2\2\u0236\u0bd4\3\2\2\2\u0238\u0bdb\3\2\2\2\u023a")
        buf.write("\u0be0\3\2\2\2\u023c\u0c1a\3\2\2\2\u023e\u0c2f\3\2\2\2")
        buf.write("\u0240\u0c3b\3\2\2\2\u0242\u0c54\3\2\2\2\u0244\u0c5f\3")
        buf.write("\2\2\2\u0246\u0c6e\3\2\2\2\u0248\u0c7c\3\2\2\2\u024a\u0c88")
        buf.write("\3\2\2\2\u024c\u0c8b\3\2\2\2\u024e\u0c8f\3\2\2\2\u0250")
        buf.write("\u0c91\3\2\2\2\u0252\u0c9a\3\2\2\2\u0254\u0ca2\3\2\2\2")
        buf.write("\u0256\u0cb7\3\2\2\2\u0258\u0cc4\3\2\2\2\u025a\u0cc6\3")
        buf.write("\2\2\2\u025c\u0cc9\3\2\2\2\u025e\u0ccd\3\2\2\2\u0260\u0cd5")
        buf.write("\3\2\2\2\u0262\u0cda\3\2\2\2\u0264\u0cdc\3\2\2\2\u0266")
        buf.write("\u0cdf\3\2\2\2\u0268\u0ce3\3\2\2\2\u026a\u0ced\3\2\2\2")
        buf.write("\u026c\u0cf2\3\2\2\2\u026e\u0cf4\3\2\2\2\u0270\u0cfc\3")
        buf.write("\2\2\2\u0272\u0d00\3\2\2\2\u0274\u0d02\3\2\2\2\u0276\u0d08")
        buf.write("\3\2\2\2\u0278\u0d10\3\2\2\2\u027a\u0d12\3\2\2\2\u027c")
        buf.write("\u0d1a\3\2\2\2\u027e\u0d1e\3\2\2\2\u0280\u0d20\3\2\2\2")
        buf.write("\u0282\u0d22\3\2\2\2\u0284\u0d24\3\2\2\2\u0286\u0d26\3")
        buf.write("\2\2\2\u0288\u0d28\3\2\2\2\u028a\u0d2a\3\2\2\2\u028c\u0d2c")
        buf.write("\3\2\2\2\u028e\u0d2e\3\2\2\2\u0290\u0d30\3\2\2\2\u0292")
        buf.write("\u0d32\3\2\2\2\u0294\u0d34\3\2\2\2\u0296\u0d37\3\2\2\2")
        buf.write("\u0298\u0d61\3\2\2\2\u029a\u0d65\3\2\2\2\u029c\u0d67\3")
        buf.write("\2\2\2\u029e\u0d6a\3\2\2\2\u02a0\u0d82\3\2\2\2\u02a2\u0d84")
        buf.write("\3\2\2\2\u02a4\u0d86\3\2\2\2\u02a6\u0d8a\3\2\2\2\u02a8")
        buf.write("\u0d8c\3\2\2\2\u02aa\u0d8f\3\2\2\2\u02ac\u0d92\3\2\2\2")
        buf.write("\u02ae\u0d97\3\2\2\2\u02b0\u0d9e\3\2\2\2\u02b2\u0da6\3")
        buf.write("\2\2\2\u02b4\u0dad\3\2\2\2\u02b6\u0daf\3\2\2\2\u02b8\u0db2")
        buf.write("\3\2\2\2\u02ba\u0dbd\3\2\2\2\u02bc\u0dc1\3\2\2\2\u02be")
        buf.write("\u0dc3\3\2\2\2\u02c0\u0dc6\3\2\2\2\u02c2\u0dca\3\2\2\2")
        buf.write("\u02c4\u0dcf\3\2\2\2\u02c6\u0dd1\3\2\2\2\u02c8\u0dd7\3")
        buf.write("\2\2\2\u02ca\u0dd9\3\2\2\2\u02cc\u0ddb\3\2\2\2\u02ce\u0ddd")
        buf.write("\3\2\2\2\u02d0\u0ddf\3\2\2\2\u02d2\u0de1\3\2\2\2\u02d4")
        buf.write("\u0de3\3\2\2\2\u02d6\u0de5\3\2\2\2\u02d8\u0de7\3\2\2\2")
        buf.write("\u02da\u0de9\3\2\2\2\u02dc\u0deb\3\2\2\2\u02de\u0ded\3")
        buf.write("\2\2\2\u02e0\u0def\3\2\2\2\u02e2\u0df1\3\2\2\2\u02e4\u0df3")
        buf.write("\3\2\2\2\u02e6\u0df5\3\2\2\2\u02e8\u0df7\3\2\2\2\u02ea")
        buf.write("\u0df9\3\2\2\2\u02ec\u0dfb\3\2\2\2\u02ee\u0dfd\3\2\2\2")
        buf.write("\u02f0\u0dff\3\2\2\2\u02f2\u0e01\3\2\2\2\u02f4\u0e03\3")
        buf.write("\2\2\2\u02f6\u0e07\3\2\2\2\u02f8\u0e0b\3\2\2\2\u02fa\u0e15")
        buf.write("\3\2\2\2\u02fc\u0e17\3\2\2\2\u02fe\u0e19\3\2\2\2\u0300")
        buf.write("\u0e1b\3\2\2\2\u0302\u0e2a\3\2\2\2\u0304\u0e39\3\2\2\2")
        buf.write("\u0306\u0e48\3\2\2\2\u0308\u0e51\3\2\2\2\u030a\u0e61\3")
        buf.write("\2\2\2\u030c\u0e6d\3\2\2\2\u030e\u0e70\3\2\2\2\u0310\u0e75")
        buf.write("\3\2\2\2\u0312\u0e7a\3\2\2\2\u0314\u0e82\3\2\2\2\u0316")
        buf.write("\u0e88\3\2\2\2\u0318\u0e93\3\2\2\2\u031a\u0ea1\3\2\2\2")
        buf.write("\u031c\u0ea8\3\2\2\2\u031e\u0eb3\3\2\2\2\u0320\u0ec1\3")
        buf.write("\2\2\2\u0322\u0ecf\3\2\2\2\u0324\u0ed4\3\2\2\2\u0326\u0ed9")
        buf.write("\3\2\2\2\u0328\u0ee1\3\2\2\2\u032a\u0ee5\3\2\2\2\u032c")
        buf.write("\u0eeb\3\2\2\2\u032e\u032f\5\b\5\2\u032f\3\3\2\2\2\u0330")
        buf.write("\u0331\5\b\5\2\u0331\5\3\2\2\2\u0332\u0333\t\2\2\2\u0333")
        buf.write("\7\3\2\2\2\u0334\u0335\5\6\4\2\u0335\u0336\5\n\6\2\u0336")
        buf.write("\u0339\3\2\2\2\u0337\u0339\5\u016a\u00b6\2\u0338\u0334")
        buf.write("\3\2\2\2\u0338\u0337\3\2\2\2\u0339\u0340\3\2\2\2\u033a")
        buf.write("\u033b\7z\2\2\u033b\u033c\5\6\4\2\u033c\u033d\5\n\6\2")
        buf.write("\u033d\u033f\3\2\2\2\u033e\u033a\3\2\2\2\u033f\u0342\3")
        buf.write("\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341\t")
        buf.write("\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0346\5$\23\2\u0344")
        buf.write("\u0346\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0344\3\2\2\2")
        buf.write("\u0346\13\3\2\2\2\u0347\u034d\5\16\b\2\u0348\u034c\7\u008b")
        buf.write("\2\2\u0349\u034c\5\u0220\u0111\2\u034a\u034c\7\u0080\2")
        buf.write("\2\u034b\u0348\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034a")
        buf.write("\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\r\3\2\2\2\u034f\u034d\3\2\2\2\u0350")
        buf.write("\u0355\5\20\t\2\u0351\u0355\5\36\20\2\u0352\u0353\7i\2")
        buf.write("\2\u0353\u0355\7\u0080\2\2\u0354\u0350\3\2\2\2\u0354\u0351")
        buf.write("\3\2\2\2\u0354\u0352\3\2\2\2\u0355\17\3\2\2\2\u0356\u0359")
        buf.write("\5\22\n\2\u0357\u0359\7\22\2\2\u0358\u0356\3\2\2\2\u0358")
        buf.write("\u0357\3\2\2\2\u0359\21\3\2\2\2\u035a\u035e\5\24\13\2")
        buf.write("\u035b\u035e\5\26\f\2\u035c\u035e\7\35\2\2\u035d\u035a")
        buf.write("\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035c\3\2\2\2\u035e")
        buf.write("\23\3\2\2\2\u035f\u0360\t\3\2\2\u0360\25\3\2\2\2\u0361")
        buf.write("\u0362\t\4\2\2\u0362\27\3\2\2\2\u0363\u0364\5\32\16\2")
        buf.write("\u0364\u0365\7\u008b\2\2\u0365\31\3\2\2\2\u0366\u036b")
        buf.write("\5\16\b\2\u0367\u036a\5\u0220\u0111\2\u0368\u036a\7\u0080")
        buf.write("\2\2\u0369\u0367\3\2\2\2\u0369\u0368\3\2\2\2\u036a\u036d")
        buf.write("\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c")
        buf.write("\33\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u0378\5\20\t\2\u036f")
        buf.write("\u0371\t\5\2\2\u0370\u036f\3\2\2\2\u0371\u0374\3\2\2\2")
        buf.write("\u0372\u0370\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3")
        buf.write("\2\2\2\u0374\u0372\3\2\2\2\u0375\u0377\5\u0220\u0111\2")
        buf.write("\u0376\u0372\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0376\3")
        buf.write("\2\2\2\u0378\u0379\3\2\2\2\u0379\u037e\3\2\2\2\u037a\u0378")
        buf.write("\3\2\2\2\u037b\u037d\t\5\2\2\u037c\u037b\3\2\2\2\u037d")
        buf.write("\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2")
        buf.write("\u037f\u0381\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u0382\5")
        buf.write("\u0220\u0111\2\u0382\u03a6\3\2\2\2\u0383\u038d\5\36\20")
        buf.write("\2\u0384\u0386\t\5\2\2\u0385\u0384\3\2\2\2\u0386\u0389")
        buf.write("\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388")
        buf.write("\u038a\3\2\2\2\u0389\u0387\3\2\2\2\u038a\u038c\5\u0220")
        buf.write("\u0111\2\u038b\u0387\3\2\2\2\u038c\u038f\3\2\2\2\u038d")
        buf.write("\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u03a6\3\2\2\2")
        buf.write("\u038f\u038d\3\2\2\2\u0390\u0391\7i\2\2\u0391\u039b\7")
        buf.write("\u0080\2\2\u0392\u0394\t\5\2\2\u0393\u0392\3\2\2\2\u0394")
        buf.write("\u0397\3\2\2\2\u0395\u0393\3\2\2\2\u0395\u0396\3\2\2\2")
        buf.write("\u0396\u0398\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u039a\5")
        buf.write("\u0220\u0111\2\u0399\u0395\3\2\2\2\u039a\u039d\3\2\2\2")
        buf.write("\u039b\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03a1\3")
        buf.write("\2\2\2\u039d\u039b\3\2\2\2\u039e\u03a0\t\5\2\2\u039f\u039e")
        buf.write("\3\2\2\2\u03a0\u03a3\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1")
        buf.write("\u03a2\3\2\2\2\u03a2\u03a4\3\2\2\2\u03a3\u03a1\3\2\2\2")
        buf.write("\u03a4\u03a6\5\u0220\u0111\2\u03a5\u036e\3\2\2\2\u03a5")
        buf.write("\u0383\3\2\2\2\u03a5\u0390\3\2\2\2\u03a6\35\3\2\2\2\u03a7")
        buf.write("\u03ac\5\4\3\2\u03a8\u03ac\7C\2\2\u03a9\u03ac\5\u02f0")
        buf.write("\u0179\2\u03aa\u03ac\7Z\2\2\u03ab\u03a7\3\2\2\2\u03ab")
        buf.write("\u03a8\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03aa\3\2\2\2")
        buf.write("\u03ac\37\3\2\2\2\u03ad\u03ae\5\4\3\2\u03ae!\3\2\2\2\u03af")
        buf.write("\u03b0\5\4\3\2\u03b0#\3\2\2\2\u03b1\u03b2\7\u0089\2\2")
        buf.write("\u03b2\u03b3\5&\24\2\u03b3\u03b4\7\u008a\2\2\u03b4%\3")
        buf.write("\2\2\2\u03b5\u03ba\5(\25\2\u03b6\u03b7\7{\2\2\u03b7\u03b9")
        buf.write("\5(\25\2\u03b8\u03b6\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba")
        buf.write("\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\'\3\2\2\2\u03bc")
        buf.write("\u03ba\3\2\2\2\u03bd\u03be\5\f\7\2\u03be)\3\2\2\2\u03bf")
        buf.write("\u03c0\7i\2\2\u03c0+\3\2\2\2\u03c1\u03c2\5\u00e0q\2\u03c2")
        buf.write("-\3\2\2\2\u03c3\u03c8\5\60\31\2\u03c4\u03c5\7{\2\2\u03c5")
        buf.write("\u03c7\5\60\31\2\u03c6\u03c4\3\2\2\2\u03c7\u03ca\3\2\2")
        buf.write("\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9/\3\2")
        buf.write("\2\2\u03ca\u03c8\3\2\2\2\u03cb\u03cd\5\62\32\2\u03cc\u03cb")
        buf.write("\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("\u03cf\5\64\33\2\u03cf\61\3\2\2\2\u03d0\u03d1\5\6\4\2")
        buf.write("\u03d1\u03d2\7|\2\2\u03d2\63\3\2\2\2\u03d3\u03d9\5\u00e0")
        buf.write("q\2\u03d4\u03d5\7O\2\2\u03d5\u03d9\5,\27\2\u03d6\u03d7")
        buf.write("\7G\2\2\u03d7\u03d9\5,\27\2\u03d8\u03d3\3\2\2\2\u03d8")
        buf.write("\u03d4\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9\65\3\2\2\2\u03da")
        buf.write("\u03de\58\35\2\u03db\u03dd\5:\36\2\u03dc\u03db\3\2\2\2")
        buf.write("\u03dd\u03e0\3\2\2\2\u03de\u03dc\3\2\2\2\u03de\u03df\3")
        buf.write("\2\2\2\u03df\u03f1\3\2\2\2\u03e0\u03de\3\2\2\2\u03e1\u03e8")
        buf.write("\5\u0328\u0195\2\u03e2\u03e8\5\u032a\u0196\2\u03e3\u03e8")
        buf.write("\7\u008e\2\2\u03e4\u03e8\7\u008f\2\2\u03e5\u03e6\7\u0092")
        buf.write("\2\2\u03e6\u03e8\5\6\4\2\u03e7\u03e1\3\2\2\2\u03e7\u03e2")
        buf.write("\3\2\2\2\u03e7\u03e3\3\2\2\2\u03e7\u03e4\3\2\2\2\u03e7")
        buf.write("\u03e5\3\2\2\2\u03e8\u03ec\3\2\2\2\u03e9\u03eb\5:\36\2")
        buf.write("\u03ea\u03e9\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3")
        buf.write("\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03f0\3\2\2\2\u03ee\u03ec")
        buf.write("\3\2\2\2\u03ef\u03e7\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1")
        buf.write("\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\67\3\2\2\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f4\u041a\5\u02fa\u017e\2\u03f5\u041a")
        buf.write("\5<\37\2\u03f6\u041a\5> \2\u03f7\u041a\5B\"\2\u03f8\u041a")
        buf.write("\5\u016a\u00b6\2\u03f9\u041a\5F$\2\u03fa\u041a\5H%\2\u03fb")
        buf.write("\u0411\7A\2\2\u03fc\u040b\5\f\7\2\u03fd\u040c\5\u032c")
        buf.write("\u0197\2\u03fe\u040c\5L\'\2\u03ff\u0400\7v\2\2\u0400\u0401")
        buf.write("\5D#\2\u0401\u0403\7w\2\2\u0402\u0404\5\u021e\u0110\2")
        buf.write("\u0403\u0402\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406\3")
        buf.write("\2\2\2\u0405\u0407\5\u0224\u0113\2\u0406\u0405\3\2\2\2")
        buf.write("\u0406\u0407\3\2\2\2\u0407\u040c\3\2\2\2\u0408\u0409\5")
        buf.write("\u021e\u0110\2\u0409\u040a\5\u0224\u0113\2\u040a\u040c")
        buf.write("\3\2\2\2\u040b\u03fd\3\2\2\2\u040b\u03fe\3\2\2\2\u040b")
        buf.write("\u03ff\3\2\2\2\u040b\u0408\3\2\2\2\u040c\u0412\3\2\2\2")
        buf.write("\u040d\u0412\5b\62\2\u040e\u040f\5\u0220\u0111\2\u040f")
        buf.write("\u0410\5\u0224\u0113\2\u0410\u0412\3\2\2\2\u0411\u03fc")
        buf.write("\3\2\2\2\u0411\u040d\3\2\2\2\u0411\u040e\3\2\2\2\u0412")
        buf.write("\u041a\3\2\2\2\u0413\u041a\5h\65\2\u0414\u041a\5p9\2\u0415")
        buf.write("\u041a\5r:\2\u0416\u041a\5t;\2\u0417\u041a\5\u00a4S\2")
        buf.write("\u0418\u041a\5\u02ac\u0157\2\u0419\u03f4\3\2\2\2\u0419")
        buf.write("\u03f5\3\2\2\2\u0419\u03f6\3\2\2\2\u0419\u03f7\3\2\2\2")
        buf.write("\u0419\u03f8\3\2\2\2\u0419\u03f9\3\2\2\2\u0419\u03fa\3")
        buf.write("\2\2\2\u0419\u03fb\3\2\2\2\u0419\u0413\3\2\2\2\u0419\u0414")
        buf.write("\3\2\2\2\u0419\u0415\3\2\2\2\u0419\u0416\3\2\2\2\u0419")
        buf.write("\u0417\3\2\2\2\u0419\u0418\3\2\2\2\u041a9\3\2\2\2\u041b")
        buf.write("\u041c\7v\2\2\u041c\u041d\5D#\2\u041d\u041e\7w\2\2\u041e")
        buf.write(";\3\2\2\2\u041f\u0420\5\6\4\2\u0420\u0421\5\n\6\2\u0421")
        buf.write("=\3\2\2\2\u0422\u0423\7x\2\2\u0423\u0424\5\u00e0q\2\u0424")
        buf.write("\u0425\7y\2\2\u0425?\3\2\2\2\u0426\u0427\5\66\34\2\u0427")
        buf.write("A\3\2\2\2\u0428\u0429\t\6\2\2\u0429C\3\2\2\2\u042a\u042f")
        buf.write("\5\u00e0q\2\u042b\u042c\7{\2\2\u042c\u042e\5\u00e0q\2")
        buf.write("\u042d\u042b\3\2\2\2\u042e\u0431\3\2\2\2\u042f\u042d\3")
        buf.write("\2\2\2\u042f\u0430\3\2\2\2\u0430E\3\2\2\2\u0431\u042f")
        buf.write("\3\2\2\2\u0432\u0433\7]\2\2\u0433G\3\2\2\2\u0434\u0435")
        buf.write("\7\21\2\2\u0435\u0436\7z\2\2\u0436\u0437\5\6\4\2\u0437")
        buf.write("\u0438\5\n\6\2\u0438\u043f\3\2\2\2\u0439\u043a\7\21\2")
        buf.write("\2\u043a\u043b\7v\2\2\u043b\u043c\5D#\2\u043c\u043d\7")
        buf.write("w\2\2\u043d\u043f\3\2\2\2\u043e\u0434\3\2\2\2\u043e\u0439")
        buf.write("\3\2\2\2\u043fI\3\2\2\2\u0440\u0441\7A\2\2\u0441\u044b")
        buf.write("\5\f\7\2\u0442\u0444\7x\2\2\u0443\u0445\5.\30\2\u0444")
        buf.write("\u0443\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0446\3\2\2\2")
        buf.write("\u0446\u0448\7y\2\2\u0447\u0449\5L\'\2\u0448\u0447\3\2")
        buf.write("\2\2\u0448\u0449\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u044c")
        buf.write("\5L\'\2\u044b\u0442\3\2\2\2\u044b\u044a\3\2\2\2\u044c")
        buf.write("K\3\2\2\2\u044d\u0450\5N(\2\u044e\u0450\5V,\2\u044f\u044d")
        buf.write("\3\2\2\2\u044f\u044e\3\2\2\2\u0450M\3\2\2\2\u0451\u0452")
        buf.write("\7t\2\2\u0452\u045b\7u\2\2\u0453\u0454\7t\2\2\u0454\u0456")
        buf.write("\5P)\2\u0455\u0457\7{\2\2\u0456\u0455\3\2\2\2\u0456\u0457")
        buf.write("\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0459\7u\2\2\u0459")
        buf.write("\u045b\3\2\2\2\u045a\u0451\3\2\2\2\u045a\u0453\3\2\2\2")
        buf.write("\u045bO\3\2\2\2\u045c\u0461\5R*\2\u045d\u045e\7{\2\2\u045e")
        buf.write("\u0460\5R*\2\u045f\u045d\3\2\2\2\u0460\u0463\3\2\2\2\u0461")
        buf.write("\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462Q\3\2\2\2\u0463")
        buf.write("\u0461\3\2\2\2\u0464\u0465\5\6\4\2\u0465\u0466\7\u0088")
        buf.write("\2\2\u0466\u0467\5T+\2\u0467S\3\2\2\2\u0468\u046b\5\u00e0")
        buf.write("q\2\u0469\u046b\5L\'\2\u046a\u0468\3\2\2\2\u046a\u0469")
        buf.write("\3\2\2\2\u046bU\3\2\2\2\u046c\u046d\7t\2\2\u046d\u046f")
        buf.write("\5X-\2\u046e\u0470\7{\2\2\u046f\u046e\3\2\2\2\u046f\u0470")
        buf.write("\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0472\7u\2\2\u0472")
        buf.write("W\3\2\2\2\u0473\u0478\5Z.\2\u0474\u0475\7{\2\2\u0475\u0477")
        buf.write("\5Z.\2\u0476\u0474\3\2\2\2\u0477\u047a\3\2\2\2\u0478\u0476")
        buf.write("\3\2\2\2\u0478\u0479\3\2\2\2\u0479Y\3\2\2\2\u047a\u0478")
        buf.write("\3\2\2\2\u047b\u0481\5\u00e2r\2\u047c\u047d\7t\2\2\u047d")
        buf.write("\u047e\5D#\2\u047e\u047f\7u\2\2\u047f\u0481\3\2\2\2\u0480")
        buf.write("\u047b\3\2\2\2\u0480\u047c\3\2\2\2\u0481[\3\2\2\2\u0482")
        buf.write("\u0493\7A\2\2\u0483\u0484\5\u021a\u010e\2\u0484\u0485")
        buf.write("\5\u0224\u0113\2\u0485\u0494\3\2\2\2\u0486\u0487\5\u021c")
        buf.write("\u010f\2\u0487\u0488\7v\2\2\u0488\u0489\5D#\2\u0489\u048b")
        buf.write("\7w\2\2\u048a\u048c\5\u021e\u0110\2\u048b\u048a\3\2\2")
        buf.write("\2\u048b\u048c\3\2\2\2\u048c\u048e\3\2\2\2\u048d\u048f")
        buf.write("\5\u0224\u0113\2\u048e\u048d\3\2\2\2\u048e\u048f\3\2\2")
        buf.write("\2\u048f\u0494\3\2\2\2\u0490\u0491\5\u0220\u0111\2\u0491")
        buf.write("\u0492\5\u0224\u0113\2\u0492\u0494\3\2\2\2\u0493\u0483")
        buf.write("\3\2\2\2\u0493\u0486\3\2\2\2\u0493\u0490\3\2\2\2\u0494")
        buf.write("]\3\2\2\2\u0495\u0496\7A\2\2\u0496\u0497\5\"\22\2\u0497")
        buf.write("\u0498\7x\2\2\u0498\u0499\5\u00e0q\2\u0499\u049a\7y\2")
        buf.write("\2\u049a_\3\2\2\2\u049b\u049c\7A\2\2\u049c\u049d\5b\62")
        buf.write("\2\u049da\3\2\2\2\u049e\u049f\7t\2\2\u049f\u04a8\7u\2")
        buf.write("\2\u04a0\u04a1\7t\2\2\u04a1\u04a3\5d\63\2\u04a2\u04a4")
        buf.write("\7{\2\2\u04a3\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4")
        buf.write("\u04a5\3\2\2\2\u04a5\u04a6\7u\2\2\u04a6\u04a8\3\2\2\2")
        buf.write("\u04a7\u049e\3\2\2\2\u04a7\u04a0\3\2\2\2\u04a8c\3\2\2")
        buf.write("\2\u04a9\u04ae\5f\64\2\u04aa\u04ab\7{\2\2\u04ab\u04ad")
        buf.write("\5f\64\2\u04ac\u04aa\3\2\2\2\u04ad\u04b0\3\2\2\2\u04ae")
        buf.write("\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04afe\3\2\2\2\u04b0")
        buf.write("\u04ae\3\2\2\2\u04b1\u04b7\5\66\34\2\u04b2\u04b3\5\6\4")
        buf.write("\2\u04b3\u04b4\7\u0088\2\2\u04b4\u04b5\5\u00e0q\2\u04b5")
        buf.write("\u04b7\3\2\2\2\u04b6\u04b1\3\2\2\2\u04b6\u04b2\3\2\2\2")
        buf.write("\u04b7g\3\2\2\2\u04b8\u04b9\7a\2\2\u04b9\u04c2\7x\2\2")
        buf.write("\u04ba\u04bb\5j\66\2\u04bb\u04bc\7y\2\2\u04bc\u04c3\3")
        buf.write("\2\2\2\u04bd\u04be\5\f\7\2\u04be\u04bf\7y\2\2\u04bf\u04c3")
        buf.write("\3\2\2\2\u04c0\u04c1\7i\2\2\u04c1\u04c3\7y\2\2\u04c2\u04ba")
        buf.write("\3\2\2\2\u04c2\u04bd\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c3")
        buf.write("i\3\2\2\2\u04c4\u04cd\5\6\4\2\u04c5\u04c7\5l\67\2\u04c6")
        buf.write("\u04c5\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04ce\3\2\2\2")
        buf.write("\u04c8\u04c9\7\u008c\2\2\u04c9\u04cb\5\6\4\2\u04ca\u04cc")
        buf.write("\5l\67\2\u04cb\u04ca\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc")
        buf.write("\u04ce\3\2\2\2\u04cd\u04c6\3\2\2\2\u04cd\u04c8\3\2\2\2")
        buf.write("\u04ce\u04d6\3\2\2\2\u04cf\u04d0\7z\2\2\u04d0\u04d2\5")
        buf.write("\6\4\2\u04d1\u04d3\5l\67\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3")
        buf.write("\3\2\2\2\u04d3\u04d5\3\2\2\2\u04d4\u04cf\3\2\2\2\u04d5")
        buf.write("\u04d8\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7\3\2\2\2")
        buf.write("\u04d7k\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d9\u04db\7\u0089")
        buf.write("\2\2\u04da\u04dc\5n8\2\u04db\u04da\3\2\2\2\u04db\u04dc")
        buf.write("\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04de\7\u008a\2\2\u04de")
        buf.write("m\3\2\2\2\u04df\u04e3\7{\2\2\u04e0\u04e2\7{\2\2\u04e1")
        buf.write("\u04e0\3\2\2\2\u04e2\u04e5\3\2\2\2\u04e3\u04e1\3\2\2\2")
        buf.write("\u04e3\u04e4\3\2\2\2\u04e4o\3\2\2\2\u04e5\u04e3\3\2\2")
        buf.write("\2\u04e6\u04e7\7\31\2\2\u04e7\u04e8\7x\2\2\u04e8\u04e9")
        buf.write("\5\u00e0q\2\u04e9\u04ea\7y\2\2\u04eaq\3\2\2\2\u04eb\u04ec")
        buf.write("\7d\2\2\u04ec\u04ed\7x\2\2\u04ed\u04ee\5\u00e0q\2\u04ee")
        buf.write("\u04ef\7y\2\2\u04efs\3\2\2\2\u04f0\u04f1\7\36\2\2\u04f1")
        buf.write("\u04f2\7x\2\2\u04f2\u04f3\5\f\7\2\u04f3\u04f4\7y\2\2\u04f4")
        buf.write("u\3\2\2\2\u04f5\u0503\5\u0080A\2\u04f6\u0503\5\66\34\2")
        buf.write("\u04f7\u04f8\7~\2\2\u04f8\u0503\5v<\2\u04f9\u04fa\7\177")
        buf.write("\2\2\u04fa\u0503\5v<\2\u04fb\u04fc\7\u0086\2\2\u04fc\u0503")
        buf.write("\5v<\2\u04fd\u04fe\7\u0087\2\2\u04fe\u0503\5v<\2\u04ff")
        buf.write("\u0503\5|?\2\u0500\u0503\5~@\2\u0501\u0503\5\u02a6\u0154")
        buf.write("\2\u0502\u04f5\3\2\2\2\u0502\u04f6\3\2\2\2\u0502\u04f7")
        buf.write("\3\2\2\2\u0502\u04f9\3\2\2\2\u0502\u04fb\3\2\2\2\u0502")
        buf.write("\u04fd\3\2\2\2\u0502\u04ff\3\2\2\2\u0502\u0500\3\2\2\2")
        buf.write("\u0502\u0501\3\2\2\2\u0503w\3\2\2\2\u0504\u0505\7x\2\2")
        buf.write("\u0505\u0506\5\f\7\2\u0506\u0507\7y\2\2\u0507\u0508\5")
        buf.write("z>\2\u0508y\3\2\2\2\u0509\u0557\7\u0087\2\2\u050a\u0557")
        buf.write("\7\u0086\2\2\u050b\u0557\7x\2\2\u050c\u0557\5\6\4\2\u050d")
        buf.write("\u0557\5\u02fa\u017e\2\u050e\u0557\7\13\2\2\u050f\u0557")
        buf.write("\7\21\2\2\u0510\u0557\7\22\2\2\u0511\u0557\7\23\2\2\u0512")
        buf.write("\u0557\7\25\2\2\u0513\u0557\7\26\2\2\u0514\u0557\7\27")
        buf.write("\2\2\u0515\u0557\7\30\2\2\u0516\u0557\7\31\2\2\u0517\u0557")
        buf.write("\7\32\2\2\u0518\u0557\7\33\2\2\u0519\u0557\7\34\2\2\u051a")
        buf.write("\u0557\7\35\2\2\u051b\u0557\7\36\2\2\u051c\u0557\7\37")
        buf.write("\2\2\u051d\u0557\7!\2\2\u051e\u0557\7\"\2\2\u051f\u0557")
        buf.write("\7$\2\2\u0520\u0557\7%\2\2\u0521\u0557\7\'\2\2\u0522\u0557")
        buf.write("\7(\2\2\u0523\u0557\7)\2\2\u0524\u0557\7+\2\2\u0525\u0557")
        buf.write("\7,\2\2\u0526\u0557\7-\2\2\u0527\u0557\7.\2\2\u0528\u0557")
        buf.write("\7/\2\2\u0529\u0557\7\62\2\2\u052a\u0557\7\64\2\2\u052b")
        buf.write("\u0557\7\65\2\2\u052c\u0557\7\66\2\2\u052d\u0557\7\67")
        buf.write("\2\2\u052e\u0557\78\2\2\u052f\u0557\79\2\2\u0530\u0557")
        buf.write("\7>\2\2\u0531\u0557\7?\2\2\u0532\u0557\7@\2\2\u0533\u0557")
        buf.write("\7A\2\2\u0534\u0557\7C\2\2\u0535\u0557\7E\2\2\u0536\u0557")
        buf.write("\7G\2\2\u0537\u0557\7H\2\2\u0538\u0557\7I\2\2\u0539\u0557")
        buf.write("\7K\2\2\u053a\u0557\7L\2\2\u053b\u0557\7M\2\2\u053c\u0557")
        buf.write("\7N\2\2\u053d\u0557\7O\2\2\u053e\u0557\7Q\2\2\u053f\u0557")
        buf.write("\7R\2\2\u0540\u0557\7S\2\2\u0541\u0557\7V\2\2\u0542\u0557")
        buf.write("\7W\2\2\u0543\u0557\7X\2\2\u0544\u0557\7Y\2\2\u0545\u0557")
        buf.write("\7Z\2\2\u0546\u0557\7[\2\2\u0547\u0557\7\\\2\2\u0548\u0557")
        buf.write("\7]\2\2\u0549\u0557\7^\2\2\u054a\u0557\7`\2\2\u054b\u0557")
        buf.write("\7a\2\2\u054c\u0557\7b\2\2\u054d\u0557\7c\2\2\u054e\u0557")
        buf.write("\7d\2\2\u054f\u0557\7e\2\2\u0550\u0557\7f\2\2\u0551\u0557")
        buf.write("\7g\2\2\u0552\u0557\7h\2\2\u0553\u0557\7i\2\2\u0554\u0557")
        buf.write("\7j\2\2\u0555\u0557\7l\2\2\u0556\u0509\3\2\2\2\u0556\u050a")
        buf.write("\3\2\2\2\u0556\u050b\3\2\2\2\u0556\u050c\3\2\2\2\u0556")
        buf.write("\u050d\3\2\2\2\u0556\u050e\3\2\2\2\u0556\u050f\3\2\2\2")
        buf.write("\u0556\u0510\3\2\2\2\u0556\u0511\3\2\2\2\u0556\u0512\3")
        buf.write("\2\2\2\u0556\u0513\3\2\2\2\u0556\u0514\3\2\2\2\u0556\u0515")
        buf.write("\3\2\2\2\u0556\u0516\3\2\2\2\u0556\u0517\3\2\2\2\u0556")
        buf.write("\u0518\3\2\2\2\u0556\u0519\3\2\2\2\u0556\u051a\3\2\2\2")
        buf.write("\u0556\u051b\3\2\2\2\u0556\u051c\3\2\2\2\u0556\u051d\3")
        buf.write("\2\2\2\u0556\u051e\3\2\2\2\u0556\u051f\3\2\2\2\u0556\u0520")
        buf.write("\3\2\2\2\u0556\u0521\3\2\2\2\u0556\u0522\3\2\2\2\u0556")
        buf.write("\u0523\3\2\2\2\u0556\u0524\3\2\2\2\u0556\u0525\3\2\2\2")
        buf.write("\u0556\u0526\3\2\2\2\u0556\u0527\3\2\2\2\u0556\u0528\3")
        buf.write("\2\2\2\u0556\u0529\3\2\2\2\u0556\u052a\3\2\2\2\u0556\u052b")
        buf.write("\3\2\2\2\u0556\u052c\3\2\2\2\u0556\u052d\3\2\2\2\u0556")
        buf.write("\u052e\3\2\2\2\u0556\u052f\3\2\2\2\u0556\u0530\3\2\2\2")
        buf.write("\u0556\u0531\3\2\2\2\u0556\u0532\3\2\2\2\u0556\u0533\3")
        buf.write("\2\2\2\u0556\u0534\3\2\2\2\u0556\u0535\3\2\2\2\u0556\u0536")
        buf.write("\3\2\2\2\u0556\u0537\3\2\2\2\u0556\u0538\3\2\2\2\u0556")
        buf.write("\u0539\3\2\2\2\u0556\u053a\3\2\2\2\u0556\u053b\3\2\2\2")
        buf.write("\u0556\u053c\3\2\2\2\u0556\u053d\3\2\2\2\u0556\u053e\3")
        buf.write("\2\2\2\u0556\u053f\3\2\2\2\u0556\u0540\3\2\2\2\u0556\u0541")
        buf.write("\3\2\2\2\u0556\u0542\3\2\2\2\u0556\u0543\3\2\2\2\u0556")
        buf.write("\u0544\3\2\2\2\u0556\u0545\3\2\2\2\u0556\u0546\3\2\2\2")
        buf.write("\u0556\u0547\3\2\2\2\u0556\u0548\3\2\2\2\u0556\u0549\3")
        buf.write("\2\2\2\u0556\u054a\3\2\2\2\u0556\u054b\3\2\2\2\u0556\u054c")
        buf.write("\3\2\2\2\u0556\u054d\3\2\2\2\u0556\u054e\3\2\2\2\u0556")
        buf.write("\u054f\3\2\2\2\u0556\u0550\3\2\2\2\u0556\u0551\3\2\2\2")
        buf.write("\u0556\u0552\3\2\2\2\u0556\u0553\3\2\2\2\u0556\u0554\3")
        buf.write("\2\2\2\u0556\u0555\3\2\2\2\u0557{\3\2\2\2\u0558\u0559")
        buf.write("\7\u008e\2\2\u0559\u055a\5v<\2\u055a}\3\2\2\2\u055b\u055c")
        buf.write("\7\u008f\2\2\u055c\u055d\5v<\2\u055d\177\3\2\2\2\u055e")
        buf.write("\u055f\7x\2\2\u055f\u0560\5\f\7\2\u0560\u0561\7y\2\2\u0561")
        buf.write("\u0562\5v<\2\u0562\u0081\3\2\2\2\u0563\u056c\5v<\2\u0564")
        buf.write("\u0565\7\u0080\2\2\u0565\u056b\5v<\2\u0566\u0567\7\u0081")
        buf.write("\2\2\u0567\u056b\5v<\2\u0568\u0569\7\u0082\2\2\u0569\u056b")
        buf.write("\5v<\2\u056a\u0564\3\2\2\2\u056a\u0566\3\2\2\2\u056a\u0568")
        buf.write("\3\2\2\2\u056b\u056e\3\2\2\2\u056c\u056a\3\2\2\2\u056c")
        buf.write("\u056d\3\2\2\2\u056d\u0083\3\2\2\2\u056e\u056c\3\2\2\2")
        buf.write("\u056f\u0576\5\u0082B\2\u0570\u0571\7~\2\2\u0571\u0575")
        buf.write("\5\u0082B\2\u0572\u0573\7\177\2\2\u0573\u0575\5\u0082")
        buf.write("B\2\u0574\u0570\3\2\2\2\u0574\u0572\3\2\2\2\u0575\u0578")
        buf.write("\3\2\2\2\u0576\u0574\3\2\2\2\u0576\u0577\3\2\2\2\u0577")
        buf.write("\u0085\3\2\2\2\u0578\u0576\3\2\2\2\u0579\u0581\5\u0084")
        buf.write("C\2\u057a\u057b\7\u009f\2\2\u057b\u0580\5\u0084C\2\u057c")
        buf.write("\u057d\5\u02f6\u017c\2\u057d\u057e\5\u0084C\2\u057e\u0580")
        buf.write("\3\2\2\2\u057f\u057a\3\2\2\2\u057f\u057c\3\2\2\2\u0580")
        buf.write("\u0583\3\2\2\2\u0581\u057f\3\2\2\2\u0581\u0582\3\2\2\2")
        buf.write("\u0582\u0087\3\2\2\2\u0583\u0581\3\2\2\2\u0584\u0593\5")
        buf.write("\u0086D\2\u0585\u0586\7\u0089\2\2\u0586\u0592\5\u0086")
        buf.write("D\2\u0587\u0588\7\u008a\2\2\u0588\u0592\5\u0086D\2\u0589")
        buf.write("\u058a\7\u0095\2\2\u058a\u0592\5\u0086D\2\u058b\u058c")
        buf.write("\7\u0096\2\2\u058c\u0592\5\u0086D\2\u058d\u058e\7;\2\2")
        buf.write("\u058e\u0592\5\u008eH\2\u058f\u0590\7\17\2\2\u0590\u0592")
        buf.write("\5\f\7\2\u0591\u0585\3\2\2\2\u0591\u0587\3\2\2\2\u0591")
        buf.write("\u0589\3\2\2\2\u0591\u058b\3\2\2\2\u0591\u058d\3\2\2\2")
        buf.write("\u0591\u058f\3\2\2\2\u0592\u0595\3\2\2\2\u0593\u0591\3")
        buf.write("\2\2\2\u0593\u0594\3\2\2\2\u0594\u0089\3\2\2\2\u0595\u0593")
        buf.write("\3\2\2\2\u0596\u0597\5\6\4\2\u0597\u0598\7\u0089\2\2\u0598")
        buf.write("\u059d\5\f\7\2\u0599\u059a\7{\2\2\u059a\u059c\5\f\7\2")
        buf.write("\u059b\u0599\3\2\2\2\u059c\u059f\3\2\2\2\u059d\u059b\3")
        buf.write("\2\2\2\u059d\u059e\3\2\2\2\u059e\u05a0\3\2\2\2\u059f\u059d")
        buf.write("\3\2\2\2\u05a0\u05a1\7\u008a\2\2\u05a1\u05a2\5\u008cG")
        buf.write("\2\u05a2\u008b\3\2\2\2\u05a3\u05a4\t\7\2\2\u05a4\u008d")
        buf.write("\3\2\2\2\u05a5\u05a7\5\32\16\2\u05a6\u05a8\7\u008b\2\2")
        buf.write("\u05a7\u05a6\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u008f\3")
        buf.write("\2\2\2\u05a9\u05aa\t\b\2\2\u05aa\u0091\3\2\2\2\u05ab\u05b2")
        buf.write("\5\u0088E\2\u05ac\u05ad\7\u0093\2\2\u05ad\u05b1\5\u0088")
        buf.write("E\2\u05ae\u05af\7\u0094\2\2\u05af\u05b1\5\u0088E\2\u05b0")
        buf.write("\u05ac\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b1\u05b4\3\2\2\2")
        buf.write("\u05b2\u05b0\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u0093\3")
        buf.write("\2\2\2\u05b4\u05b2\3\2\2\2\u05b5\u05ba\5\u0092J\2\u05b6")
        buf.write("\u05b7\7\u0083\2\2\u05b7\u05b9\5\u0092J\2\u05b8\u05b6")
        buf.write("\3\2\2\2\u05b9\u05bc\3\2\2\2\u05ba\u05b8\3\2\2\2\u05ba")
        buf.write("\u05bb\3\2\2\2\u05bb\u0095\3\2\2\2\u05bc\u05ba\3\2\2\2")
        buf.write("\u05bd\u05c2\5\u0094K\2\u05be\u05bf\7\u0085\2\2\u05bf")
        buf.write("\u05c1\5\u0094K\2\u05c0\u05be\3\2\2\2\u05c1\u05c4\3\2")
        buf.write("\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u0097")
        buf.write("\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c5\u05ca\5\u0096L\2\u05c6")
        buf.write("\u05c7\7\u0084\2\2\u05c7\u05c9\5\u0096L\2\u05c8\u05c6")
        buf.write("\3\2\2\2\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca")
        buf.write("\u05cb\3\2\2\2\u05cb\u0099\3\2\2\2\u05cc\u05ca\3\2\2\2")
        buf.write("\u05cd\u05d2\5\u0098M\2\u05ce\u05cf\7\u0090\2\2\u05cf")
        buf.write("\u05d1\5\u0098M\2\u05d0\u05ce\3\2\2\2\u05d1\u05d4\3\2")
        buf.write("\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u009b")
        buf.write("\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d5\u05da\5\u009aN\2\u05d6")
        buf.write("\u05d7\7\u0091\2\2\u05d7\u05d9\5\u009aN\2\u05d8\u05d6")
        buf.write("\3\2\2\2\u05d9\u05dc\3\2\2\2\u05da\u05d8\3\2\2\2\u05da")
        buf.write("\u05db\3\2\2\2\u05db\u009d\3\2\2\2\u05dc\u05da\3\2\2\2")
        buf.write("\u05dd\u05e0\5\u009cO\2\u05de\u05df\7\u008d\2\2\u05df")
        buf.write("\u05e1\5\u009eP\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2")
        buf.write("\2\2\u05e1\u009f\3\2\2\2\u05e2\u05e8\5\u009eP\2\u05e3")
        buf.write("\u05e4\7\u008b\2\2\u05e4\u05e5\5\u00e0q\2\u05e5\u05e6")
        buf.write("\7|\2\2\u05e6\u05e7\5\u00e0q\2\u05e7\u05e9\3\2\2\2\u05e8")
        buf.write("\u05e3\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u00a1\3\2\2\2")
        buf.write("\u05ea\u05eb\5\u00a6T\2\u05eb\u05ec\5\u02f4\u017b\2\u05ec")
        buf.write("\u05ed\5\u00b6\\\2\u05ed\u00a3\3\2\2\2\u05ee\u05f0\7\37")
        buf.write("\2\2\u05ef\u05f1\5\u00a8U\2\u05f0\u05ef\3\2\2\2\u05f0")
        buf.write("\u05f1\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f3\5\u00ee")
        buf.write("x\2\u05f3\u00a5\3\2\2\2\u05f4\u05f5\7x\2\2\u05f5\u0600")
        buf.write("\7y\2\2\u05f6\u05f7\7x\2\2\u05f7\u05f8\5\u00aaV\2\u05f8")
        buf.write("\u05f9\7y\2\2\u05f9\u0600\3\2\2\2\u05fa\u05fb\7x\2\2\u05fb")
        buf.write("\u05fc\5\u00b2Z\2\u05fc\u05fd\7y\2\2\u05fd\u0600\3\2\2")
        buf.write("\2\u05fe\u0600\5\u00b4[\2\u05ff\u05f4\3\2\2\2\u05ff\u05f6")
        buf.write("\3\2\2\2\u05ff\u05fa\3\2\2\2\u05ff\u05fe\3\2\2\2\u0600")
        buf.write("\u00a7\3\2\2\2\u0601\u0603\7x\2\2\u0602\u0604\5\u00aa")
        buf.write("V\2\u0603\u0602\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0605")
        buf.write("\3\2\2\2\u0605\u0606\7y\2\2\u0606\u00a9\3\2\2\2\u0607")
        buf.write("\u060c\5\u00acW\2\u0608\u0609\7{\2\2\u0609\u060b\5\u00ac")
        buf.write("W\2\u060a\u0608\3\2\2\2\u060b\u060e\3\2\2\2\u060c\u060a")
        buf.write("\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u00ab\3\2\2\2\u060e")
        buf.write("\u060c\3\2\2\2\u060f\u0611\5\u00aeX\2\u0610\u060f\3\2")
        buf.write("\2\2\u0610\u0611\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0613")
        buf.write("\5\f\7\2\u0613\u0614\5\6\4\2\u0614\u00ad\3\2\2\2\u0615")
        buf.write("\u0616\t\t\2\2\u0616\u00af\3\2\2\2\u0617\u0619\7x\2\2")
        buf.write("\u0618\u061a\5\u00b2Z\2\u0619\u0618\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061e\7y\2\2\u061c")
        buf.write("\u061e\5\u00b4[\2\u061d\u0617\3\2\2\2\u061d\u061c\3\2")
        buf.write("\2\2\u061e\u00b1\3\2\2\2\u061f\u0624\5\u00b4[\2\u0620")
        buf.write("\u0621\7{\2\2\u0621\u0623\5\u00b4[\2\u0622\u0620\3\2\2")
        buf.write("\2\u0623\u0626\3\2\2\2\u0624\u0622\3\2\2\2\u0624\u0625")
        buf.write("\3\2\2\2\u0625\u00b3\3\2\2\2\u0626\u0624\3\2\2\2\u0627")
        buf.write("\u0628\5\6\4\2\u0628\u00b5\3\2\2\2\u0629\u062c\5\u00e0")
        buf.write("q\2\u062a\u062c\5\u00eex\2\u062b\u0629\3\2\2\2\u062b\u062a")
        buf.write("\3\2\2\2\u062c\u00b7\3\2\2\2\u062d\u062e\5\u00ba^\2\u062e")
        buf.write("\u062f\5\u00bc_\2\u062f\u00b9\3\2\2\2\u0630\u0632\5\u02c8")
        buf.write("\u0165\2\u0631\u0633\5\f\7\2\u0632\u0631\3\2\2\2\u0632")
        buf.write("\u0633\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0635\5\6\4\2")
        buf.write("\u0635\u0636\7\66\2\2\u0636\u0637\5\u00e0q\2\u0637\u00bb")
        buf.write("\3\2\2\2\u0638\u063a\5\u00be`\2\u0639\u0638\3\2\2\2\u0639")
        buf.write("\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063d\5\u00d4")
        buf.write("k\2\u063c\u063e\5\u00dan\2\u063d\u063c\3\2\2\2\u063d\u063e")
        buf.write("\3\2\2\2\u063e\u00bd\3\2\2\2\u063f\u0643\5\u00c0a\2\u0640")
        buf.write("\u0642\5\u00c0a\2\u0641\u0640\3\2\2\2\u0642\u0645\3\2")
        buf.write("\2\2\u0643\u0641\3\2\2\2\u0643\u0644\3\2\2\2\u0644\u00bf")
        buf.write("\3\2\2\2\u0645\u0643\3\2\2\2\u0646\u064c\5\u00ba^\2\u0647")
        buf.write("\u064c\5\u00c2b\2\u0648\u064c\5\u00c4c\2\u0649\u064c\5")
        buf.write("\u00caf\2\u064a\u064c\5\u00ccg\2\u064b\u0646\3\2\2\2\u064b")
        buf.write("\u0647\3\2\2\2\u064b\u0648\3\2\2\2\u064b\u0649\3\2\2\2")
        buf.write("\u064b\u064a\3\2\2\2\u064c\u00c1\3\2\2\2\u064d\u064e\5")
        buf.write("\u02ca\u0166\2\u064e\u064f\5\6\4\2\u064f\u0650\7\u0088")
        buf.write("\2\2\u0650\u0651\5\u00e0q\2\u0651\u00c3\3\2\2\2\u0652")
        buf.write("\u0653\5\u02cc\u0167\2\u0653\u0654\5\u00e6t\2\u0654\u00c5")
        buf.write("\3\2\2\2\u0655\u0657\5\u02ce\u0168\2\u0656\u0658\5\f\7")
        buf.write("\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0659")
        buf.write("\3\2\2\2\u0659\u065a\5\6\4\2\u065a\u065b\7\66\2\2\u065b")
        buf.write("\u065c\5\u00e0q\2\u065c\u065d\5\u02d0\u0169\2\u065d\u065e")
        buf.write("\5\u00e0q\2\u065e\u065f\5\u02d2\u016a\2\u065f\u0660\5")
        buf.write("\u00e0q\2\u0660\u00c7\3\2\2\2\u0661\u0663\5\u02ce\u0168")
        buf.write("\2\u0662\u0664\5\f\7\2\u0663\u0662\3\2\2\2\u0663\u0664")
        buf.write("\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u0666\5\6\4\2\u0666")
        buf.write("\u0667\7\66\2\2\u0667\u0668\5\u00e0q\2\u0668\u0669\5\u02d0")
        buf.write("\u0169\2\u0669\u066a\5\u00e0q\2\u066a\u066b\5\u02d2\u016a")
        buf.write("\2\u066b\u066c\5\u00e0q\2\u066c\u066d\5\u02d4\u016b\2")
        buf.write("\u066d\u066e\5\6\4\2\u066e\u00c9\3\2\2\2\u066f\u0671\5")
        buf.write("\u02ce\u0168\2\u0670\u0672\5\f\7\2\u0671\u0670\3\2\2\2")
        buf.write("\u0671\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0674\5")
        buf.write("\6\4\2\u0674\u0675\7\66\2\2\u0675\u0676\5\u00e0q\2\u0676")
        buf.write("\u0677\5\u02d0\u0169\2\u0677\u0678\5\u00e0q\2\u0678\u0679")
        buf.write("\5\u02d2\u016a\2\u0679\u067d\5\u00e0q\2\u067a\u067b\5")
        buf.write("\u02d4\u016b\2\u067b\u067c\5\6\4\2\u067c\u067e\3\2\2\2")
        buf.write("\u067d\u067a\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u00cb\3")
        buf.write("\2\2\2\u067f\u0680\5\u02d6\u016c\2\u0680\u0681\5\u00ce")
        buf.write("h\2\u0681\u00cd\3\2\2\2\u0682\u0687\5\u00d0i\2\u0683\u0684")
        buf.write("\7{\2\2\u0684\u0686\5\u00d0i\2\u0685\u0683\3\2\2\2\u0686")
        buf.write("\u0689\3\2\2\2\u0687\u0685\3\2\2\2\u0687\u0688\3\2\2\2")
        buf.write("\u0688\u00cf\3\2\2\2\u0689\u0687\3\2\2\2\u068a\u068c\5")
        buf.write("\u00e0q\2\u068b\u068d\5\u00d2j\2\u068c\u068b\3\2\2\2\u068c")
        buf.write("\u068d\3\2\2\2\u068d\u00d1\3\2\2\2\u068e\u0691\5\u02d8")
        buf.write("\u016d\2\u068f\u0691\5\u02da\u016e\2\u0690\u068e\3\2\2")
        buf.write("\2\u0690\u068f\3\2\2\2\u0691\u00d3\3\2\2\2\u0692\u0695")
        buf.write("\5\u00d6l\2\u0693\u0695\5\u00d8m\2\u0694\u0692\3\2\2\2")
        buf.write("\u0694\u0693\3\2\2\2\u0695\u00d5\3\2\2\2\u0696\u0697\5")
        buf.write("\u02dc\u016f\2\u0697\u0698\5\u00e0q\2\u0698\u00d7\3\2")
        buf.write("\2\2\u0699\u069a\5\u02de\u0170\2\u069a\u069b\5\u00e0q")
        buf.write("\2\u069b\u069c\5\u02e0\u0171\2\u069c\u069d\5\u00e0q\2")
        buf.write("\u069d\u00d9\3\2\2\2\u069e\u069f\5\u02d4\u016b\2\u069f")
        buf.write("\u06a0\5\6\4\2\u06a0\u06a1\5\u00bc_\2\u06a1\u00db\3\2")
        buf.write("\2\2\u06a2\u06a3\5v<\2\u06a3\u06a4\5\u00dep\2\u06a4\u06a5")
        buf.write("\5\u00e0q\2\u06a5\u00dd\3\2\2\2\u06a6\u06b2\7\u0088\2")
        buf.write("\2\u06a7\u06b2\7\u0097\2\2\u06a8\u06b2\7\u0098\2\2\u06a9")
        buf.write("\u06b2\7\u0099\2\2\u06aa\u06b2\7\u009a\2\2\u06ab\u06b2")
        buf.write("\7\u009b\2\2\u06ac\u06b2\7\u009c\2\2\u06ad\u06b2\7\u009d")
        buf.write("\2\2\u06ae\u06b2\7\u009e\2\2\u06af\u06b2\7\u00a0\2\2\u06b0")
        buf.write("\u06b2\5\u02f8\u017d\2\u06b1\u06a6\3\2\2\2\u06b1\u06a7")
        buf.write("\3\2\2\2\u06b1\u06a8\3\2\2\2\u06b1\u06a9\3\2\2\2\u06b1")
        buf.write("\u06aa\3\2\2\2\u06b1\u06ab\3\2\2\2\u06b1\u06ac\3\2\2\2")
        buf.write("\u06b1\u06ad\3\2\2\2\u06b1\u06ae\3\2\2\2\u06b1\u06af\3")
        buf.write("\2\2\2\u06b1\u06b0\3\2\2\2\u06b2\u00df\3\2\2\2\u06b3\u06b6")
        buf.write("\5\u00dco\2\u06b4\u06b6\5\u00e2r\2\u06b5\u06b3\3\2\2\2")
        buf.write("\u06b5\u06b4\3\2\2\2\u06b6\u00e1\3\2\2\2\u06b7\u06bb\5")
        buf.write("\u00a2R\2\u06b8\u06bb\5\u00b8]\2\u06b9\u06bb\5\u00a0Q")
        buf.write("\2\u06ba\u06b7\3\2\2\2\u06ba\u06b8\3\2\2\2\u06ba\u06b9")
        buf.write("\3\2\2\2\u06bb\u00e3\3\2\2\2\u06bc\u06bd\5\u00e0q\2\u06bd")
        buf.write("\u00e5\3\2\2\2\u06be\u06bf\5\u00e0q\2\u06bf\u00e7\3\2")
        buf.write("\2\2\u06c0\u06c4\5\u00f4{\2\u06c1\u06c4\5\u00f6|\2\u06c2")
        buf.write("\u06c4\5\u00eav\2\u06c3\u06c0\3\2\2\2\u06c3\u06c1\3\2")
        buf.write("\2\2\u06c3\u06c2\3\2\2\2\u06c4\u00e9\3\2\2\2\u06c5\u06c8")
        buf.write("\5\u00eex\2\u06c6\u06c8\5\u00ecw\2\u06c7\u06c5\3\2\2\2")
        buf.write("\u06c7\u06c6\3\2\2\2\u06c8\u00eb\3\2\2\2\u06c9\u06d6\5")
        buf.write("\u00f2z\2\u06ca\u06d6\5\u0104\u0083\2\u06cb\u06d6\5\u0108")
        buf.write("\u0085\2\u06cc\u06d6\5\u011a\u008e\2\u06cd\u06d6\5\u012c")
        buf.write("\u0097\2\u06ce\u06d6\5\u0138\u009d\2\u06cf\u06d6\5\u0144")
        buf.write("\u00a3\2\u06d0\u06d6\5\u0146\u00a4\2\u06d1\u06d6\5\u0148")
        buf.write("\u00a5\2\u06d2\u06d6\5\u014a\u00a6\2\u06d3\u06d6\5\u014e")
        buf.write("\u00a8\2\u06d4\u06d6\5\u029a\u014e\2\u06d5\u06c9\3\2\2")
        buf.write("\2\u06d5\u06ca\3\2\2\2\u06d5\u06cb\3\2\2\2\u06d5\u06cc")
        buf.write("\3\2\2\2\u06d5\u06cd\3\2\2\2\u06d5\u06ce\3\2\2\2\u06d5")
        buf.write("\u06cf\3\2\2\2\u06d5\u06d0\3\2\2\2\u06d5\u06d1\3\2\2\2")
        buf.write("\u06d5\u06d2\3\2\2\2\u06d5\u06d3\3\2\2\2\u06d5\u06d4\3")
        buf.write("\2\2\2\u06d6\u00ed\3\2\2\2\u06d7\u06d9\7t\2\2\u06d8\u06da")
        buf.write("\5\u00f0y\2\u06d9\u06d8\3\2\2\2\u06d9\u06da\3\2\2\2\u06da")
        buf.write("\u06db\3\2\2\2\u06db\u06dc\7u\2\2\u06dc\u00ef\3\2\2\2")
        buf.write("\u06dd\u06df\5\u00e8u\2\u06de\u06dd\3\2\2\2\u06df\u06e0")
        buf.write("\3\2\2\2\u06e0\u06de\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1")
        buf.write("\u00f1\3\2\2\2\u06e2\u06e3\7}\2\2\u06e3\u00f3\3\2\2\2")
        buf.write("\u06e4\u06e5\5\6\4\2\u06e5\u06e6\7|\2\2\u06e6\u06e7\5")
        buf.write("\u00e8u\2\u06e7\u00f5\3\2\2\2\u06e8\u06e9\5\u00f8}\2\u06e9")
        buf.write("\u06ea\7}\2\2\u06ea\u06ef\3\2\2\2\u06eb\u06ec\5\u0102")
        buf.write("\u0082\2\u06ec\u06ed\7}\2\2\u06ed\u06ef\3\2\2\2\u06ee")
        buf.write("\u06e8\3\2\2\2\u06ee\u06eb\3\2\2\2\u06ef\u00f7\3\2\2\2")
        buf.write("\u06f0\u06f1\5\u00fa~\2\u06f1\u06f2\5\u00fc\177\2\u06f2")
        buf.write("\u00f9\3\2\2\2\u06f3\u06f4\5\f\7\2\u06f4\u00fb\3\2\2\2")
        buf.write("\u06f5\u06fa\5\u00fe\u0080\2\u06f6\u06f7\7{\2\2\u06f7")
        buf.write("\u06f9\5\u00fe\u0080\2\u06f8\u06f6\3\2\2\2\u06f9\u06fc")
        buf.write("\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb")
        buf.write("\u00fd\3\2\2\2\u06fc\u06fa\3\2\2\2\u06fd\u0700\5\6\4\2")
        buf.write("\u06fe\u06ff\7\u0088\2\2\u06ff\u0701\5\u0100\u0081\2\u0700")
        buf.write("\u06fe\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u00ff\3\2\2\2")
        buf.write("\u0702\u0706\5\u00e0q\2\u0703\u0706\5\u0224\u0113\2\u0704")
        buf.write("\u0706\5\u02c4\u0163\2\u0705\u0702\3\2\2\2\u0705\u0703")
        buf.write("\3\2\2\2\u0705\u0704\3\2\2\2\u0706\u0101\3\2\2\2\u0707")
        buf.write("\u0708\7\33\2\2\u0708\u0709\5\f\7\2\u0709\u070a\5\u0196")
        buf.write("\u00cc\2\u070a\u0103\3\2\2\2\u070b\u070c\5\u0106\u0084")
        buf.write("\2\u070c\u070d\7}\2\2\u070d\u0105\3\2\2\2\u070e\u070f")
        buf.write("\5\u00e0q\2\u070f\u0107\3\2\2\2\u0710\u0713\5\u010c\u0087")
        buf.write("\2\u0711\u0713\5\u010e\u0088\2\u0712\u0710\3\2\2\2\u0712")
        buf.write("\u0711\3\2\2\2\u0713\u0109\3\2\2\2\u0714\u0717\5\u00ee")
        buf.write("x\2\u0715\u0717\5\u00ecw\2\u0716\u0714\3\2\2\2\u0716\u0715")
        buf.write("\3\2\2\2\u0717\u010b\3\2\2\2\u0718\u0719\7\64\2\2\u0719")
        buf.write("\u071a\7x\2\2\u071a\u071b\5\u00e6t\2\u071b\u071c\7y\2")
        buf.write("\2\u071c\u071f\5\u010a\u0086\2\u071d\u071e\7$\2\2\u071e")
        buf.write("\u0720\5\u010a\u0086\2\u071f\u071d\3\2\2\2\u071f\u0720")
        buf.write("\3\2\2\2\u0720\u010d\3\2\2\2\u0721\u0722\7\\\2\2\u0722")
        buf.write("\u0723\7x\2\2\u0723\u0724\5\u00e0q\2\u0724\u0725\7y\2")
        buf.write("\2\u0725\u0726\5\u0110\u0089\2\u0726\u010f\3\2\2\2\u0727")
        buf.write("\u0729\7t\2\2\u0728\u072a\5\u0112\u008a\2\u0729\u0728")
        buf.write("\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072b\3\2\2\2\u072b")
        buf.write("\u072c\7u\2\2\u072c\u0111\3\2\2\2\u072d\u0731\5\u0114")
        buf.write("\u008b\2\u072e\u0730\5\u0114\u008b\2\u072f\u072e\3\2\2")
        buf.write("\2\u0730\u0733\3\2\2\2\u0731\u072f\3\2\2\2\u0731\u0732")
        buf.write("\3\2\2\2\u0732\u0113\3\2\2\2\u0733\u0731\3\2\2\2\u0734")
        buf.write("\u0735\5\u0116\u008c\2\u0735\u0736\5\u00f0y\2\u0736\u0115")
        buf.write("\3\2\2\2\u0737\u073b\5\u0118\u008d\2\u0738\u073a\5\u0118")
        buf.write("\u008d\2\u0739\u0738\3\2\2\2\u073a\u073d\3\2\2\2\u073b")
        buf.write("\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u0117\3\2\2\2")
        buf.write("\u073d\u073b\3\2\2\2\u073e\u073f\7\26\2\2\u073f\u0740")
        buf.write("\5\u00e4s\2\u0740\u0741\7|\2\2\u0741\u0745\3\2\2\2\u0742")
        buf.write("\u0743\7\36\2\2\u0743\u0745\7|\2\2\u0744\u073e\3\2\2\2")
        buf.write("\u0744\u0742\3\2\2\2\u0745\u0119\3\2\2\2\u0746\u074b\5")
        buf.write("\u011c\u008f\2\u0747\u074b\5\u011e\u0090\2\u0748\u074b")
        buf.write("\5\u0120\u0091\2\u0749\u074b\5\u012a\u0096\2\u074a\u0746")
        buf.write("\3\2\2\2\u074a\u0747\3\2\2\2\u074a\u0748\3\2\2\2\u074a")
        buf.write("\u0749\3\2\2\2\u074b\u011b\3\2\2\2\u074c\u074d\7l\2\2")
        buf.write("\u074d\u074e\7x\2\2\u074e\u074f\5\u00e6t\2\u074f\u0750")
        buf.write("\7y\2\2\u0750\u0751\5\u00eav\2\u0751\u011d\3\2\2\2\u0752")
        buf.write("\u0753\7!\2\2\u0753\u0754\5\u00eav\2\u0754\u0755\7l\2")
        buf.write("\2\u0755\u0756\7x\2\2\u0756\u0757\5\u00e6t\2\u0757\u0758")
        buf.write("\7y\2\2\u0758\u0759\7}\2\2\u0759\u011f\3\2\2\2\u075a\u075b")
        buf.write("\7.\2\2\u075b\u075d\7x\2\2\u075c\u075e\5\u0122\u0092\2")
        buf.write("\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u075f\3")
        buf.write("\2\2\2\u075f\u0761\7}\2\2\u0760\u0762\5\u0124\u0093\2")
        buf.write("\u0761\u0760\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0763\3")
        buf.write("\2\2\2\u0763\u0765\7}\2\2\u0764\u0766\5\u0126\u0094\2")
        buf.write("\u0765\u0764\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0767\3")
        buf.write("\2\2\2\u0767\u0768\7y\2\2\u0768\u0769\5\u00eav\2\u0769")
        buf.write("\u0121\3\2\2\2\u076a\u076d\5\u00f8}\2\u076b\u076d\5\u0128")
        buf.write("\u0095\2\u076c\u076a\3\2\2\2\u076c\u076b\3\2\2\2\u076d")
        buf.write("\u0123\3\2\2\2\u076e\u076f\5\u00e6t\2\u076f\u0125\3\2")
        buf.write("\2\2\u0770\u0771\5\u0128\u0095\2\u0771\u0127\3\2\2\2\u0772")
        buf.write("\u0777\5\u0106\u0084\2\u0773\u0774\7{\2\2\u0774\u0776")
        buf.write("\5\u0106\u0084\2\u0775\u0773\3\2\2\2\u0776\u0779\3\2\2")
        buf.write("\2\u0777\u0775\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u0129")
        buf.write("\3\2\2\2\u0779\u0777\3\2\2\2\u077a\u077b\7/\2\2\u077b")
        buf.write("\u077c\7x\2\2\u077c\u077d\5\u00fa~\2\u077d\u077e\5\6\4")
        buf.write("\2\u077e\u077f\7\66\2\2\u077f\u0780\5\u00e0q\2\u0780\u0781")
        buf.write("\7y\2\2\u0781\u0782\5\u00eav\2\u0782\u012b\3\2\2\2\u0783")
        buf.write("\u0789\5\u012e\u0098\2\u0784\u0789\5\u0130\u0099\2\u0785")
        buf.write("\u0789\5\u0132\u009a\2\u0786\u0789\5\u0134\u009b\2\u0787")
        buf.write("\u0789\5\u0136\u009c\2\u0788\u0783\3\2\2\2\u0788\u0784")
        buf.write("\3\2\2\2\u0788\u0785\3\2\2\2\u0788\u0786\3\2\2\2\u0788")
        buf.write("\u0787\3\2\2\2\u0789\u012d\3\2\2\2\u078a\u078b\7\23\2")
        buf.write("\2\u078b\u078c\7}\2\2\u078c\u012f\3\2\2\2\u078d\u078e")
        buf.write("\7\34\2\2\u078e\u078f\7}\2\2\u078f\u0131\3\2\2\2\u0790")
        buf.write("\u0791\7\62\2\2\u0791\u0792\5\6\4\2\u0792\u0793\7}\2\2")
        buf.write("\u0793\u079d\3\2\2\2\u0794\u0795\7\62\2\2\u0795\u0796")
        buf.write("\7\26\2\2\u0796\u0797\5\u00e4s\2\u0797\u0798\7}\2\2\u0798")
        buf.write("\u079d\3\2\2\2\u0799\u079a\7\62\2\2\u079a\u079b\7\36\2")
        buf.write("\2\u079b\u079d\7}\2\2\u079c\u0790\3\2\2\2\u079c\u0794")
        buf.write("\3\2\2\2\u079c\u0799\3\2\2\2\u079d\u0133\3\2\2\2\u079e")
        buf.write("\u07a0\7Q\2\2\u079f\u07a1\5\u00e0q\2\u07a0\u079f\3\2\2")
        buf.write("\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a3")
        buf.write("\7}\2\2\u07a3\u0135\3\2\2\2\u07a4\u07a6\7^\2\2\u07a5\u07a7")
        buf.write("\5\u00e0q\2\u07a6\u07a5\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7")
        buf.write("\u07a8\3\2\2\2\u07a8\u07a9\7}\2\2\u07a9\u0137\3\2\2\2")
        buf.write("\u07aa\u07ab\7`\2\2\u07ab\u07ad\5\u00eex\2\u07ac\u07ae")
        buf.write("\5\u013a\u009e\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae\3\2\2")
        buf.write("\2\u07ae\u07b0\3\2\2\2\u07af\u07b1\5\u0142\u00a2\2\u07b0")
        buf.write("\u07af\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u0139\3\2\2\2")
        buf.write("\u07b2\u07b4\5\u013c\u009f\2\u07b3\u07b5\5\u0140\u00a1")
        buf.write("\2\u07b4\u07b3\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b8")
        buf.write("\3\2\2\2\u07b6\u07b8\5\u0140\u00a1\2\u07b7\u07b2\3\2\2")
        buf.write("\2\u07b7\u07b6\3\2\2\2\u07b8\u013b\3\2\2\2\u07b9\u07bd")
        buf.write("\5\u013e\u00a0\2\u07ba\u07bc\5\u013e\u00a0\2\u07bb\u07ba")
        buf.write("\3\2\2\2\u07bc\u07bf\3\2\2\2\u07bd\u07bb\3\2\2\2\u07bd")
        buf.write("\u07be\3\2\2\2\u07be\u013d\3\2\2\2\u07bf\u07bd\3\2\2\2")
        buf.write("\u07c0\u07c1\7\27\2\2\u07c1\u07c2\7x\2\2\u07c2\u07c4\5")
        buf.write("\36\20\2\u07c3\u07c5\5\6\4\2\u07c4\u07c3\3\2\2\2\u07c4")
        buf.write("\u07c5\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c7\7y\2\2")
        buf.write("\u07c7\u07c8\5\u00eex\2\u07c8\u013f\3\2\2\2\u07c9\u07ca")
        buf.write("\7\27\2\2\u07ca\u07cb\5\u00eex\2\u07cb\u0141\3\2\2\2\u07cc")
        buf.write("\u07cd\7+\2\2\u07cd\u07ce\5\u00eex\2\u07ce\u0143\3\2\2")
        buf.write("\2\u07cf\u07d0\7\31\2\2\u07d0\u07d1\5\u00eex\2\u07d1\u0145")
        buf.write("\3\2\2\2\u07d2\u07d3\7d\2\2\u07d3\u07d4\5\u00eex\2\u07d4")
        buf.write("\u0147\3\2\2\2\u07d5\u07d6\7>\2\2\u07d6\u07d7\7x\2\2\u07d7")
        buf.write("\u07d8\5\u00e0q\2\u07d8\u07d9\7y\2\2\u07d9\u07da\5\u00ea")
        buf.write("v\2\u07da\u0149\3\2\2\2\u07db\u07dc\7g\2\2\u07dc\u07dd")
        buf.write("\7x\2\2\u07dd\u07de\5\u014c\u00a7\2\u07de\u07df\7y\2\2")
        buf.write("\u07df\u07e0\5\u00eav\2\u07e0\u014b\3\2\2\2\u07e1\u07e4")
        buf.write("\5\u00f8}\2\u07e2\u07e4\5\u00e0q\2\u07e3\u07e1\3\2\2\2")
        buf.write("\u07e3\u07e2\3\2\2\2\u07e4\u014d\3\2\2\2\u07e5\u07e6\5")
        buf.write("\u02e6\u0174\2\u07e6\u07e7\7Q\2\2\u07e7\u07e8\5\u00e0")
        buf.write("q\2\u07e8\u07e9\7}\2\2\u07e9\u07ef\3\2\2\2\u07ea\u07eb")
        buf.write("\5\u02e6\u0174\2\u07eb\u07ec\7\23\2\2\u07ec\u07ed\7}\2")
        buf.write("\2\u07ed\u07ef\3\2\2\2\u07ee\u07e5\3\2\2\2\u07ee\u07ea")
        buf.write("\3\2\2\2\u07ef\u014f\3\2\2\2\u07f0\u07f2\7\4\2\2\u07f1")
        buf.write("\u07f0\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f4\3\2\2\2")
        buf.write("\u07f3\u07f5\5\u0158\u00ad\2\u07f4\u07f3\3\2\2\2\u07f4")
        buf.write("\u07f5\3\2\2\2\u07f5\u07f7\3\2\2\2\u07f6\u07f8\5\u015c")
        buf.write("\u00af\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8")
        buf.write("\u07fc\3\2\2\2\u07f9\u07fb\5\u025e\u0130\2\u07fa\u07f9")
        buf.write("\3\2\2\2\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3\2\2\2\u07fc")
        buf.write("\u07fd\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc\3\2\2\2")
        buf.write("\u07ff\u0801\5\u0164\u00b3\2\u0800\u07ff\3\2\2\2\u0800")
        buf.write("\u0801\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803\7\2\2\3")
        buf.write("\u0803\u0151\3\2\2\2\u0804\u0805\7@\2\2\u0805\u0806\5")
        buf.write("\u0154\u00ab\2\u0806\u0808\5\u0156\u00ac\2\u0807\u0809")
        buf.write("\7}\2\2\u0808\u0807\3\2\2\2\u0808\u0809\3\2\2\2\u0809")
        buf.write("\u0153\3\2\2\2\u080a\u080f\5\6\4\2\u080b\u080c\7z\2\2")
        buf.write("\u080c\u080e\5\6\4\2\u080d\u080b\3\2\2\2\u080e\u0811\3")
        buf.write("\2\2\2\u080f\u080d\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0155")
        buf.write("\3\2\2\2\u0811\u080f\3\2\2\2\u0812\u0814\7t\2\2\u0813")
        buf.write("\u0815\5\u0158\u00ad\2\u0814\u0813\3\2\2\2\u0814\u0815")
        buf.write("\3\2\2\2\u0815\u0817\3\2\2\2\u0816\u0818\5\u015c\u00af")
        buf.write("\2\u0817\u0816\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081a")
        buf.write("\3\2\2\2\u0819\u081b\5\u0164\u00b3\2\u081a\u0819\3\2\2")
        buf.write("\2\u081a\u081b\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081d")
        buf.write("\7u\2\2\u081d\u0157\3\2\2\2\u081e\u0820\5\u015a\u00ae")
        buf.write("\2\u081f\u081e\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u081f")
        buf.write("\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0159\3\2\2\2\u0823")
        buf.write("\u0824\7)\2\2\u0824\u0825\5\u02e4\u0173\2\u0825\u0826")
        buf.write("\5\6\4\2\u0826\u0827\7}\2\2\u0827\u015b\3\2\2\2\u0828")
        buf.write("\u082a\5\u015e\u00b0\2\u0829\u0828\3\2\2\2\u082a\u082b")
        buf.write("\3\2\2\2\u082b\u0829\3\2\2\2\u082b\u082c\3\2\2\2\u082c")
        buf.write("\u015d\3\2\2\2\u082d\u0830\5\u0160\u00b1\2\u082e\u0830")
        buf.write("\5\u0162\u00b2\2\u082f\u082d\3\2\2\2\u082f\u082e\3\2\2")
        buf.write("\2\u0830\u015f\3\2\2\2\u0831\u0832\7g\2\2\u0832\u0833")
        buf.write("\5\6\4\2\u0833\u0834\7\u0088\2\2\u0834\u0835\5\b\5\2\u0835")
        buf.write("\u0836\7}\2\2\u0836\u0161\3\2\2\2\u0837\u0838\7g\2\2\u0838")
        buf.write("\u0839\5\2\2\2\u0839\u083a\7}\2\2\u083a\u0163\3\2\2\2")
        buf.write("\u083b\u083d\5\u0166\u00b4\2\u083c\u083b\3\2\2\2\u083d")
        buf.write("\u083e\3\2\2\2\u083e\u083c\3\2\2\2\u083e\u083f\3\2\2\2")
        buf.write("\u083f\u0165\3\2\2\2\u0840\u0843\5\u0152\u00aa\2\u0841")
        buf.write("\u0843\5\u0168\u00b5\2\u0842\u0840\3\2\2\2\u0842\u0841")
        buf.write("\3\2\2\2\u0843\u0167\3\2\2\2\u0844\u0846\5\u0264\u0133")
        buf.write("\2\u0845\u0844\3\2\2\2\u0845\u0846\3\2\2\2\u0846\u0848")
        buf.write("\3\2\2\2\u0847\u0849\5\u018e\u00c8\2\u0848\u0847\3\2\2")
        buf.write("\2\u0848\u0849\3\2\2\2\u0849\u084f\3\2\2\2\u084a\u0850")
        buf.write("\5\u0300\u0181\2\u084b\u0850\5\u0302\u0182\2\u084c\u0850")
        buf.write("\5\u0304\u0183\2\u084d\u0850\5\u0306\u0184\2\u084e\u0850")
        buf.write("\5\u0308\u0185\2\u084f\u084a\3\2\2\2\u084f\u084b\3\2\2")
        buf.write("\2\u084f\u084c\3\2\2\2\u084f\u084d\3\2\2\2\u084f\u084e")
        buf.write("\3\2\2\2\u0850\u0169\3\2\2\2\u0851\u0852\5\6\4\2\u0852")
        buf.write("\u0853\7\u008c\2\2\u0853\u0854\5\6\4\2\u0854\u0855\5\n")
        buf.write("\6\2\u0855\u016b\3\2\2\2\u0856\u0858\5\u0264\u0133\2\u0857")
        buf.write("\u0856\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u085a\3\2\2\2")
        buf.write("\u0859\u085b\5\u016e\u00b8\2\u085a\u0859\3\2\2\2\u085a")
        buf.write("\u085b\3\2\2\2\u085b\u085d\3\2\2\2\u085c\u085e\5\u02e2")
        buf.write("\u0172\2\u085d\u085c\3\2\2\2\u085d\u085e\3\2\2\2\u085e")
        buf.write("\u085f\3\2\2\2\u085f\u0860\7\32\2\2\u0860\u0862\5\6\4")
        buf.write("\2\u0861\u0863\5\u0172\u00ba\2\u0862\u0861\3\2\2\2\u0862")
        buf.write("\u0863\3\2\2\2\u0863\u0865\3\2\2\2\u0864\u0866\5\u0178")
        buf.write("\u00bd\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866")
        buf.write("\u0868\3\2\2\2\u0867\u0869\5\u017c\u00bf\2\u0868\u0867")
        buf.write("\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086a\3\2\2\2\u086a")
        buf.write("\u086c\5\u0188\u00c5\2\u086b\u086d\7}\2\2\u086c\u086b")
        buf.write("\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u016d\3\2\2\2\u086e")
        buf.write("\u0872\5\u0170\u00b9\2\u086f\u0871\5\u0170\u00b9\2\u0870")
        buf.write("\u086f\3\2\2\2\u0871\u0874\3\2\2\2\u0872\u0870\3\2\2\2")
        buf.write("\u0872\u0873\3\2\2\2\u0873\u016f\3\2\2\2\u0874\u0872\3")
        buf.write("\2\2\2\u0875\u087f\7A\2\2\u0876\u087f\7M\2\2\u0877\u087f")
        buf.write("\7L\2\2\u0878\u087f\79\2\2\u0879\u087f\7K\2\2\u087a\u087f")
        buf.write("\7\13\2\2\u087b\u087f\7S\2\2\u087c\u087f\7Y\2\2\u087d")
        buf.write("\u087f\5\u0280\u0141\2\u087e\u0875\3\2\2\2\u087e\u0876")
        buf.write("\3\2\2\2\u087e\u0877\3\2\2\2\u087e\u0878\3\2\2\2\u087e")
        buf.write("\u0879\3\2\2\2\u087e\u087a\3\2\2\2\u087e\u087b\3\2\2\2")
        buf.write("\u087e\u087c\3\2\2\2\u087e\u087d\3\2\2\2\u087f\u0171\3")
        buf.write("\2\2\2\u0880\u0881\7\u0089\2\2\u0881\u0882\5\u0174\u00bb")
        buf.write("\2\u0882\u0883\7\u008a\2\2\u0883\u0173\3\2\2\2\u0884\u0886")
        buf.write("\5\u0264\u0133\2\u0885\u0884\3\2\2\2\u0885\u0886\3\2\2")
        buf.write("\2\u0886\u0887\3\2\2\2\u0887\u088f\5\u0176\u00bc\2\u0888")
        buf.write("\u088a\7{\2\2\u0889\u088b\5\u0264\u0133\2\u088a\u0889")
        buf.write("\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u088c\3\2\2\2\u088c")
        buf.write("\u088e\5\u0176\u00bc\2\u088d\u0888\3\2\2\2\u088e\u0891")
        buf.write("\3\2\2\2\u088f\u088d\3\2\2\2\u088f\u0890\3\2\2\2\u0890")
        buf.write("\u0175\3\2\2\2\u0891\u088f\3\2\2\2\u0892\u0893\5\6\4\2")
        buf.write("\u0893\u0177\3\2\2\2\u0894\u0895\7|\2\2\u0895\u089a\5")
        buf.write("\36\20\2\u0896\u0897\7{\2\2\u0897\u0899\5 \21\2\u0898")
        buf.write("\u0896\3\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3\2\2\2")
        buf.write("\u089a\u089b\3\2\2\2\u089b\u0179\3\2\2\2\u089c\u089a\3")
        buf.write("\2\2\2\u089d\u08a2\5 \21\2\u089e\u089f\7{\2\2\u089f\u08a1")
        buf.write("\5 \21\2\u08a0\u089e\3\2\2\2\u08a1\u08a4\3\2\2\2\u08a2")
        buf.write("\u08a0\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u017b\3\2\2\2")
        buf.write("\u08a4\u08a2\3\2\2\2\u08a5\u08a9\5\u017e\u00c0\2\u08a6")
        buf.write("\u08a8\5\u017e\u00c0\2\u08a7\u08a6\3\2\2\2\u08a8\u08ab")
        buf.write("\3\2\2\2\u08a9\u08a7\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa")
        buf.write("\u017d\3\2\2\2\u08ab\u08a9\3\2\2\2\u08ac\u08ad\5\u02cc")
        buf.write("\u0167\2\u08ad\u08ae\5\u0176\u00bc\2\u08ae\u08af\7|\2")
        buf.write("\2\u08af\u08b0\5\u0180\u00c1\2\u08b0\u017f\3\2\2\2\u08b1")
        buf.write("\u08bc\5\u0186\u00c4\2\u08b2\u08b5\5\u0182\u00c2\2\u08b3")
        buf.write("\u08b4\7{\2\2\u08b4\u08b6\5\u0184\u00c3\2\u08b5\u08b3")
        buf.write("\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b9\3\2\2\2\u08b7")
        buf.write("\u08b8\7{\2\2\u08b8\u08ba\5\u0186\u00c4\2\u08b9\u08b7")
        buf.write("\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bc\3\2\2\2\u08bb")
        buf.write("\u08b1\3\2\2\2\u08bb\u08b2\3\2\2\2\u08bc\u0181\3\2\2\2")
        buf.write("\u08bd\u08c1\5\36\20\2\u08be\u08c1\7\32\2\2\u08bf\u08c1")
        buf.write("\7[\2\2\u08c0\u08bd\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0")
        buf.write("\u08bf\3\2\2\2\u08c1\u0183\3\2\2\2\u08c2\u08c7\5 \21\2")
        buf.write("\u08c3\u08c4\7{\2\2\u08c4\u08c6\5 \21\2\u08c5\u08c3\3")
        buf.write("\2\2\2\u08c6\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c7\u08c8")
        buf.write("\3\2\2\2\u08c8\u0185\3\2\2\2\u08c9\u08c7\3\2\2\2\u08ca")
        buf.write("\u08cb\7A\2\2\u08cb\u08cc\7x\2\2\u08cc\u08cd\7y\2\2\u08cd")
        buf.write("\u0187\3\2\2\2\u08ce\u08d0\7t\2\2\u08cf\u08d1\5\u018a")
        buf.write("\u00c6\2\u08d0\u08cf\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1")
        buf.write("\u08d2\3\2\2\2\u08d2\u08d3\7u\2\2\u08d3\u0189\3\2\2\2")
        buf.write("\u08d4\u08d6\5\u018c\u00c7\2\u08d5\u08d4\3\2\2\2\u08d6")
        buf.write("\u08d7\3\2\2\2\u08d7\u08d5\3\2\2\2\u08d7\u08d8\3\2\2\2")
        buf.write("\u08d8\u018b\3\2\2\2\u08d9\u08db\5\u0264\u0133\2\u08da")
        buf.write("\u08d9\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dd\3\2\2\2")
        buf.write("\u08dc\u08de\5\u018e\u00c8\2\u08dd\u08dc\3\2\2\2\u08dd")
        buf.write("\u08de\3\2\2\2\u08de\u08e6\3\2\2\2\u08df\u08e7\5\u0192")
        buf.write("\u00ca\2\u08e0\u08e1\7\u0087\2\2\u08e1\u08e2\5\6\4\2\u08e2")
        buf.write("\u08e3\7x\2\2\u08e3\u08e4\7y\2\2\u08e4\u08e5\5\u0208\u0105")
        buf.write("\2\u08e5\u08e7\3\2\2\2\u08e6\u08df\3\2\2\2\u08e6\u08e0")
        buf.write("\3\2\2\2\u08e7\u08ea\3\2\2\2\u08e8\u08ea\7\3\2\2\u08e9")
        buf.write("\u08da\3\2\2\2\u08e9\u08e8\3\2\2\2\u08ea\u018d\3\2\2\2")
        buf.write("\u08eb\u08ed\5\u0190\u00c9\2\u08ec\u08eb\3\2\2\2\u08ed")
        buf.write("\u08ee\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ef\3\2\2\2")
        buf.write("\u08ef\u018f\3\2\2\2\u08f0\u0900\7A\2\2\u08f1\u0900\7")
        buf.write("M\2\2\u08f2\u0900\7L\2\2\u08f3\u0900\79\2\2\u08f4\u0900")
        buf.write("\7K\2\2\u08f5\u0900\7N\2\2\u08f6\u0900\7j\2\2\u08f7\u0900")
        buf.write("\7h\2\2\u08f8\u0900\7S\2\2\u08f9\u0900\7H\2\2\u08fa\u0900")
        buf.write("\7\13\2\2\u08fb\u0900\7Y\2\2\u08fc\u0900\7e\2\2\u08fd")
        buf.write("\u0900\7)\2\2\u08fe\u0900\5\u02e2\u0172\2\u08ff\u08f0")
        buf.write("\3\2\2\2\u08ff\u08f1\3\2\2\2\u08ff\u08f2\3\2\2\2\u08ff")
        buf.write("\u08f3\3\2\2\2\u08ff\u08f4\3\2\2\2\u08ff\u08f5\3\2\2\2")
        buf.write("\u08ff\u08f6\3\2\2\2\u08ff\u08f7\3\2\2\2\u08ff\u08f8\3")
        buf.write("\2\2\2\u08ff\u08f9\3\2\2\2\u08ff\u08fa\3\2\2\2\u08ff\u08fb")
        buf.write("\3\2\2\2\u08ff\u08fc\3\2\2\2\u08ff\u08fd\3\2\2\2\u08ff")
        buf.write("\u08fe\3\2\2\2\u0900\u0191\3\2\2\2\u0901\u0911\5\u0310")
        buf.write("\u0189\2\u0902\u0911\5\u0194\u00cb\2\u0903\u0911\5\u030a")
        buf.write("\u0186\2\u0904\u0905\5\u01f0\u00f9\2\u0905\u0906\5\u01f2")
        buf.write("\u00fa\2\u0906\u0911\3\2\2\2\u0907\u0911\5\u0316\u018c")
        buf.write("\2\u0908\u0909\5*\26\2\u0909\u090a\5\u0318\u018d\2\u090a")
        buf.write("\u0911\3\2\2\2\u090b\u0911\5\u0300\u0181\2\u090c\u0911")
        buf.write("\5\u0302\u0182\2\u090d\u0911\5\u0304\u0183\2\u090e\u0911")
        buf.write("\5\u0306\u0184\2\u090f\u0911\5\u0308\u0185\2\u0910\u0901")
        buf.write("\3\2\2\2\u0910\u0902\3\2\2\2\u0910\u0903\3\2\2\2\u0910")
        buf.write("\u0904\3\2\2\2\u0910\u0907\3\2\2\2\u0910\u0908\3\2\2\2")
        buf.write("\u0910\u090b\3\2\2\2\u0910\u090c\3\2\2\2\u0910\u090d\3")
        buf.write("\2\2\2\u0910\u090e\3\2\2\2\u0910\u090f\3\2\2\2\u0911\u0193")
        buf.write("\3\2\2\2\u0912\u091c\5\f\7\2\u0913\u0914\5 \21\2\u0914")
        buf.write("\u0915\7z\2\2\u0915\u0916\5\u0312\u018a\2\u0916\u091d")
        buf.write("\3\2\2\2\u0917\u091d\5\u0318\u018d\2\u0918\u091d\5\u030e")
        buf.write("\u0188\2\u0919\u091d\5\u0312\u018a\2\u091a\u091d\5\u031e")
        buf.write("\u0190\2\u091b\u091d\5\u030c\u0187\2\u091c\u0913\3\2\2")
        buf.write("\2\u091c\u0917\3\2\2\2\u091c\u0918\3\2\2\2\u091c\u0919")
        buf.write("\3\2\2\2\u091c\u091a\3\2\2\2\u091c\u091b\3\2\2\2\u091d")
        buf.write("\u0195\3\2\2\2\u091e\u0923\5\u0198\u00cd\2\u091f\u0920")
        buf.write("\7{\2\2\u0920\u0922\5\u0198\u00cd\2\u0921\u091f\3\2\2")
        buf.write("\2\u0922\u0925\3\2\2\2\u0923\u0921\3\2\2\2\u0923\u0924")
        buf.write("\3\2\2\2\u0924\u0197\3\2\2\2\u0925\u0923\3\2\2\2\u0926")
        buf.write("\u0927\5\6\4\2\u0927\u0928\7\u0088\2\2\u0928\u0929\5\u00e4")
        buf.write("s\2\u0929\u0199\3\2\2\2\u092a\u092f\5\u019c\u00cf\2\u092b")
        buf.write("\u092c\7{\2\2\u092c\u092e\5\u019c\u00cf\2\u092d\u092b")
        buf.write("\3\2\2\2\u092e\u0931\3\2\2\2\u092f\u092d\3\2\2\2\u092f")
        buf.write("\u0930\3\2\2\2\u0930\u019b\3\2\2\2\u0931\u092f\3\2\2\2")
        buf.write("\u0932\u0938\5\6\4\2\u0933\u0934\5\6\4\2\u0934\u0935\7")
        buf.write("\u0088\2\2\u0935\u0936\5\u019e\u00d0\2\u0936\u0938\3\2")
        buf.write("\2\2\u0937\u0932\3\2\2\2\u0937\u0933\3\2\2\2\u0938\u019d")
        buf.write("\3\2\2\2\u0939\u093c\5\u00e0q\2\u093a\u093c\5\u0224\u0113")
        buf.write("\2\u093b\u0939\3\2\2\2\u093b\u093a\3\2\2\2\u093c\u019f")
        buf.write("\3\2\2\2\u093d\u093e\5\u01a2\u00d2\2\u093e\u093f\5\u01ac")
        buf.write("\u00d7\2\u093f\u01a1\3\2\2\2\u0940\u0942\5\u0264\u0133")
        buf.write("\2\u0941\u0940\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944")
        buf.write("\3\2\2\2\u0943\u0945\5\u01a4\u00d3\2\u0944\u0943\3\2\2")
        buf.write("\2\u0944\u0945\3\2\2\2\u0945\u0947\3\2\2\2\u0946\u0948")
        buf.write("\5\u02e2\u0172\2\u0947\u0946\3\2\2\2\u0947\u0948\3\2\2")
        buf.write("\2\u0948\u0949\3\2\2\2\u0949\u094a\5\u01a8\u00d5\2\u094a")
        buf.write("\u094c\5\u01aa\u00d6\2\u094b\u094d\5\u0172\u00ba\2\u094c")
        buf.write("\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094e\3\2\2\2")
        buf.write("\u094e\u0950\7x\2\2\u094f\u0951\5\u01ae\u00d8\2\u0950")
        buf.write("\u094f\3\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\3\2\2\2")
        buf.write("\u0952\u0954\7y\2\2\u0953\u0955\5\u017c\u00bf\2\u0954")
        buf.write("\u0953\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u01a3\3\2\2\2")
        buf.write("\u0956\u0958\5\u01a6\u00d4\2\u0957\u0956\3\2\2\2\u0958")
        buf.write("\u0959\3\2\2\2\u0959\u0957\3\2\2\2\u0959\u095a\3\2\2\2")
        buf.write("\u095a\u01a5\3\2\2\2\u095b\u0968\7A\2\2\u095c\u0968\7")
        buf.write("M\2\2\u095d\u0968\7L\2\2\u095e\u0968\79\2\2\u095f\u0968")
        buf.write("\7K\2\2\u0960\u0968\7Y\2\2\u0961\u0968\7h\2\2\u0962\u0968")
        buf.write("\7S\2\2\u0963\u0968\7H\2\2\u0964\u0968\7\13\2\2\u0965")
        buf.write("\u0968\7)\2\2\u0966\u0968\5\u028a\u0146\2\u0967\u095b")
        buf.write("\3\2\2\2\u0967\u095c\3\2\2\2\u0967\u095d\3\2\2\2\u0967")
        buf.write("\u095e\3\2\2\2\u0967\u095f\3\2\2\2\u0967\u0960\3\2\2\2")
        buf.write("\u0967\u0961\3\2\2\2\u0967\u0962\3\2\2\2\u0967\u0963\3")
        buf.write("\2\2\2\u0967\u0964\3\2\2\2\u0967\u0965\3\2\2\2\u0967\u0966")
        buf.write("\3\2\2\2\u0968\u01a7\3\2\2\2\u0969\u096c\5\f\7\2\u096a")
        buf.write("\u096c\7i\2\2\u096b\u0969\3\2\2\2\u096b\u096a\3\2\2\2")
        buf.write("\u096c\u01a9\3\2\2\2\u096d\u096e\5 \21\2\u096e\u01ab\3")
        buf.write("\2\2\2\u096f\u0972\5\u00eex\2\u0970\u0972\7}\2\2\u0971")
        buf.write("\u096f\3\2\2\2\u0971\u0970\3\2\2\2\u0972\u01ad\3\2\2\2")
        buf.write("\u0973\u097a\5\u01b8\u00dd\2\u0974\u0977\5\u01b0\u00d9")
        buf.write("\2\u0975\u0976\7{\2\2\u0976\u0978\5\u01b8\u00dd\2\u0977")
        buf.write("\u0975\3\2\2\2\u0977\u0978\3\2\2\2\u0978\u097a\3\2\2\2")
        buf.write("\u0979\u0973\3\2\2\2\u0979\u0974\3\2\2\2\u097a\u01af\3")
        buf.write("\2\2\2\u097b\u0980\5\u01b2\u00da\2\u097c\u097d\7{\2\2")
        buf.write("\u097d\u097f\5\u01b2\u00da\2\u097e\u097c\3\2\2\2\u097f")
        buf.write("\u0982\3\2\2\2\u0980\u097e\3\2\2\2\u0980\u0981\3\2\2\2")
        buf.write("\u0981\u01b1\3\2\2\2\u0982\u0980\3\2\2\2\u0983\u0985\5")
        buf.write("\u0264\u0133\2\u0984\u0983\3\2\2\2\u0984\u0985\3\2\2\2")
        buf.write("\u0985\u0987\3\2\2\2\u0986\u0988\5\u01b6\u00dc\2\u0987")
        buf.write("\u0986\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0989\3\2\2\2")
        buf.write("\u0989\u098a\5\f\7\2\u098a\u098c\5\6\4\2\u098b\u098d\5")
        buf.write("\u01b4\u00db\2\u098c\u098b\3\2\2\2\u098c\u098d\3\2\2\2")
        buf.write("\u098d\u0990\3\2\2\2\u098e\u0990\5\u02f2\u017a\2\u098f")
        buf.write("\u0984\3\2\2\2\u098f\u098e\3\2\2\2\u0990\u01b3\3\2\2\2")
        buf.write("\u0991\u0992\7\u0088\2\2\u0992\u0993\5\u00e0q\2\u0993")
        buf.write("\u01b5\3\2\2\2\u0994\u0995\t\n\2\2\u0995\u01b7\3\2\2\2")
        buf.write("\u0996\u0998\5\u0264\u0133\2\u0997\u0996\3\2\2\2\u0997")
        buf.write("\u0998\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u099a\7I\2\2")
        buf.write("\u099a\u099b\5\u021a\u010e\2\u099b\u099c\5\6\4\2\u099c")
        buf.write("\u01b9\3\2\2\2\u099d\u099f\5\u0264\u0133\2\u099e\u099d")
        buf.write("\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a1\3\2\2\2\u09a0")
        buf.write("\u09a2\5\u01bc\u00df\2\u09a1\u09a0\3\2\2\2\u09a1\u09a2")
        buf.write("\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a4\5\f\7\2\u09a4")
        buf.write("\u09a5\5\u01aa\u00d6\2\u09a5\u09a6\7t\2\2\u09a6\u09a7")
        buf.write("\5\u01c0\u00e1\2\u09a7\u09a8\7u\2\2\u09a8\u01bb\3\2\2")
        buf.write("\2\u09a9\u09ab\5\u01be\u00e0\2\u09aa\u09a9\3\2\2\2\u09ab")
        buf.write("\u09ac\3\2\2\2\u09ac\u09aa\3\2\2\2\u09ac\u09ad\3\2\2\2")
        buf.write("\u09ad\u01bd\3\2\2\2\u09ae\u09bb\7A\2\2\u09af\u09bb\7")
        buf.write("M\2\2\u09b0\u09bb\7L\2\2\u09b1\u09bb\79\2\2\u09b2\u09bb")
        buf.write("\7K\2\2\u09b3\u09bb\7Y\2\2\u09b4\u09bb\7h\2\2\u09b5\u09bb")
        buf.write("\7S\2\2\u09b6\u09bb\7H\2\2\u09b7\u09bb\7\13\2\2\u09b8")
        buf.write("\u09bb\7)\2\2\u09b9\u09bb\5\u028c\u0147\2\u09ba\u09ae")
        buf.write("\3\2\2\2\u09ba\u09af\3\2\2\2\u09ba\u09b0\3\2\2\2\u09ba")
        buf.write("\u09b1\3\2\2\2\u09ba\u09b2\3\2\2\2\u09ba\u09b3\3\2\2\2")
        buf.write("\u09ba\u09b4\3\2\2\2\u09ba\u09b5\3\2\2\2\u09ba\u09b6\3")
        buf.write("\2\2\2\u09ba\u09b7\3\2\2\2\u09ba\u09b8\3\2\2\2\u09ba\u09b9")
        buf.write("\3\2\2\2\u09bb\u01bf\3\2\2\2\u09bc\u09be\5\u0264\u0133")
        buf.write("\2\u09bd\u09bc\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09c0")
        buf.write("\3\2\2\2\u09bf\u09c1\5\u01c6\u00e4\2\u09c0\u09bf\3\2\2")
        buf.write("\2\u09c0\u09c1\3\2\2\2\u09c1\u09cc\3\2\2\2\u09c2\u09c3")
        buf.write("\5\u02e8\u0175\2\u09c3\u09c5\5\u01c8\u00e5\2\u09c4\u09c6")
        buf.write("\5\u01c4\u00e3\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2")
        buf.write("\2\u09c6\u09cd\3\2\2\2\u09c7\u09c8\5\u02ea\u0176\2\u09c8")
        buf.write("\u09ca\5\u01c8\u00e5\2\u09c9\u09cb\5\u01c2\u00e2\2\u09ca")
        buf.write("\u09c9\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cd\3\2\2\2")
        buf.write("\u09cc\u09c2\3\2\2\2\u09cc\u09c7\3\2\2\2\u09cd\u01c1\3")
        buf.write("\2\2\2\u09ce\u09d0\5\u0264\u0133\2\u09cf\u09ce\3\2\2\2")
        buf.write("\u09cf\u09d0\3\2\2\2\u09d0\u09d2\3\2\2\2\u09d1\u09d3\5")
        buf.write("\u01c6\u00e4\2\u09d2\u09d1\3\2\2\2\u09d2\u09d3\3\2\2\2")
        buf.write("\u09d3\u09d4\3\2\2\2\u09d4\u09d5\5\u02e8\u0175\2\u09d5")
        buf.write("\u09d6\5\u01c8\u00e5\2\u09d6\u01c3\3\2\2\2\u09d7\u09d9")
        buf.write("\5\u0264\u0133\2\u09d8\u09d7\3\2\2\2\u09d8\u09d9\3\2\2")
        buf.write("\2\u09d9\u09db\3\2\2\2\u09da\u09dc\5\u01c6\u00e4\2\u09db")
        buf.write("\u09da\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09dd\3\2\2\2")
        buf.write("\u09dd\u09de\5\u02ea\u0176\2\u09de\u09df\5\u01c8\u00e5")
        buf.write("\2\u09df\u01c5\3\2\2\2\u09e0\u09e8\7L\2\2\u09e1\u09e8")
        buf.write("\79\2\2\u09e2\u09e8\7K\2\2\u09e3\u09e4\7L\2\2\u09e4\u09e8")
        buf.write("\79\2\2\u09e5\u09e6\79\2\2\u09e6\u09e8\7L\2\2\u09e7\u09e0")
        buf.write("\3\2\2\2\u09e7\u09e1\3\2\2\2\u09e7\u09e2\3\2\2\2\u09e7")
        buf.write("\u09e3\3\2\2\2\u09e7\u09e5\3\2\2\2\u09e8\u01c7\3\2\2\2")
        buf.write("\u09e9\u09ec\5\u00eex\2\u09ea\u09ec\7}\2\2\u09eb\u09e9")
        buf.write("\3\2\2\2\u09eb\u09ea\3\2\2\2\u09ec\u01c9\3\2\2\2\u09ed")
        buf.write("\u09ef\5\u0264\u0133\2\u09ee\u09ed\3\2\2\2\u09ee\u09ef")
        buf.write("\3\2\2\2\u09ef\u09f1\3\2\2\2\u09f0\u09f2\5\u01cc\u00e7")
        buf.write("\2\u09f1\u09f0\3\2\2\2\u09f1\u09f2\3\2\2\2\u09f2\u09f3")
        buf.write("\3\2\2\2\u09f3\u09f4\7\'\2\2\u09f4\u09fd\5\f\7\2\u09f5")
        buf.write("\u09f6\5\u019a\u00ce\2\u09f6\u09f7\7}\2\2\u09f7\u09fe")
        buf.write("\3\2\2\2\u09f8\u09f9\5\u01aa\u00d6\2\u09f9\u09fa\7t\2")
        buf.write("\2\u09fa\u09fb\5\u01d0\u00e9\2\u09fb\u09fc\7u\2\2\u09fc")
        buf.write("\u09fe\3\2\2\2\u09fd\u09f5\3\2\2\2\u09fd\u09f8\3\2\2\2")
        buf.write("\u09fe\u01cb\3\2\2\2\u09ff\u0a03\5\u01ce\u00e8\2\u0a00")
        buf.write("\u0a02\5\u01ce\u00e8\2\u0a01\u0a00\3\2\2\2\u0a02\u0a05")
        buf.write("\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04")
        buf.write("\u01cd\3\2\2\2\u0a05\u0a03\3\2\2\2\u0a06\u0a13\7A\2\2")
        buf.write("\u0a07\u0a13\7M\2\2\u0a08\u0a13\7L\2\2\u0a09\u0a13\79")
        buf.write("\2\2\u0a0a\u0a13\7K\2\2\u0a0b\u0a13\7Y\2\2\u0a0c\u0a13")
        buf.write("\7h\2\2\u0a0d\u0a13\7S\2\2\u0a0e\u0a13\7H\2\2\u0a0f\u0a13")
        buf.write("\7\13\2\2\u0a10\u0a13\7)\2\2\u0a11\u0a13\5\u028e\u0148")
        buf.write("\2\u0a12\u0a06\3\2\2\2\u0a12\u0a07\3\2\2\2\u0a12\u0a08")
        buf.write("\3\2\2\2\u0a12\u0a09\3\2\2\2\u0a12\u0a0a\3\2\2\2\u0a12")
        buf.write("\u0a0b\3\2\2\2\u0a12\u0a0c\3\2\2\2\u0a12\u0a0d\3\2\2\2")
        buf.write("\u0a12\u0a0e\3\2\2\2\u0a12\u0a0f\3\2\2\2\u0a12\u0a10\3")
        buf.write("\2\2\2\u0a12\u0a11\3\2\2\2\u0a13\u01cf\3\2\2\2\u0a14\u0a16")
        buf.write("\5\u0264\u0133\2\u0a15\u0a14\3\2\2\2\u0a15\u0a16\3\2\2")
        buf.write("\2\u0a16\u0a1f\3\2\2\2\u0a17\u0a18\5\u02ec\u0177\2\u0a18")
        buf.write("\u0a19\5\u00eex\2\u0a19\u0a1a\5\u01d4\u00eb\2\u0a1a\u0a20")
        buf.write("\3\2\2\2\u0a1b\u0a1c\5\u02ee\u0178\2\u0a1c\u0a1d\5\u00ee")
        buf.write("x\2\u0a1d\u0a1e\5\u01d2\u00ea\2\u0a1e\u0a20\3\2\2\2\u0a1f")
        buf.write("\u0a17\3\2\2\2\u0a1f\u0a1b\3\2\2\2\u0a20\u01d1\3\2\2\2")
        buf.write("\u0a21\u0a23\5\u0264\u0133\2\u0a22\u0a21\3\2\2\2\u0a22")
        buf.write("\u0a23\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a25\5\u02ec")
        buf.write("\u0177\2\u0a25\u0a26\5\u00eex\2\u0a26\u01d3\3\2\2\2\u0a27")
        buf.write("\u0a29\5\u0264\u0133\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29")
        buf.write("\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b\5\u02ee\u0178")
        buf.write("\2\u0a2b\u0a2c\5\u00eex\2\u0a2c\u01d5\3\2\2\2\u0a2d\u0a2f")
        buf.write("\5\u0264\u0133\2\u0a2e\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2")
        buf.write("\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a32\5\u01d8\u00ed\2\u0a31")
        buf.write("\u0a30\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a33\3\2\2\2")
        buf.write("\u0a33\u0a34\5\u01dc\u00ef\2\u0a34\u0a35\7t\2\2\u0a35")
        buf.write("\u0a36\5\u01c0\u00e1\2\u0a36\u0a37\7u\2\2\u0a37\u01d7")
        buf.write("\3\2\2\2\u0a38\u0a3c\5\u01da\u00ee\2\u0a39\u0a3b\5\u01da")
        buf.write("\u00ee\2\u0a3a\u0a39\3\2\2\2\u0a3b\u0a3e\3\2\2\2\u0a3c")
        buf.write("\u0a3a\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u01d9\3\2\2\2")
        buf.write("\u0a3e\u0a3c\3\2\2\2\u0a3f\u0a4b\7A\2\2\u0a40\u0a4b\7")
        buf.write("M\2\2\u0a41\u0a4b\7L\2\2\u0a42\u0a4b\79\2\2\u0a43\u0a4b")
        buf.write("\7K\2\2\u0a44\u0a4b\7h\2\2\u0a45\u0a4b\7S\2\2\u0a46\u0a4b")
        buf.write("\7H\2\2\u0a47\u0a4b\7\13\2\2\u0a48\u0a4b\7)\2\2\u0a49")
        buf.write("\u0a4b\5\u0290\u0149\2\u0a4a\u0a3f\3\2\2\2\u0a4a\u0a40")
        buf.write("\3\2\2\2\u0a4a\u0a41\3\2\2\2\u0a4a\u0a42\3\2\2\2\u0a4a")
        buf.write("\u0a43\3\2\2\2\u0a4a\u0a44\3\2\2\2\u0a4a\u0a45\3\2\2\2")
        buf.write("\u0a4a\u0a46\3\2\2\2\u0a4a\u0a47\3\2\2\2\u0a4a\u0a48\3")
        buf.write("\2\2\2\u0a4a\u0a49\3\2\2\2\u0a4b\u01db\3\2\2\2\u0a4c\u0a50")
        buf.write("\5\f\7\2\u0a4d\u0a4e\5 \21\2\u0a4e\u0a4f\7z\2\2\u0a4f")
        buf.write("\u0a51\3\2\2\2\u0a50\u0a4d\3\2\2\2\u0a50\u0a51\3\2\2\2")
        buf.write("\u0a51\u0a52\3\2\2\2\u0a52\u0a53\7]\2\2\u0a53\u0a54\7")
        buf.write("v\2\2\u0a54\u0a55\5\u01ae\u00d8\2\u0a55\u0a56\7w\2\2\u0a56")
        buf.write("\u01dd\3\2\2\2\u0a57\u0a59\5\u0264\u0133\2\u0a58\u0a57")
        buf.write("\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a")
        buf.write("\u0a5b\5\u01e0\u00f1\2\u0a5b\u0a5c\5\u01e4\u00f3\2\u0a5c")
        buf.write("\u0a5d\5\u01f2\u00fa\2\u0a5d\u01df\3\2\2\2\u0a5e\u0a62")
        buf.write("\5\u01e2\u00f2\2\u0a5f\u0a61\5\u01e2\u00f2\2\u0a60\u0a5f")
        buf.write("\3\2\2\2\u0a61\u0a64\3\2\2\2\u0a62\u0a60\3\2\2\2\u0a62")
        buf.write("\u0a63\3\2\2\2\u0a63\u01e1\3\2\2\2\u0a64\u0a62\3\2\2\2")
        buf.write("\u0a65\u0a6a\7M\2\2\u0a66\u0a6a\7Y\2\2\u0a67\u0a6a\7)")
        buf.write("\2\2\u0a68\u0a6a\5\u0292\u014a\2\u0a69\u0a65\3\2\2\2\u0a69")
        buf.write("\u0a66\3\2\2\2\u0a69\u0a67\3\2\2\2\u0a69\u0a68\3\2\2\2")
        buf.write("\u0a6a\u01e3\3\2\2\2\u0a6b\u0a6f\5\u01e6\u00f4\2\u0a6c")
        buf.write("\u0a6f\5\u01ea\u00f6\2\u0a6d\u0a6f\5\u01f0\u00f9\2\u0a6e")
        buf.write("\u0a6b\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6d\3\2\2\2")
        buf.write("\u0a6f\u01e5\3\2\2\2\u0a70\u0a71\5\f\7\2\u0a71\u0a72\7")
        buf.write("E\2\2\u0a72\u0a73\5\u01e8\u00f5\2\u0a73\u0a74\7x\2\2\u0a74")
        buf.write("\u0a75\5\f\7\2\u0a75\u0a76\5\6\4\2\u0a76\u0a77\7y\2\2")
        buf.write("\u0a77\u01e7\3\2\2\2\u0a78\u0a79\t\13\2\2\u0a79\u01e9")
        buf.write("\3\2\2\2\u0a7a\u0a7b\5\f\7\2\u0a7b\u0a7c\7E\2\2\u0a7c")
        buf.write("\u0a7d\5\u01ec\u00f7\2\u0a7d\u0a7e\7x\2\2\u0a7e\u0a7f")
        buf.write("\5\f\7\2\u0a7f\u0a80\5\6\4\2\u0a80\u0a81\7{\2\2\u0a81")
        buf.write("\u0a82\5\f\7\2\u0a82\u0a83\5\6\4\2\u0a83\u0a84\7y\2\2")
        buf.write("\u0a84\u01eb\3\2\2\2\u0a85\u0a96\7~\2\2\u0a86\u0a96\7")
        buf.write("\177\2\2\u0a87\u0a96\7\u0080\2\2\u0a88\u0a96\7\u0081\2")
        buf.write("\2\u0a89\u0a96\7\u0082\2\2\u0a8a\u0a96\7\u0083\2\2\u0a8b")
        buf.write("\u0a96\7\u0084\2\2\u0a8c\u0a96\7\u0085\2\2\u0a8d\u0a96")
        buf.write("\7\u009f\2\2\u0a8e\u0a96\5\u02f6\u017c\2\u0a8f\u0a96\7")
        buf.write("\u0093\2\2\u0a90\u0a96\7\u0094\2\2\u0a91\u0a96\7\u008a")
        buf.write("\2\2\u0a92\u0a96\7\u0089\2\2\u0a93\u0a96\7\u0096\2\2\u0a94")
        buf.write("\u0a96\7\u0095\2\2\u0a95\u0a85\3\2\2\2\u0a95\u0a86\3\2")
        buf.write("\2\2\u0a95\u0a87\3\2\2\2\u0a95\u0a88\3\2\2\2\u0a95\u0a89")
        buf.write("\3\2\2\2\u0a95\u0a8a\3\2\2\2\u0a95\u0a8b\3\2\2\2\u0a95")
        buf.write("\u0a8c\3\2\2\2\u0a95\u0a8d\3\2\2\2\u0a95\u0a8e\3\2\2\2")
        buf.write("\u0a95\u0a8f\3\2\2\2\u0a95\u0a90\3\2\2\2\u0a95\u0a91\3")
        buf.write("\2\2\2\u0a95\u0a92\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a95\u0a94")
        buf.write("\3\2\2\2\u0a96\u01ed\3\2\2\2\u0a97\u0aae\7~\2\2\u0a98")
        buf.write("\u0aae\7\177\2\2\u0a99\u0aae\7\u0086\2\2\u0a9a\u0aae\7")
        buf.write("\u0087\2\2\u0a9b\u0aae\7\u008e\2\2\u0a9c\u0aae\7\u008f")
        buf.write("\2\2\u0a9d\u0aae\7_\2\2\u0a9e\u0aae\7*\2\2\u0a9f\u0aae")
        buf.write("\7\u0080\2\2\u0aa0\u0aae\7\u0081\2\2\u0aa1\u0aae\7\u0082")
        buf.write("\2\2\u0aa2\u0aae\7\u0083\2\2\u0aa3\u0aae\7\u0084\2\2\u0aa4")
        buf.write("\u0aae\7\u0085\2\2\u0aa5\u0aae\7\u009f\2\2\u0aa6\u0aae")
        buf.write("\5\u02f6\u017c\2\u0aa7\u0aae\7\u0093\2\2\u0aa8\u0aae\7")
        buf.write("\u0094\2\2\u0aa9\u0aae\7\u008a\2\2\u0aaa\u0aae\7\u0089")
        buf.write("\2\2\u0aab\u0aae\7\u0096\2\2\u0aac\u0aae\7\u0095\2\2\u0aad")
        buf.write("\u0a97\3\2\2\2\u0aad\u0a98\3\2\2\2\u0aad\u0a99\3\2\2\2")
        buf.write("\u0aad\u0a9a\3\2\2\2\u0aad\u0a9b\3\2\2\2\u0aad\u0a9c\3")
        buf.write("\2\2\2\u0aad\u0a9d\3\2\2\2\u0aad\u0a9e\3\2\2\2\u0aad\u0a9f")
        buf.write("\3\2\2\2\u0aad\u0aa0\3\2\2\2\u0aad\u0aa1\3\2\2\2\u0aad")
        buf.write("\u0aa2\3\2\2\2\u0aad\u0aa3\3\2\2\2\u0aad\u0aa4\3\2\2\2")
        buf.write("\u0aad\u0aa5\3\2\2\2\u0aad\u0aa6\3\2\2\2\u0aad\u0aa7\3")
        buf.write("\2\2\2\u0aad\u0aa8\3\2\2\2\u0aad\u0aa9\3\2\2\2\u0aad\u0aaa")
        buf.write("\3\2\2\2\u0aad\u0aab\3\2\2\2\u0aad\u0aac\3\2\2\2\u0aae")
        buf.write("\u01ef\3\2\2\2\u0aaf\u0ab0\7\65\2\2\u0ab0\u0ab1\7E\2\2")
        buf.write("\u0ab1\u0ab2\5\f\7\2\u0ab2\u0ab3\7x\2\2\u0ab3\u0ab4\5")
        buf.write("\f\7\2\u0ab4\u0ab5\5\6\4\2\u0ab5\u0ab6\7y\2\2\u0ab6\u0ac0")
        buf.write("\3\2\2\2\u0ab7\u0ab8\7(\2\2\u0ab8\u0ab9\7E\2\2\u0ab9\u0aba")
        buf.write("\5\f\7\2\u0aba\u0abb\7x\2\2\u0abb\u0abc\5\f\7\2\u0abc")
        buf.write("\u0abd\5\6\4\2\u0abd\u0abe\7y\2\2\u0abe\u0ac0\3\2\2\2")
        buf.write("\u0abf\u0aaf\3\2\2\2\u0abf\u0ab7\3\2\2\2\u0ac0\u01f1\3")
        buf.write("\2\2\2\u0ac1\u0ac4\5\u00eex\2\u0ac2\u0ac4\7}\2\2\u0ac3")
        buf.write("\u0ac1\3\2\2\2\u0ac3\u0ac2\3\2\2\2\u0ac4\u01f3\3\2\2\2")
        buf.write("\u0ac5\u0ac7\5\u0264\u0133\2\u0ac6\u0ac5\3\2\2\2\u0ac6")
        buf.write("\u0ac7\3\2\2\2\u0ac7\u0ac9\3\2\2\2\u0ac8\u0aca\5\u01f6")
        buf.write("\u00fc\2\u0ac9\u0ac8\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca")
        buf.write("\u0acb\3\2\2\2\u0acb\u0acc\5\u01fa\u00fe\2\u0acc\u0acd")
        buf.write("\5\u01fe\u0100\2\u0acd\u01f5\3\2\2\2\u0ace\u0ad0\5\u01f8")
        buf.write("\u00fd\2\u0acf\u0ace\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1")
        buf.write("\u0acf\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u01f7\3\2\2\2")
        buf.write("\u0ad3\u0ada\7M\2\2\u0ad4\u0ada\7L\2\2\u0ad5\u0ada\79")
        buf.write("\2\2\u0ad6\u0ada\7K\2\2\u0ad7\u0ada\7)\2\2\u0ad8\u0ada")
        buf.write("\5\u0294\u014b\2\u0ad9\u0ad3\3\2\2\2\u0ad9\u0ad4\3\2\2")
        buf.write("\2\u0ad9\u0ad5\3\2\2\2\u0ad9\u0ad6\3\2\2\2\u0ad9\u0ad7")
        buf.write("\3\2\2\2\u0ad9\u0ad8\3\2\2\2\u0ada\u01f9\3\2\2\2\u0adb")
        buf.write("\u0adc\5\6\4\2\u0adc\u0ade\7x\2\2\u0add\u0adf\5\u01ae")
        buf.write("\u00d8\2\u0ade\u0add\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf")
        buf.write("\u0ae0\3\2\2\2\u0ae0\u0ae2\7y\2\2\u0ae1\u0ae3\5\u01fc")
        buf.write("\u00ff\2\u0ae2\u0ae1\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3")
        buf.write("\u01fb\3\2\2\2\u0ae4\u0ae5\7|\2\2\u0ae5\u0ae6\7\21\2\2")
        buf.write("\u0ae6\u0ae8\7x\2\2\u0ae7\u0ae9\5.\30\2\u0ae8\u0ae7\3")
        buf.write("\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0af3")
        buf.write("\7y\2\2\u0aeb\u0aec\7|\2\2\u0aec\u0aed\7]\2\2\u0aed\u0aef")
        buf.write("\7x\2\2\u0aee\u0af0\5.\30\2\u0aef\u0aee\3\2\2\2\u0aef")
        buf.write("\u0af0\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af3\7y\2\2")
        buf.write("\u0af2\u0ae4\3\2\2\2\u0af2\u0aeb\3\2\2\2\u0af3\u01fd\3")
        buf.write("\2\2\2\u0af4\u0af7\5\u00eex\2\u0af5\u0af7\7}\2\2\u0af6")
        buf.write("\u0af4\3\2\2\2\u0af6\u0af5\3\2\2\2\u0af7\u01ff\3\2\2\2")
        buf.write("\u0af8\u0afa\5\u0264\u0133\2\u0af9\u0af8\3\2\2\2\u0af9")
        buf.write("\u0afa\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0afc\5\u0202")
        buf.write("\u0102\2\u0afc\u0afd\5\6\4\2\u0afd\u0afe\7x\2\2\u0afe")
        buf.write("\u0aff\7y\2\2\u0aff\u0b00\5\u0204\u0103\2\u0b00\u0201")
        buf.write("\3\2\2\2\u0b01\u0b02\5\u0298\u014d\2\u0b02\u0203\3\2\2")
        buf.write("\2\u0b03\u0b06\5\u00eex\2\u0b04\u0b06\7}\2\2\u0b05\u0b03")
        buf.write("\3\2\2\2\u0b05\u0b04\3\2\2\2\u0b06\u0205\3\2\2\2\u0b07")
        buf.write("\u0b08\5\u0296\u014c\2\u0b08\u0207\3\2\2\2\u0b09\u0b0c")
        buf.write("\5\u00eex\2\u0b0a\u0b0c\7}\2\2\u0b0b\u0b09\3\2\2\2\u0b0b")
        buf.write("\u0b0a\3\2\2\2\u0b0c\u0209\3\2\2\2\u0b0d\u0b10\5\u00ee")
        buf.write("x\2\u0b0e\u0b10\7}\2\2\u0b0f\u0b0d\3\2\2\2\u0b0f\u0b0e")
        buf.write("\3\2\2\2\u0b10\u020b\3\2\2\2\u0b11\u0b13\5\u0264\u0133")
        buf.write("\2\u0b12\u0b11\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b15")
        buf.write("\3\2\2\2\u0b14\u0b16\5\u020e\u0108\2\u0b15\u0b14\3\2\2")
        buf.write("\2\u0b15\u0b16\3\2\2\2\u0b16\u0b18\3\2\2\2\u0b17\u0b19")
        buf.write("\5\u02e2\u0172\2\u0b18\u0b17\3\2\2\2\u0b18\u0b19\3\2\2")
        buf.write("\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1b\7[\2\2\u0b1b\u0b1d")
        buf.write("\5\6\4\2\u0b1c\u0b1e\5\u0172\u00ba\2\u0b1d\u0b1c\3\2\2")
        buf.write("\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b20\3\2\2\2\u0b1f\u0b21")
        buf.write("\5\u0212\u010a\2\u0b20\u0b1f\3\2\2\2\u0b20\u0b21\3\2\2")
        buf.write("\2\u0b21\u0b23\3\2\2\2\u0b22\u0b24\5\u017c\u00bf\2\u0b23")
        buf.write("\u0b22\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b25\3\2\2\2")
        buf.write("\u0b25\u0b27\5\u0214\u010b\2\u0b26\u0b28\7}\2\2\u0b27")
        buf.write("\u0b26\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u020d\3\2\2\2")
        buf.write("\u0b29\u0b2d\5\u0210\u0109\2\u0b2a\u0b2c\5\u0210\u0109")
        buf.write("\2\u0b2b\u0b2a\3\2\2\2\u0b2c\u0b2f\3\2\2\2\u0b2d\u0b2b")
        buf.write("\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u020f\3\2\2\2\u0b2f")
        buf.write("\u0b2d\3\2\2\2\u0b30\u0b37\7A\2\2\u0b31\u0b37\7M\2\2\u0b32")
        buf.write("\u0b37\7L\2\2\u0b33\u0b37\79\2\2\u0b34\u0b37\7K\2\2\u0b35")
        buf.write("\u0b37\5\u0282\u0142\2\u0b36\u0b30\3\2\2\2\u0b36\u0b31")
        buf.write("\3\2\2\2\u0b36\u0b32\3\2\2\2\u0b36\u0b33\3\2\2\2\u0b36")
        buf.write("\u0b34\3\2\2\2\u0b36\u0b35\3\2\2\2\u0b37\u0211\3\2\2\2")
        buf.write("\u0b38\u0b39\7|\2\2\u0b39\u0b3a\5\u017a\u00be\2\u0b3a")
        buf.write("\u0213\3\2\2\2\u0b3b\u0b3d\7t\2\2\u0b3c\u0b3e\5\u0216")
        buf.write("\u010c\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e")
        buf.write("\u0b3f\3\2\2\2\u0b3f\u0b40\7u\2\2\u0b40\u0215\3\2\2\2")
        buf.write("\u0b41\u0b45\5\u0218\u010d\2\u0b42\u0b44\5\u0218\u010d")
        buf.write("\2\u0b43\u0b42\3\2\2\2\u0b44\u0b47\3\2\2\2\u0b45\u0b43")
        buf.write("\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0217\3\2\2\2\u0b47")
        buf.write("\u0b45\3\2\2\2\u0b48\u0b4a\5\u0264\u0133\2\u0b49\u0b48")
        buf.write("\3\2\2\2\u0b49\u0b4a\3\2\2\2\u0b4a\u0b4c\3\2\2\2\u0b4b")
        buf.write("\u0b4d\5\u018e\u00c8\2\u0b4c\u0b4b\3\2\2\2\u0b4c\u0b4d")
        buf.write("\3\2\2\2\u0b4d\u0b54\3\2\2\2\u0b4e\u0b55\5\u0192\u00ca")
        buf.write("\2\u0b4f\u0b50\7,\2\2\u0b50\u0b51\5\u02be\u0160\2\u0b51")
        buf.write("\u0b52\5\u02c0\u0161\2\u0b52\u0b53\7}\2\2\u0b53\u0b55")
        buf.write("\3\2\2\2\u0b54\u0b4e\3\2\2\2\u0b54\u0b4f\3\2\2\2\u0b55")
        buf.write("\u0219\3\2\2\2\u0b56\u0b5e\5\16\b\2\u0b57\u0b59\t\5\2")
        buf.write("\2\u0b58\u0b57\3\2\2\2\u0b59\u0b5c\3\2\2\2\u0b5a\u0b58")
        buf.write("\3\2\2\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u0b5d\3\2\2\2\u0b5c")
        buf.write("\u0b5a\3\2\2\2\u0b5d\u0b5f\5\u0220\u0111\2\u0b5e\u0b5a")
        buf.write("\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b5e\3\2\2\2\u0b60")
        buf.write("\u0b61\3\2\2\2\u0b61\u021b\3\2\2\2\u0b62\u0b68\5\16\b")
        buf.write("\2\u0b63\u0b67\5\u0220\u0111\2\u0b64\u0b67\7\u008b\2\2")
        buf.write("\u0b65\u0b67\7\u0080\2\2\u0b66\u0b63\3\2\2\2\u0b66\u0b64")
        buf.write("\3\2\2\2\u0b66\u0b65\3\2\2\2\u0b67\u0b6a\3\2\2\2\u0b68")
        buf.write("\u0b66\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u021d\3\2\2\2")
        buf.write("\u0b6a\u0b68\3\2\2\2\u0b6b\u0b6d\5\u0220\u0111\2\u0b6c")
        buf.write("\u0b6b\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b6c\3\2\2\2")
        buf.write("\u0b6e\u0b6f\3\2\2\2\u0b6f\u021f\3\2\2\2\u0b70\u0b72\7")
        buf.write("v\2\2\u0b71\u0b73\5\u0222\u0112\2\u0b72\u0b71\3\2\2\2")
        buf.write("\u0b72\u0b73\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b75\7")
        buf.write("w\2\2\u0b75\u0221\3\2\2\2\u0b76\u0b7a\7{\2\2\u0b77\u0b79")
        buf.write("\7{\2\2\u0b78\u0b77\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a")
        buf.write("\u0b78\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0223\3\2\2\2")
        buf.write("\u0b7c\u0b7a\3\2\2\2\u0b7d\u0b7e\7t\2\2\u0b7e\u0b87\7")
        buf.write("u\2\2\u0b7f\u0b80\7t\2\2\u0b80\u0b82\5\u0226\u0114\2\u0b81")
        buf.write("\u0b83\7{\2\2\u0b82\u0b81\3\2\2\2\u0b82\u0b83\3\2\2\2")
        buf.write("\u0b83\u0b84\3\2\2\2\u0b84\u0b85\7u\2\2\u0b85\u0b87\3")
        buf.write("\2\2\2\u0b86\u0b7d\3\2\2\2\u0b86\u0b7f\3\2\2\2\u0b87\u0225")
        buf.write("\3\2\2\2\u0b88\u0b8d\5\u019e\u00d0\2\u0b89\u0b8a\7{\2")
        buf.write("\2\u0b8a\u0b8c\5\u019e\u00d0\2\u0b8b\u0b89\3\2\2\2\u0b8c")
        buf.write("\u0b8f\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8d\u0b8e\3\2\2\2")
        buf.write("\u0b8e\u0227\3\2\2\2\u0b8f\u0b8d\3\2\2\2\u0b90\u0b92\5")
        buf.write("\u0264\u0133\2\u0b91\u0b90\3\2\2\2\u0b91\u0b92\3\2\2\2")
        buf.write("\u0b92\u0b94\3\2\2\2\u0b93\u0b95\5\u022a\u0116\2\u0b94")
        buf.write("\u0b93\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b97\3\2\2\2")
        buf.write("\u0b96\u0b98\5\u02e2\u0172\2\u0b97\u0b96\3\2\2\2\u0b97")
        buf.write("\u0b98\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0b9a\78\2\2")
        buf.write("\u0b9a\u0b9c\5\6\4\2\u0b9b\u0b9d\5\u022e\u0118\2\u0b9c")
        buf.write("\u0b9b\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9f\3\2\2\2")
        buf.write("\u0b9e\u0ba0\5\u0234\u011b\2\u0b9f\u0b9e\3\2\2\2\u0b9f")
        buf.write("\u0ba0\3\2\2\2\u0ba0\u0ba2\3\2\2\2\u0ba1\u0ba3\5\u017c")
        buf.write("\u00bf\2\u0ba2\u0ba1\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3")
        buf.write("\u0ba4\3\2\2\2\u0ba4\u0ba6\5\u0236\u011c\2\u0ba5\u0ba7")
        buf.write("\7}\2\2\u0ba6\u0ba5\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7")
        buf.write("\u0229\3\2\2\2\u0ba8\u0bac\5\u022c\u0117\2\u0ba9\u0bab")
        buf.write("\5\u022c\u0117\2\u0baa\u0ba9\3\2\2\2\u0bab\u0bae\3\2\2")
        buf.write("\2\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u022b")
        buf.write("\3\2\2\2\u0bae\u0bac\3\2\2\2\u0baf\u0bb6\7A\2\2\u0bb0")
        buf.write("\u0bb6\7M\2\2\u0bb1\u0bb6\7L\2\2\u0bb2\u0bb6\79\2\2\u0bb3")
        buf.write("\u0bb6\7K\2\2\u0bb4\u0bb6\5\u0284\u0143\2\u0bb5\u0baf")
        buf.write("\3\2\2\2\u0bb5\u0bb0\3\2\2\2\u0bb5\u0bb1\3\2\2\2\u0bb5")
        buf.write("\u0bb2\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb4\3\2\2\2")
        buf.write("\u0bb6\u022d\3\2\2\2\u0bb7\u0bb8\7\u0089\2\2\u0bb8\u0bb9")
        buf.write("\5\u0230\u0119\2\u0bb9\u0bba\7\u008a\2\2\u0bba\u022f\3")
        buf.write("\2\2\2\u0bbb\u0bbd\5\u0264\u0133\2\u0bbc\u0bbb\3\2\2\2")
        buf.write("\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bc0\5")
        buf.write("\u0232\u011a\2\u0bbf\u0bbe\3\2\2\2\u0bbf\u0bc0\3\2\2\2")
        buf.write("\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bcc\5\u0176\u00bc\2\u0bc2")
        buf.write("\u0bc4\7{\2\2\u0bc3\u0bc5\5\u0264\u0133\2\u0bc4\u0bc3")
        buf.write("\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc7\3\2\2\2\u0bc6")
        buf.write("\u0bc8\5\u0232\u011a\2\u0bc7\u0bc6\3\2\2\2\u0bc7\u0bc8")
        buf.write("\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bcb\5\u0176\u00bc")
        buf.write("\2\u0bca\u0bc2\3\2\2\2\u0bcb\u0bce\3\2\2\2\u0bcc\u0bca")
        buf.write("\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0231\3\2\2\2\u0bce")
        buf.write("\u0bcc\3\2\2\2\u0bcf\u0bd0\t\f\2\2\u0bd0\u0233\3\2\2\2")
        buf.write("\u0bd1\u0bd2\7|\2\2\u0bd2\u0bd3\5\u017a\u00be\2\u0bd3")
        buf.write("\u0235\3\2\2\2\u0bd4\u0bd6\7t\2\2\u0bd5\u0bd7\5\u0238")
        buf.write("\u011d\2\u0bd6\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7")
        buf.write("\u0bd8\3\2\2\2\u0bd8\u0bd9\7u\2\2\u0bd9\u0237\3\2\2\2")
        buf.write("\u0bda\u0bdc\5\u023a\u011e\2\u0bdb\u0bda\3\2\2\2\u0bdc")
        buf.write("\u0bdd\3\2\2\2\u0bdd\u0bdb\3\2\2\2\u0bdd\u0bde\3\2\2\2")
        buf.write("\u0bde\u0239\3\2\2\2\u0bdf\u0be1\5\u0264\u0133\2\u0be0")
        buf.write("\u0bdf\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0be3\3\2\2\2")
        buf.write("\u0be2\u0be4\7A\2\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3")
        buf.write("\2\2\2\u0be4\u0c17\3\2\2\2\u0be5\u0c01\5\f\7\2\u0be6\u0be8")
        buf.write("\5\6\4\2\u0be7\u0be9\5\u0172\u00ba\2\u0be8\u0be7\3\2\2")
        buf.write("\2\u0be8\u0be9\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0bec")
        buf.write("\7x\2\2\u0beb\u0bed\5\u01ae\u00d8\2\u0bec\u0beb\3\2\2")
        buf.write("\2\u0bec\u0bed\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0bf0")
        buf.write("\7y\2\2\u0bef\u0bf1\5\u017c\u00bf\2\u0bf0\u0bef\3\2\2")
        buf.write("\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf3")
        buf.write("\7}\2\2\u0bf3\u0c02\3\2\2\2\u0bf4\u0bf5\5\6\4\2\u0bf5")
        buf.write("\u0bf6\7t\2\2\u0bf6\u0bf7\5\u0240\u0121\2\u0bf7\u0bf8")
        buf.write("\7u\2\2\u0bf8\u0c02\3\2\2\2\u0bf9\u0bfa\7]\2\2\u0bfa\u0bfb")
        buf.write("\7v\2\2\u0bfb\u0bfc\5\u01ae\u00d8\2\u0bfc\u0bfd\7w\2\2")
        buf.write("\u0bfd\u0bfe\7t\2\2\u0bfe\u0bff\5\u0240\u0121\2\u0bff")
        buf.write("\u0c00\7u\2\2\u0c00\u0c02\3\2\2\2\u0c01\u0be6\3\2\2\2")
        buf.write("\u0c01\u0bf4\3\2\2\2\u0c01\u0bf9\3\2\2\2\u0c02\u0c18\3")
        buf.write("\2\2\2\u0c03\u0c04\7i\2\2\u0c04\u0c06\5\6\4\2\u0c05\u0c07")
        buf.write("\5\u0172\u00ba\2\u0c06\u0c05\3\2\2\2\u0c06\u0c07\3\2\2")
        buf.write("\2\u0c07\u0c08\3\2\2\2\u0c08\u0c0a\7x\2\2\u0c09\u0c0b")
        buf.write("\5\u01ae\u00d8\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2")
        buf.write("\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0e\7y\2\2\u0c0d\u0c0f")
        buf.write("\5\u017c\u00bf\2\u0c0e\u0c0d\3\2\2\2\u0c0e\u0c0f\3\2\2")
        buf.write("\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c11\7}\2\2\u0c11\u0c18")
        buf.write("\3\2\2\2\u0c12\u0c13\7\'\2\2\u0c13\u0c14\5\f\7\2\u0c14")
        buf.write("\u0c15\5\6\4\2\u0c15\u0c16\7}\2\2\u0c16\u0c18\3\2\2\2")
        buf.write("\u0c17\u0be5\3\2\2\2\u0c17\u0c03\3\2\2\2\u0c17\u0c12\3")
        buf.write("\2\2\2\u0c18\u023b\3\2\2\2\u0c19\u0c1b\5\u0264\u0133\2")
        buf.write("\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1d\3")
        buf.write("\2\2\2\u0c1c\u0c1e\7A\2\2\u0c1d\u0c1c\3\2\2\2\u0c1d\u0c1e")
        buf.write("\3\2\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c20\5\u01a8\u00d5")
        buf.write("\2\u0c20\u0c22\5\6\4\2\u0c21\u0c23\5\u0172\u00ba\2\u0c22")
        buf.write("\u0c21\3\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c24\3\2\2\2")
        buf.write("\u0c24\u0c26\7x\2\2\u0c25\u0c27\5\u01ae\u00d8\2\u0c26")
        buf.write("\u0c25\3\2\2\2\u0c26\u0c27\3\2\2\2\u0c27\u0c28\3\2\2\2")
        buf.write("\u0c28\u0c2a\7y\2\2\u0c29\u0c2b\5\u017c\u00bf\2\u0c2a")
        buf.write("\u0c29\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2c\3\2\2\2")
        buf.write("\u0c2c\u0c2d\7}\2\2\u0c2d\u023d\3\2\2\2\u0c2e\u0c30\5")
        buf.write("\u0264\u0133\2\u0c2f\u0c2e\3\2\2\2\u0c2f\u0c30\3\2\2\2")
        buf.write("\u0c30\u0c32\3\2\2\2\u0c31\u0c33\7A\2\2\u0c32\u0c31\3")
        buf.write("\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34\u0c35")
        buf.write("\5\f\7\2\u0c35\u0c36\5\6\4\2\u0c36\u0c37\7t\2\2\u0c37")
        buf.write("\u0c38\5\u0240\u0121\2\u0c38\u0c39\7u\2\2\u0c39\u023f")
        buf.write("\3\2\2\2\u0c3a\u0c3c\5\u0264\u0133\2\u0c3b\u0c3a\3\2\2")
        buf.write("\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c51\3\2\2\2\u0c3d\u0c3e")
        buf.write("\5\u02e8\u0175\2\u0c3e\u0c45\7}\2\2\u0c3f\u0c41\5\u0264")
        buf.write("\u0133\2\u0c40\u0c3f\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41")
        buf.write("\u0c42\3\2\2\2\u0c42\u0c43\5\u02ea\u0176\2\u0c43\u0c44")
        buf.write("\7}\2\2\u0c44\u0c46\3\2\2\2\u0c45\u0c40\3\2\2\2\u0c45")
        buf.write("\u0c46\3\2\2\2\u0c46\u0c52\3\2\2\2\u0c47\u0c48\5\u02ea")
        buf.write("\u0176\2\u0c48\u0c4f\7}\2\2\u0c49\u0c4b\5\u0264\u0133")
        buf.write("\2\u0c4a\u0c49\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c")
        buf.write("\3\2\2\2\u0c4c\u0c4d\5\u02e8\u0175\2\u0c4d\u0c4e\7}\2")
        buf.write("\2\u0c4e\u0c50\3\2\2\2\u0c4f\u0c4a\3\2\2\2\u0c4f\u0c50")
        buf.write("\3\2\2\2\u0c50\u0c52\3\2\2\2\u0c51\u0c3d\3\2\2\2\u0c51")
        buf.write("\u0c47\3\2\2\2\u0c52\u0241\3\2\2\2\u0c53\u0c55\5\u0264")
        buf.write("\u0133\2\u0c54\u0c53\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55")
        buf.write("\u0c57\3\2\2\2\u0c56\u0c58\7A\2\2\u0c57\u0c56\3\2\2\2")
        buf.write("\u0c57\u0c58\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5a\7")
        buf.write("\'\2\2\u0c5a\u0c5b\5\f\7\2\u0c5b\u0c5c\5\6\4\2\u0c5c\u0c5d")
        buf.write("\7}\2\2\u0c5d\u0243\3\2\2\2\u0c5e\u0c60\5\u0264\u0133")
        buf.write("\2\u0c5f\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c62")
        buf.write("\3\2\2\2\u0c61\u0c63\7A\2\2\u0c62\u0c61\3\2\2\2\u0c62")
        buf.write("\u0c63\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c65\5\f\7\2")
        buf.write("\u0c65\u0c66\7]\2\2\u0c66\u0c67\7v\2\2\u0c67\u0c68\5\u01ae")
        buf.write("\u00d8\2\u0c68\u0c69\7w\2\2\u0c69\u0c6a\7t\2\2\u0c6a\u0c6b")
        buf.write("\5\u0240\u0121\2\u0c6b\u0c6c\7u\2\2\u0c6c\u0245\3\2\2")
        buf.write("\2\u0c6d\u0c6f\5\u0264\u0133\2\u0c6e\u0c6d\3\2\2\2\u0c6e")
        buf.write("\u0c6f\3\2\2\2\u0c6f\u0c71\3\2\2\2\u0c70\u0c72\5\u024c")
        buf.write("\u0127\2\u0c71\u0c70\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72")
        buf.write("\u0c73\3\2\2\2\u0c73\u0c74\7%\2\2\u0c74\u0c76\5\6\4\2")
        buf.write("\u0c75\u0c77\5\u0248\u0125\2\u0c76\u0c75\3\2\2\2\u0c76")
        buf.write("\u0c77\3\2\2\2\u0c77\u0c78\3\2\2\2\u0c78\u0c7a\5\u024a")
        buf.write("\u0126\2\u0c79\u0c7b\7}\2\2\u0c7a\u0c79\3\2\2\2\u0c7a")
        buf.write("\u0c7b\3\2\2\2\u0c7b\u0247\3\2\2\2\u0c7c\u0c7d\7|\2\2")
        buf.write("\u0c7d\u0c7e\5\24\13\2\u0c7e\u0249\3\2\2\2\u0c7f\u0c80")
        buf.write("\7t\2\2\u0c80\u0c89\7u\2\2\u0c81\u0c82\7t\2\2\u0c82\u0c84")
        buf.write("\5\u0250\u0129\2\u0c83\u0c85\7{\2\2\u0c84\u0c83\3\2\2")
        buf.write("\2\u0c84\u0c85\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c87")
        buf.write("\7u\2\2\u0c87\u0c89\3\2\2\2\u0c88\u0c7f\3\2\2\2\u0c88")
        buf.write("\u0c81\3\2\2\2\u0c89\u024b\3\2\2\2\u0c8a\u0c8c\5\u024e")
        buf.write("\u0128\2\u0c8b\u0c8a\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d")
        buf.write("\u0c8b\3\2\2\2\u0c8d\u0c8e\3\2\2\2\u0c8e\u024d\3\2\2\2")
        buf.write("\u0c8f\u0c90\t\r\2\2\u0c90\u024f\3\2\2\2\u0c91\u0c96\5")
        buf.write("\u0252\u012a\2\u0c92\u0c93\7{\2\2\u0c93\u0c95\5\u0252")
        buf.write("\u012a\2\u0c94\u0c92\3\2\2\2\u0c95\u0c98\3\2\2\2\u0c96")
        buf.write("\u0c94\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u0251\3\2\2\2")
        buf.write("\u0c98\u0c96\3\2\2\2\u0c99\u0c9b\5\u0264\u0133\2\u0c9a")
        buf.write("\u0c99\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9c\3\2\2\2")
        buf.write("\u0c9c\u0c9f\5\6\4\2\u0c9d\u0c9e\7\u0088\2\2\u0c9e\u0ca0")
        buf.write("\5\u00e4s\2\u0c9f\u0c9d\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0")
        buf.write("\u0253\3\2\2\2\u0ca1\u0ca3\5\u0264\u0133\2\u0ca2\u0ca1")
        buf.write("\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5\3\2\2\2\u0ca4")
        buf.write("\u0ca6\5\u0256\u012c\2\u0ca5\u0ca4\3\2\2\2\u0ca5\u0ca6")
        buf.write("\3\2\2\2\u0ca6\u0ca7\3\2\2\2\u0ca7\u0ca8\7\37\2\2\u0ca8")
        buf.write("\u0ca9\5\u01a8\u00d5\2\u0ca9\u0cab\5\6\4\2\u0caa\u0cac")
        buf.write("\5\u022e\u0118\2\u0cab\u0caa\3\2\2\2\u0cab\u0cac\3\2\2")
        buf.write("\2\u0cac\u0cad\3\2\2\2\u0cad\u0caf\7x\2\2\u0cae\u0cb0")
        buf.write("\5\u01ae\u00d8\2\u0caf\u0cae\3\2\2\2\u0caf\u0cb0\3\2\2")
        buf.write("\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb3\7y\2\2\u0cb2\u0cb4")
        buf.write("\5\u017c\u00bf\2\u0cb3\u0cb2\3\2\2\2\u0cb3\u0cb4\3\2\2")
        buf.write("\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb6\7}\2\2\u0cb6\u0255")
        buf.write("\3\2\2\2\u0cb7\u0cbb\5\u0258\u012d\2\u0cb8\u0cba\5\u0258")
        buf.write("\u012d\2\u0cb9\u0cb8\3\2\2\2\u0cba\u0cbd\3\2\2\2\u0cbb")
        buf.write("\u0cb9\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0257\3\2\2\2")
        buf.write("\u0cbd\u0cbb\3\2\2\2\u0cbe\u0cc5\7A\2\2\u0cbf\u0cc5\7")
        buf.write("M\2\2\u0cc0\u0cc5\7L\2\2\u0cc1\u0cc5\79\2\2\u0cc2\u0cc5")
        buf.write("\7K\2\2\u0cc3\u0cc5\5\u0286\u0144\2\u0cc4\u0cbe\3\2\2")
        buf.write("\2\u0cc4\u0cbf\3\2\2\2\u0cc4\u0cc0\3\2\2\2\u0cc4\u0cc1")
        buf.write("\3\2\2\2\u0cc4\u0cc2\3\2\2\2\u0cc4\u0cc3\3\2\2\2\u0cc5")
        buf.write("\u0259\3\2\2\2\u0cc6\u0cc7\5\u025c\u012f\2\u0cc7\u025b")
        buf.write("\3\2\2\2\u0cc8\u0cca\5\u025e\u0130\2\u0cc9\u0cc8\3\2\2")
        buf.write("\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0cc9\3\2\2\2\u0ccb\u0ccc")
        buf.write("\3\2\2\2\u0ccc\u025d\3\2\2\2\u0ccd\u0cce\7v\2\2\u0cce")
        buf.write("\u0ccf\5\u0260\u0131\2\u0ccf\u0cd1\5\u026e\u0138\2\u0cd0")
        buf.write("\u0cd2\7{\2\2\u0cd1\u0cd0\3\2\2\2\u0cd1\u0cd2\3\2\2\2")
        buf.write("\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd4\7w\2\2\u0cd4\u025f\3")
        buf.write("\2\2\2\u0cd5\u0cd6\5\u0262\u0132\2\u0cd6\u0cd7\7|\2\2")
        buf.write("\u0cd7\u0261\3\2\2\2\u0cd8\u0cdb\5\u02fe\u0180\2\u0cd9")
        buf.write("\u0cdb\5\6\4\2\u0cda\u0cd8\3\2\2\2\u0cda\u0cd9\3\2\2\2")
        buf.write("\u0cdb\u0263\3\2\2\2\u0cdc\u0cdd\5\u0266\u0134\2\u0cdd")
        buf.write("\u0265\3\2\2\2\u0cde\u0ce0\5\u0268\u0135\2\u0cdf\u0cde")
        buf.write("\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce1")
        buf.write("\u0ce2\3\2\2\2\u0ce2\u0267\3\2\2\2\u0ce3\u0ce5\7v\2\2")
        buf.write("\u0ce4\u0ce6\5\u026a\u0136\2\u0ce5\u0ce4\3\2\2\2\u0ce5")
        buf.write("\u0ce6\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce9\5\u026e")
        buf.write("\u0138\2\u0ce8\u0cea\7{\2\2\u0ce9\u0ce8\3\2\2\2\u0ce9")
        buf.write("\u0cea\3\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb\u0cec\7w\2\2")
        buf.write("\u0cec\u0269\3\2\2\2\u0ced\u0cee\5\u026c\u0137\2\u0cee")
        buf.write("\u0cef\7|\2\2\u0cef\u026b\3\2\2\2\u0cf0\u0cf3\5\u02fe")
        buf.write("\u0180\2\u0cf1\u0cf3\5\6\4\2\u0cf2\u0cf0\3\2\2\2\u0cf2")
        buf.write("\u0cf1\3\2\2\2\u0cf3\u026d\3\2\2\2\u0cf4\u0cf9\5\u0270")
        buf.write("\u0139\2\u0cf5\u0cf6\7{\2\2\u0cf6\u0cf8\5\u0270\u0139")
        buf.write("\2\u0cf7\u0cf5\3\2\2\2\u0cf8\u0cfb\3\2\2\2\u0cf9\u0cf7")
        buf.write("\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u026f\3\2\2\2\u0cfb")
        buf.write("\u0cf9\3\2\2\2\u0cfc\u0cfe\5\u0272\u013a\2\u0cfd\u0cff")
        buf.write("\5\u0274\u013b\2\u0cfe\u0cfd\3\2\2\2\u0cfe\u0cff\3\2\2")
        buf.write("\2\u0cff\u0271\3\2\2\2\u0d00\u0d01\5\4\3\2\u0d01\u0273")
        buf.write("\3\2\2\2\u0d02\u0d04\7x\2\2\u0d03\u0d05\5\u0276\u013c")
        buf.write("\2\u0d04\u0d03\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06")
        buf.write("\3\2\2\2\u0d06\u0d07\7y\2\2\u0d07\u0275\3\2\2\2\u0d08")
        buf.write("\u0d0d\5\u0278\u013d\2\u0d09\u0d0a\7{\2\2\u0d0a\u0d0c")
        buf.write("\5\u0278\u013d\2\u0d0b\u0d09\3\2\2\2\u0d0c\u0d0f\3\2\2")
        buf.write("\2\u0d0d\u0d0b\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0277")
        buf.write("\3\2\2\2\u0d0f\u0d0d\3\2\2\2\u0d10\u0d11\5\u027e\u0140")
        buf.write("\2\u0d11\u0279\3\2\2\2\u0d12\u0d17\5\u027c\u013f\2\u0d13")
        buf.write("\u0d14\7{\2\2\u0d14\u0d16\5\u027c\u013f\2\u0d15\u0d13")
        buf.write("\3\2\2\2\u0d16\u0d19\3\2\2\2\u0d17\u0d15\3\2\2\2\u0d17")
        buf.write("\u0d18\3\2\2\2\u0d18\u027b\3\2\2\2\u0d19\u0d17\3\2\2\2")
        buf.write("\u0d1a\u0d1b\5\6\4\2\u0d1b\u0d1c\7\u0088\2\2\u0d1c\u0d1d")
        buf.write("\5\u027e\u0140\2\u0d1d\u027d\3\2\2\2\u0d1e\u0d1f\5\u00e0")
        buf.write("q\2\u0d1f\u027f\3\2\2\2\u0d20\u0d21\7e\2\2\u0d21\u0281")
        buf.write("\3\2\2\2\u0d22\u0d23\7e\2\2\u0d23\u0283\3\2\2\2\u0d24")
        buf.write("\u0d25\7e\2\2\u0d25\u0285\3\2\2\2\u0d26\u0d27\7e\2\2\u0d27")
        buf.write("\u0287\3\2\2\2\u0d28\u0d29\7e\2\2\u0d29\u0289\3\2\2\2")
        buf.write("\u0d2a\u0d2b\7e\2\2\u0d2b\u028b\3\2\2\2\u0d2c\u0d2d\7")
        buf.write("e\2\2\u0d2d\u028d\3\2\2\2\u0d2e\u0d2f\7e\2\2\u0d2f\u028f")
        buf.write("\3\2\2\2\u0d30\u0d31\7e\2\2\u0d31\u0291\3\2\2\2\u0d32")
        buf.write("\u0d33\7e\2\2\u0d33\u0293\3\2\2\2\u0d34\u0d35\7e\2\2\u0d35")
        buf.write("\u0295\3\2\2\2\u0d36\u0d38\5\u0264\u0133\2\u0d37\u0d36")
        buf.write("\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d41\3\2\2\2\u0d39")
        buf.write("\u0d3b\7)\2\2\u0d3a\u0d39\3\2\2\2\u0d3a\u0d3b\3\2\2\2")
        buf.write("\u0d3b\u0d3d\3\2\2\2\u0d3c\u0d3e\7e\2\2\u0d3d\u0d3c\3")
        buf.write("\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e\u0d42\3\2\2\2\u0d3f\u0d40")
        buf.write("\7e\2\2\u0d40\u0d42\7)\2\2\u0d41\u0d3a\3\2\2\2\u0d41\u0d3f")
        buf.write("\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d44\7\u0087\2\2\u0d44")
        buf.write("\u0d45\5\6\4\2\u0d45\u0d46\7x\2\2\u0d46\u0d47\7y\2\2\u0d47")
        buf.write("\u0d48\5\u0208\u0105\2\u0d48\u0297\3\2\2\2\u0d49\u0d4b")
        buf.write("\t\16\2\2\u0d4a\u0d49\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b")
        buf.write("\u0d4c\3\2\2\2\u0d4c\u0d62\7Y\2\2\u0d4d\u0d4e\7)\2\2\u0d4e")
        buf.write("\u0d4f\7e\2\2\u0d4f\u0d62\7Y\2\2\u0d50\u0d51\7e\2\2\u0d51")
        buf.write("\u0d52\7)\2\2\u0d52\u0d62\7Y\2\2\u0d53\u0d54\7)\2\2\u0d54")
        buf.write("\u0d55\7Y\2\2\u0d55\u0d62\7e\2\2\u0d56\u0d57\7e\2\2\u0d57")
        buf.write("\u0d58\7Y\2\2\u0d58\u0d62\7)\2\2\u0d59\u0d5a\7Y\2\2\u0d5a")
        buf.write("\u0d62\t\16\2\2\u0d5b\u0d5c\7Y\2\2\u0d5c\u0d5d\7)\2\2")
        buf.write("\u0d5d\u0d62\7e\2\2\u0d5e\u0d5f\7Y\2\2\u0d5f\u0d60\7e")
        buf.write("\2\2\u0d60\u0d62\7)\2\2\u0d61\u0d4a\3\2\2\2\u0d61\u0d4d")
        buf.write("\3\2\2\2\u0d61\u0d50\3\2\2\2\u0d61\u0d53\3\2\2\2\u0d61")
        buf.write("\u0d56\3\2\2\2\u0d61\u0d59\3\2\2\2\u0d61\u0d5b\3\2\2\2")
        buf.write("\u0d61\u0d5e\3\2\2\2\u0d62\u0299\3\2\2\2\u0d63\u0d66\5")
        buf.write("\u029c\u014f\2\u0d64\u0d66\5\u02ae\u0158\2\u0d65\u0d63")
        buf.write("\3\2\2\2\u0d65\u0d64\3\2\2\2\u0d66\u029b\3\2\2\2\u0d67")
        buf.write("\u0d68\7e\2\2\u0d68\u0d69\5\u00eex\2\u0d69\u029d\3\2\2")
        buf.write("\2\u0d6a\u0d6b\5\u02a0\u0151\2\u0d6b\u029f\3\2\2\2\u0d6c")
        buf.write("\u0d71\5\20\t\2\u0d6d\u0d70\5\u0220\u0111\2\u0d6e\u0d70")
        buf.write("\7\u008b\2\2\u0d6f\u0d6d\3\2\2\2\u0d6f\u0d6e\3\2\2\2\u0d70")
        buf.write("\u0d73\3\2\2\2\u0d71\u0d6f\3\2\2\2\u0d71\u0d72\3\2\2\2")
        buf.write("\u0d72\u0d74\3\2\2\2\u0d73\u0d71\3\2\2\2\u0d74\u0d75\7")
        buf.write("\u0080\2\2\u0d75\u0d83\3\2\2\2\u0d76\u0d7b\5\36\20\2\u0d77")
        buf.write("\u0d7a\5\u0220\u0111\2\u0d78\u0d7a\7\u008b\2\2\u0d79\u0d77")
        buf.write("\3\2\2\2\u0d79\u0d78\3\2\2\2\u0d7a\u0d7d\3\2\2\2\u0d7b")
        buf.write("\u0d79\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7e\3\2\2\2")
        buf.write("\u0d7d\u0d7b\3\2\2\2\u0d7e\u0d7f\7\u0080\2\2\u0d7f\u0d83")
        buf.write("\3\2\2\2\u0d80\u0d81\7i\2\2\u0d81\u0d83\7\u0080\2\2\u0d82")
        buf.write("\u0d6c\3\2\2\2\u0d82\u0d76\3\2\2\2\u0d82\u0d80\3\2\2\2")
        buf.write("\u0d83\u02a1\3\2\2\2\u0d84\u0d85\5\f\7\2\u0d85\u02a3\3")
        buf.write("\2\2\2\u0d86\u0d87\5\66\34\2\u0d87\u02a5\3\2\2\2\u0d88")
        buf.write("\u0d8b\5\u02a8\u0155\2\u0d89\u0d8b\5\u02aa\u0156\2\u0d8a")
        buf.write("\u0d88\3\2\2\2\u0d8a\u0d89\3\2\2\2\u0d8b\u02a7\3\2\2\2")
        buf.write("\u0d8c\u0d8d\7\u0080\2\2\u0d8d\u0d8e\5v<\2\u0d8e\u02a9")
        buf.write("\3\2\2\2\u0d8f\u0d90\7\u0083\2\2\u0d90\u0d91\5v<\2\u0d91")
        buf.write("\u02ab\3\2\2\2\u0d92\u0d93\7W\2\2\u0d93\u0d94\7x\2\2\u0d94")
        buf.write("\u0d95\5\u02a2\u0152\2\u0d95\u0d96\7y\2\2\u0d96\u02ad")
        buf.write("\3\2\2\2\u0d97\u0d98\7,\2\2\u0d98\u0d99\7x\2\2\u0d99\u0d9a")
        buf.write("\5\u02a0\u0151\2\u0d9a\u0d9b\5\u02b0\u0159\2\u0d9b\u0d9c")
        buf.write("\7y\2\2\u0d9c\u0d9d\5\u00eav\2\u0d9d\u02af\3\2\2\2\u0d9e")
        buf.write("\u0da3\5\u02b2\u015a\2\u0d9f\u0da0\7{\2\2\u0da0\u0da2")
        buf.write("\5\u02b2\u015a\2\u0da1\u0d9f\3\2\2\2\u0da2\u0da5\3\2\2")
        buf.write("\2\u0da3\u0da1\3\2\2\2\u0da3\u0da4\3\2\2\2\u0da4\u02b1")
        buf.write("\3\2\2\2\u0da5\u0da3\3\2\2\2\u0da6\u0da7\5\6\4\2\u0da7")
        buf.write("\u0da8\7\u0088\2\2\u0da8\u0da9\5\u02b4\u015b\2\u0da9\u02b3")
        buf.write("\3\2\2\2\u0daa\u0dab\7\u0083\2\2\u0dab\u0dae\5,\27\2\u0dac")
        buf.write("\u0dae\5\u00e0q\2\u0dad\u0daa\3\2\2\2\u0dad\u0dac\3\2")
        buf.write("\2\2\u0dae\u02b5\3\2\2\2\u0daf\u0db0\5\u02b8\u015d\2\u0db0")
        buf.write("\u02b7\3\2\2\2\u0db1\u0db3\5\u0264\u0133\2\u0db2\u0db1")
        buf.write("\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db5\3\2\2\2\u0db4")
        buf.write("\u0db6\5\u02ba\u015e\2\u0db5\u0db4\3\2\2\2\u0db5\u0db6")
        buf.write("\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8\7,\2\2\u0db8")
        buf.write("\u0db9\5\u02be\u0160\2\u0db9\u0dba\5\u02c0\u0161\2\u0dba")
        buf.write("\u0dbb\7}\2\2\u0dbb\u02b9\3\2\2\2\u0dbc\u0dbe\5\u02bc")
        buf.write("\u015f\2\u0dbd\u0dbc\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf")
        buf.write("\u0dbd\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u02bb\3\2\2\2")
        buf.write("\u0dc1\u0dc2\t\17\2\2\u0dc2\u02bd\3\2\2\2\u0dc3\u0dc4")
        buf.write("\5\f\7\2\u0dc4\u02bf\3\2\2\2\u0dc5\u0dc7\5\u02c2\u0162")
        buf.write("\2\u0dc6\u0dc5\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dc6")
        buf.write("\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u02c1\3\2\2\2\u0dca")
        buf.write("\u0dcb\5\6\4\2\u0dcb\u0dcc\7v\2\2\u0dcc\u0dcd\5\u00e4")
        buf.write("s\2\u0dcd\u0dce\7w\2\2\u0dce\u02c3\3\2\2\2\u0dcf\u0dd0")
        buf.write("\5\u02c6\u0164\2\u0dd0\u02c5\3\2\2\2\u0dd1\u0dd2\7X\2")
        buf.write("\2\u0dd2\u0dd3\5\u02a2\u0152\2\u0dd3\u0dd4\7v\2\2\u0dd4")
        buf.write("\u0dd5\5\u00e0q\2\u0dd5\u0dd6\7w\2\2\u0dd6\u02c7\3\2\2")
        buf.write("\2\u0dd7\u0dd8\7\60\2\2\u0dd8\u02c9\3\2\2\2\u0dd9\u0dda")
        buf.write("\7=\2\2\u0dda\u02cb\3\2\2\2\u0ddb\u0ddc\7k\2\2\u0ddc\u02cd")
        buf.write("\3\2\2\2\u0ddd\u0dde\7<\2\2\u0dde\u02cf\3\2\2\2\u0ddf")
        buf.write("\u0de0\7D\2\2\u0de0\u02d1\3\2\2\2\u0de1\u0de2\7&\2\2\u0de2")
        buf.write("\u02d3\3\2\2\2\u0de3\u0de4\7:\2\2\u0de4\u02d5\3\2\2\2")
        buf.write("\u0de5\u0de6\7F\2\2\u0de6\u02d7\3\2\2\2\u0de7\u0de8\7")
        buf.write("\20\2\2\u0de8\u02d9\3\2\2\2\u0de9\u0dea\7 \2\2\u0dea\u02db")
        buf.write("\3\2\2\2\u0deb\u0dec\7T\2\2\u0dec\u02dd\3\2\2\2\u0ded")
        buf.write("\u0dee\7\63\2\2\u0dee\u02df\3\2\2\2\u0def\u0df0\7\24\2")
        buf.write("\2\u0df0\u02e1\3\2\2\2\u0df1\u0df2\7J\2\2\u0df2\u02e3")
        buf.write("\3\2\2\2\u0df3\u0df4\7\r\2\2\u0df4\u02e5\3\2\2\2\u0df5")
        buf.write("\u0df6\7m\2\2\u0df6\u02e7\3\2\2\2\u0df7\u0df8\7\61\2\2")
        buf.write("\u0df8\u02e9\3\2\2\2\u0df9\u0dfa\7U\2\2\u0dfa\u02eb\3")
        buf.write("\2\2\2\u0dfb\u0dfc\7\f\2\2\u0dfc\u02ed\3\2\2\2\u0dfd\u0dfe")
        buf.write("\7P\2\2\u0dfe\u02ef\3\2\2\2\u0dff\u0e00\7#\2\2\u0e00\u02f1")
        buf.write("\3\2\2\2\u0e01\u0e02\7\16\2\2\u0e02\u02f3\3\2\2\2\u0e03")
        buf.write("\u0e04\7\u0088\2\2\u0e04\u0e05\7\u008a\2\2\u0e05\u0e06")
        buf.write("\6\u017b\2\3\u0e06\u02f5\3\2\2\2\u0e07\u0e08\7\u008a\2")
        buf.write("\2\u0e08\u0e09\7\u008a\2\2\u0e09\u0e0a\6\u017c\3\3\u0e0a")
        buf.write("\u02f7\3\2\2\2\u0e0b\u0e0c\7\u008a\2\2\u0e0c\u0e0d\7\u0096")
        buf.write("\2\2\u0e0d\u0e0e\6\u017d\4\3\u0e0e\u02f9\3\2\2\2\u0e0f")
        buf.write("\u0e16\5\u02fc\u017f\2\u0e10\u0e16\7o\2\2\u0e11\u0e16")
        buf.write("\7q\2\2\u0e12\u0e16\7r\2\2\u0e13\u0e16\7s\2\2\u0e14\u0e16")
        buf.write("\7B\2\2\u0e15\u0e0f\3\2\2\2\u0e15\u0e10\3\2\2\2\u0e15")
        buf.write("\u0e11\3\2\2\2\u0e15\u0e12\3\2\2\2\u0e15\u0e13\3\2\2\2")
        buf.write("\u0e15\u0e14\3\2\2\2\u0e16\u02fb\3\2\2\2\u0e17\u0e18\t")
        buf.write("\20\2\2\u0e18\u02fd\3\2\2\2\u0e19\u0e1a\t\21\2\2\u0e1a")
        buf.write("\u02ff\3\2\2\2\u0e1b\u0e1c\7\32\2\2\u0e1c\u0e1e\5\6\4")
        buf.write("\2\u0e1d\u0e1f\5\u0172\u00ba\2\u0e1e\u0e1d\3\2\2\2\u0e1e")
        buf.write("\u0e1f\3\2\2\2\u0e1f\u0e21\3\2\2\2\u0e20\u0e22\5\u0178")
        buf.write("\u00bd\2\u0e21\u0e20\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22")
        buf.write("\u0e24\3\2\2\2\u0e23\u0e25\5\u017c\u00bf\2\u0e24\u0e23")
        buf.write("\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26")
        buf.write("\u0e28\5\u0188\u00c5\2\u0e27\u0e29\7}\2\2\u0e28\u0e27")
        buf.write("\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29\u0301\3\2\2\2\u0e2a")
        buf.write("\u0e2b\7[\2\2\u0e2b\u0e2d\5\6\4\2\u0e2c\u0e2e\5\u0172")
        buf.write("\u00ba\2\u0e2d\u0e2c\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e")
        buf.write("\u0e30\3\2\2\2\u0e2f\u0e31\5\u0212\u010a\2\u0e30\u0e2f")
        buf.write("\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e33\3\2\2\2\u0e32")
        buf.write("\u0e34\5\u017c\u00bf\2\u0e33\u0e32\3\2\2\2\u0e33\u0e34")
        buf.write("\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e37\5\u0214\u010b")
        buf.write("\2\u0e36\u0e38\7}\2\2\u0e37\u0e36\3\2\2\2\u0e37\u0e38")
        buf.write("\3\2\2\2\u0e38\u0303\3\2\2\2\u0e39\u0e3a\78\2\2\u0e3a")
        buf.write("\u0e3c\5\6\4\2\u0e3b\u0e3d\5\u022e\u0118\2\u0e3c\u0e3b")
        buf.write("\3\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e3f\3\2\2\2\u0e3e")
        buf.write("\u0e40\5\u0234\u011b\2\u0e3f\u0e3e\3\2\2\2\u0e3f\u0e40")
        buf.write("\3\2\2\2\u0e40\u0e42\3\2\2\2\u0e41\u0e43\5\u017c\u00bf")
        buf.write("\2\u0e42\u0e41\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e44")
        buf.write("\3\2\2\2\u0e44\u0e46\5\u0236\u011c\2\u0e45\u0e47\7}\2")
        buf.write("\2\u0e46\u0e45\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0305")
        buf.write("\3\2\2\2\u0e48\u0e49\7%\2\2\u0e49\u0e4b\5\6\4\2\u0e4a")
        buf.write("\u0e4c\5\u0248\u0125\2\u0e4b\u0e4a\3\2\2\2\u0e4b\u0e4c")
        buf.write("\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d\u0e4f\5\u024a\u0126")
        buf.write("\2\u0e4e\u0e50\7}\2\2\u0e4f\u0e4e\3\2\2\2\u0e4f\u0e50")
        buf.write("\3\2\2\2\u0e50\u0307\3\2\2\2\u0e51\u0e52\7\37\2\2\u0e52")
        buf.write("\u0e53\5\u01a8\u00d5\2\u0e53\u0e55\5\6\4\2\u0e54\u0e56")
        buf.write("\5\u022e\u0118\2\u0e55\u0e54\3\2\2\2\u0e55\u0e56\3\2\2")
        buf.write("\2\u0e56\u0e57\3\2\2\2\u0e57\u0e59\7x\2\2\u0e58\u0e5a")
        buf.write("\5\u01ae\u00d8\2\u0e59\u0e58\3\2\2\2\u0e59\u0e5a\3\2\2")
        buf.write("\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5d\7y\2\2\u0e5c\u0e5e")
        buf.write("\5\u017c\u00bf\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2")
        buf.write("\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e60\7}\2\2\u0e60\u0309")
        buf.write("\3\2\2\2\u0e61\u0e62\7\'\2\2\u0e62\u0e6b\5\f\7\2\u0e63")
        buf.write("\u0e64\5\u019a\u00ce\2\u0e64\u0e65\7}\2\2\u0e65\u0e6c")
        buf.write("\3\2\2\2\u0e66\u0e67\5\u01aa\u00d6\2\u0e67\u0e68\7t\2")
        buf.write("\2\u0e68\u0e69\5\u01d0\u00e9\2\u0e69\u0e6a\7u\2\2\u0e6a")
        buf.write("\u0e6c\3\2\2\2\u0e6b\u0e63\3\2\2\2\u0e6b\u0e66\3\2\2\2")
        buf.write("\u0e6c\u030b\3\2\2\2\u0e6d\u0e6e\5\u019a\u00ce\2\u0e6e")
        buf.write("\u0e6f\7}\2\2\u0e6f\u030d\3\2\2\2\u0e70\u0e71\5\u01aa")
        buf.write("\u00d6\2\u0e71\u0e72\7t\2\2\u0e72\u0e73\5\u01c0\u00e1")
        buf.write("\2\u0e73\u0e74\7u\2\2\u0e74\u030f\3\2\2\2\u0e75\u0e76")
        buf.write("\7\33\2\2\u0e76\u0e77\5\f\7\2\u0e77\u0e78\5\u0196\u00cc")
        buf.write("\2\u0e78\u0e79\7}\2\2\u0e79\u0311\3\2\2\2\u0e7a\u0e7b")
        buf.write("\7]\2\2\u0e7b\u0e7c\7v\2\2\u0e7c\u0e7d\5\u01ae\u00d8\2")
        buf.write("\u0e7d\u0e7e\7w\2\2\u0e7e\u0e7f\7t\2\2\u0e7f\u0e80\5\u01c0")
        buf.write("\u00e1\2\u0e80\u0e81\7u\2\2\u0e81\u0313\3\2\2\2\u0e82")
        buf.write("\u0e83\7\u0087\2\2\u0e83\u0e84\5\6\4\2\u0e84\u0e85\7x")
        buf.write("\2\2\u0e85\u0e86\7y\2\2\u0e86\u0e87\5\u0208\u0105\2\u0e87")
        buf.write("\u0315\3\2\2\2\u0e88\u0e89\5\6\4\2\u0e89\u0e8b\7x\2\2")
        buf.write("\u0e8a\u0e8c\5\u01ae\u00d8\2\u0e8b\u0e8a\3\2\2\2\u0e8b")
        buf.write("\u0e8c\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e8f\7y\2\2")
        buf.write("\u0e8e\u0e90\5\u01fc\u00ff\2\u0e8f\u0e8e\3\2\2\2\u0e8f")
        buf.write("\u0e90\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e92\5\u020a")
        buf.write("\u0106\2\u0e92\u0317\3\2\2\2\u0e93\u0e95\5\u031a\u018e")
        buf.write("\2\u0e94\u0e96\5\u0172\u00ba\2\u0e95\u0e94\3\2\2\2\u0e95")
        buf.write("\u0e96\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0e99\7x\2\2")
        buf.write("\u0e98\u0e9a\5\u01ae\u00d8\2\u0e99\u0e98\3\2\2\2\u0e99")
        buf.write("\u0e9a\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9d\7y\2\2")
        buf.write("\u0e9c\u0e9e\5\u017c\u00bf\2\u0e9d\u0e9c\3\2\2\2\u0e9d")
        buf.write("\u0e9e\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0ea0\5\u01ac")
        buf.write("\u00d7\2\u0ea0\u0319\3\2\2\2\u0ea1\u0ea2\5\u031c\u018f")
        buf.write("\2\u0ea2\u031b\3\2\2\2\u0ea3\u0ea9\5\6\4\2\u0ea4\u0ea5")
        buf.write("\5\6\4\2\u0ea5\u0ea6\7\u008c\2\2\u0ea6\u0ea7\5\6\4\2\u0ea7")
        buf.write("\u0ea9\3\2\2\2\u0ea8\u0ea3\3\2\2\2\u0ea8\u0ea4\3\2\2\2")
        buf.write("\u0ea9\u0eb0\3\2\2\2\u0eaa\u0eab\5\n\6\2\u0eab\u0eac\7")
        buf.write("z\2\2\u0eac\u0ead\5\6\4\2\u0ead\u0eaf\3\2\2\2\u0eae\u0eaa")
        buf.write("\3\2\2\2\u0eaf\u0eb2\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb0")
        buf.write("\u0eb1\3\2\2\2\u0eb1\u031d\3\2\2\2\u0eb2\u0eb0\3\2\2\2")
        buf.write("\u0eb3\u0eb4\7E\2\2\u0eb4\u0eb5\5\u01ee\u00f8\2\u0eb5")
        buf.write("\u0eb6\7x\2\2\u0eb6\u0eb7\5\f\7\2\u0eb7\u0ebc\5\6\4\2")
        buf.write("\u0eb8\u0eb9\7{\2\2\u0eb9\u0eba\5\f\7\2\u0eba\u0ebb\5")
        buf.write("\6\4\2\u0ebb\u0ebd\3\2\2\2\u0ebc\u0eb8\3\2\2\2\u0ebc\u0ebd")
        buf.write("\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ebf\7y\2\2\u0ebf")
        buf.write("\u0ec0\5\u01f2\u00fa\2\u0ec0\u031f\3\2\2\2\u0ec1\u0ec3")
        buf.write("\5\6\4\2\u0ec2\u0ec4\5\u0172\u00ba\2\u0ec3\u0ec2\3\2\2")
        buf.write("\2\u0ec3\u0ec4\3\2\2\2\u0ec4\u0ec5\3\2\2\2\u0ec5\u0ec7")
        buf.write("\7x\2\2\u0ec6\u0ec8\5\u01ae\u00d8\2\u0ec7\u0ec6\3\2\2")
        buf.write("\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ec9\3\2\2\2\u0ec9\u0ecb")
        buf.write("\7y\2\2\u0eca\u0ecc\5\u017c\u00bf\2\u0ecb\u0eca\3\2\2")
        buf.write("\2\u0ecb\u0ecc\3\2\2\2\u0ecc\u0ecd\3\2\2\2\u0ecd\u0ece")
        buf.write("\7}\2\2\u0ece\u0321\3\2\2\2\u0ecf\u0ed0\5\6\4\2\u0ed0")
        buf.write("\u0ed1\7t\2\2\u0ed1\u0ed2\5\u0240\u0121\2\u0ed2\u0ed3")
        buf.write("\7u\2\2\u0ed3\u0323\3\2\2\2\u0ed4\u0ed5\7\'\2\2\u0ed5")
        buf.write("\u0ed6\5\f\7\2\u0ed6\u0ed7\5\6\4\2\u0ed7\u0ed8\7}\2\2")
        buf.write("\u0ed8\u0325\3\2\2\2\u0ed9\u0eda\7]\2\2\u0eda\u0edb\7")
        buf.write("v\2\2\u0edb\u0edc\5\u01ae\u00d8\2\u0edc\u0edd\7w\2\2\u0edd")
        buf.write("\u0ede\7t\2\2\u0ede\u0edf\5\u0240\u0121\2\u0edf\u0ee0")
        buf.write("\7u\2\2\u0ee0\u0327\3\2\2\2\u0ee1\u0ee2\7z\2\2\u0ee2\u0ee3")
        buf.write("\5\6\4\2\u0ee3\u0ee4\5\n\6\2\u0ee4\u0329\3\2\2\2\u0ee5")
        buf.write("\u0ee7\7x\2\2\u0ee6\u0ee8\5.\30\2\u0ee7\u0ee6\3\2\2\2")
        buf.write("\u0ee7\u0ee8\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\7")
        buf.write("y\2\2\u0eea\u032b\3\2\2\2\u0eeb\u0eed\7x\2\2\u0eec\u0eee")
        buf.write("\5.\30\2\u0eed\u0eec\3\2\2\2\u0eed\u0eee\3\2\2\2\u0eee")
        buf.write("\u0eef\3\2\2\2\u0eef\u0ef1\7y\2\2\u0ef0\u0ef2\5L\'\2\u0ef1")
        buf.write("\u0ef0\3\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u032d\3\2\2\2")
        buf.write("\u019c\u0338\u0340\u0345\u034b\u034d\u0354\u0358\u035d")
        buf.write("\u0369\u036b\u0372\u0378\u037e\u0387\u038d\u0395\u039b")
        buf.write("\u03a1\u03a5\u03ab\u03ba\u03c8\u03cc\u03d8\u03de\u03e7")
        buf.write("\u03ec\u03f1\u0403\u0406\u040b\u0411\u0419\u042f\u043e")
        buf.write("\u0444\u0448\u044b\u044f\u0456\u045a\u0461\u046a\u046f")
        buf.write("\u0478\u0480\u048b\u048e\u0493\u04a3\u04a7\u04ae\u04b6")
        buf.write("\u04c2\u04c6\u04cb\u04cd\u04d2\u04d6\u04db\u04e3\u0502")
        buf.write("\u0556\u056a\u056c\u0574\u0576\u057f\u0581\u0591\u0593")
        buf.write("\u059d\u05a7\u05b0\u05b2\u05ba\u05c2\u05ca\u05d2\u05da")
        buf.write("\u05e0\u05e8\u05f0\u05ff\u0603\u060c\u0610\u0619\u061d")
        buf.write("\u0624\u062b\u0632\u0639\u063d\u0643\u064b\u0657\u0663")
        buf.write("\u0671\u067d\u0687\u068c\u0690\u0694\u06b1\u06b5\u06ba")
        buf.write("\u06c3\u06c7\u06d5\u06d9\u06e0\u06ee\u06fa\u0700\u0705")
        buf.write("\u0712\u0716\u071f\u0729\u0731\u073b\u0744\u074a\u075d")
        buf.write("\u0761\u0765\u076c\u0777\u0788\u079c\u07a0\u07a6\u07ad")
        buf.write("\u07b0\u07b4\u07b7\u07bd\u07c4\u07e3\u07ee\u07f1\u07f4")
        buf.write("\u07f7\u07fc\u0800\u0808\u080f\u0814\u0817\u081a\u0821")
        buf.write("\u082b\u082f\u083e\u0842\u0845\u0848\u084f\u0857\u085a")
        buf.write("\u085d\u0862\u0865\u0868\u086c\u0872\u087e\u0885\u088a")
        buf.write("\u088f\u089a\u08a2\u08a9\u08b5\u08b9\u08bb\u08c0\u08c7")
        buf.write("\u08d0\u08d7\u08da\u08dd\u08e6\u08e9\u08ee\u08ff\u0910")
        buf.write("\u091c\u0923\u092f\u0937\u093b\u0941\u0944\u0947\u094c")
        buf.write("\u0950\u0954\u0959\u0967\u096b\u0971\u0977\u0979\u0980")
        buf.write("\u0984\u0987\u098c\u098f\u0997\u099e\u09a1\u09ac\u09ba")
        buf.write("\u09bd\u09c0\u09c5\u09ca\u09cc\u09cf\u09d2\u09d8\u09db")
        buf.write("\u09e7\u09eb\u09ee\u09f1\u09fd\u0a03\u0a12\u0a15\u0a1f")
        buf.write("\u0a22\u0a28\u0a2e\u0a31\u0a3c\u0a4a\u0a50\u0a58\u0a62")
        buf.write("\u0a69\u0a6e\u0a95\u0aad\u0abf\u0ac3\u0ac6\u0ac9\u0ad1")
        buf.write("\u0ad9\u0ade\u0ae2\u0ae8\u0aef\u0af2\u0af6\u0af9\u0b05")
        buf.write("\u0b0b\u0b0f\u0b12\u0b15\u0b18\u0b1d\u0b20\u0b23\u0b27")
        buf.write("\u0b2d\u0b36\u0b3d\u0b45\u0b49\u0b4c\u0b54\u0b5a\u0b60")
        buf.write("\u0b66\u0b68\u0b6e\u0b72\u0b7a\u0b82\u0b86\u0b8d\u0b91")
        buf.write("\u0b94\u0b97\u0b9c\u0b9f\u0ba2\u0ba6\u0bac\u0bb5\u0bbc")
        buf.write("\u0bbf\u0bc4\u0bc7\u0bcc\u0bd6\u0bdd\u0be0\u0be3\u0be8")
        buf.write("\u0bec\u0bf0\u0c01\u0c06\u0c0a\u0c0e\u0c17\u0c1a\u0c1d")
        buf.write("\u0c22\u0c26\u0c2a\u0c2f\u0c32\u0c3b\u0c40\u0c45\u0c4a")
        buf.write("\u0c4f\u0c51\u0c54\u0c57\u0c5f\u0c62\u0c6e\u0c71\u0c76")
        buf.write("\u0c7a\u0c84\u0c88\u0c8d\u0c96\u0c9a\u0c9f\u0ca2\u0ca5")
        buf.write("\u0cab\u0caf\u0cb3\u0cbb\u0cc4\u0ccb\u0cd1\u0cda\u0ce1")
        buf.write("\u0ce5\u0ce9\u0cf2\u0cf9\u0cfe\u0d04\u0d0d\u0d17\u0d37")
        buf.write("\u0d3a\u0d3d\u0d41\u0d4a\u0d61\u0d65\u0d6f\u0d71\u0d79")
        buf.write("\u0d7b\u0d82\u0d8a\u0da3\u0dad\u0db2\u0db5\u0dbf\u0dc8")
        buf.write("\u0e15\u0e1e\u0e21\u0e24\u0e28\u0e2d\u0e30\u0e33\u0e37")
        buf.write("\u0e3c\u0e3f\u0e42\u0e46\u0e4b\u0e4f\u0e55\u0e59\u0e5d")
        buf.write("\u0e6b\u0e8b\u0e8f\u0e95\u0e99\u0e9d\u0ea8\u0eb0\u0ebc")
        buf.write("\u0ec3\u0ec7\u0ecb\u0ee7\u0eed\u0ef1")
        return buf.getvalue()


class CSharp4Parser ( Parser ):

    grammarFileName = "CSharp4.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'\u00EF\u00BB\u00BF'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'abstract'", "'add'", "'alias'", "'__arglist'", 
                     "'as'", "'ascending'", "'base'", "'bool'", "'break'", 
                     "'by'", "'byte'", "'case'", "'catch'", "'char'", "'checked'", 
                     "'class'", "'const'", "'continue'", "'decimal'", "'default'", 
                     "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
                     "'else'", "'enum'", "'equals'", "'event'", "'explicit'", 
                     "'extern'", "'false'", "'finally'", "'fixed'", "'float'", 
                     "'for'", "'foreach'", "'from'", "'get'", "'goto'", 
                     "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
                     "'internal'", "'into'", "'is'", "'join'", "'let'", 
                     "'lock'", "'long'", "'namespace'", "'new'", "'null'", 
                     "'object'", "'on'", "'operator'", "'orderby'", "'out'", 
                     "'override'", "'params'", "'partial'", "'private'", 
                     "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", 
                     "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", 
                     "'short'", "'sizeof'", "'stackalloc'", "'static'", 
                     "'string'", "'struct'", "'switch'", "'this'", "'throw'", 
                     "'true'", "'try'", "'typeof'", "'uint'", "'ulong'", 
                     "'unchecked'", "'unsafe'", "'ushort'", "'using'", "'virtual'", 
                     "'void'", "'volatile'", "'where'", "'while'", "'yield'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'{'", "'}'", "'['", "']'", 
                     "'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", 
                     "'='", "'<'", "'>'", "'?'", "'::'", "'??'", "'++'", 
                     "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", 
                     "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'<<'", "'<<='", "'''", "'\"'", "'\\'", 
                     "'\\\\'", "'#'" ]

    symbolicNames = [ "<INVALID>", "Pp_directive", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                      "DELIMITED_DOC_COMMENT", "NEW_LINE", "SINGLE_LINE_COMMENT", 
                      "DELIMITED_COMMENT", "WHITESPACE", "ABSTRACT", "ADD", 
                      "ALIAS", "ARGLIST", "AS", "ASCENDING", "BASE", "BOOL", 
                      "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
                      "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                      "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
                      "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
                      "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", 
                      "IN", "INT", "INTERFACE", "INTERNAL", "INTO", "IS", 
                      "JOIN", "LET", "LOCK", "LONG", "NAMESPACE", "NEW", 
                      "NULL", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", 
                      "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", "PROTECTED", 
                      "PUBLIC", "READONLY", "REF", "REMOVE", "RETURN", "SBYTE", 
                      "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", 
                      "STATIC", "STRING", "STRUCT", "SWITCH", "THIS", "THROW", 
                      "TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", 
                      "UNSAFE", "USHORT", "USING", "VIRTUAL", "VOID", "VOLATILE", 
                      "WHERE", "WHILE", "YIELD", "IDENTIFIER", "INTEGER_LITERAL", 
                      "LiteralAccess", "REAL_LITERAL", "CHARACTER_LITERAL", 
                      "STRING_LITERAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
                      "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", 
                      "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", 
                      "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", 
                      "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
                      "OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", 
                      "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
                      "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
                      "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
                      "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", 
                      "QUOTE", "DOUBLE_QUOTE", "BACK_SLASH", "DOUBLE_BACK_SLASH", 
                      "SHARP" ]

    RULE_namespace_name = 0
    RULE_type_name = 1
    RULE_identifier = 2
    RULE_namespace_or_type_name = 3
    RULE_type_argument_list_opt = 4
    RULE_any_type = 5
    RULE_base_type = 6
    RULE_simple_type = 7
    RULE_numeric_type = 8
    RULE_integral_type = 9
    RULE_floating_point_type = 10
    RULE_nullable_type = 11
    RULE_non_nullable_value_type = 12
    RULE_reference_type = 13
    RULE_class_type = 14
    RULE_interface_type = 15
    RULE_delegate_type = 16
    RULE_type_argument_list = 17
    RULE_type_arguments = 18
    RULE_type_argument = 19
    RULE_type_void = 20
    RULE_variable_reference = 21
    RULE_argument_list = 22
    RULE_argument = 23
    RULE_argument_name = 24
    RULE_argument_value = 25
    RULE_primary_expression = 26
    RULE_primary_expression_start = 27
    RULE_bracket_expression = 28
    RULE_simple_name = 29
    RULE_parenthesized_expression = 30
    RULE_member_access = 31
    RULE_predefined_type = 32
    RULE_expression_list = 33
    RULE_this_access = 34
    RULE_base_access = 35
    RULE_object_creation_expression = 36
    RULE_object_or_collection_initializer = 37
    RULE_object_initializer = 38
    RULE_member_initializer_list = 39
    RULE_member_initializer = 40
    RULE_initializer_value = 41
    RULE_collection_initializer = 42
    RULE_element_initializer_list = 43
    RULE_element_initializer = 44
    RULE_array_creation_expression = 45
    RULE_delegate_creation_expression = 46
    RULE_anonymous_object_creation_expression = 47
    RULE_anonymous_object_initializer = 48
    RULE_member_declarator_list = 49
    RULE_member_declarator = 50
    RULE_typeof_expression = 51
    RULE_unbound_type_name = 52
    RULE_generic_dimension_specifier = 53
    RULE_commas = 54
    RULE_checked_expression = 55
    RULE_unchecked_expression = 56
    RULE_default_value_expression = 57
    RULE_unary_expression = 58
    RULE_scan_for_cast_generic_precedence = 59
    RULE_cast_disambiguation_token = 60
    RULE_pre_increment_expression = 61
    RULE_pre_decrement_expression = 62
    RULE_cast_expression = 63
    RULE_multiplicative_expression = 64
    RULE_additive_expression = 65
    RULE_shift_expression = 66
    RULE_relational_expression = 67
    RULE_scan_for_shift_generic_precedence = 68
    RULE_shift_disambiguation_token = 69
    RULE_isType = 70
    RULE_is_disambiguation_token = 71
    RULE_equality_expression = 72
    RULE_and_expression = 73
    RULE_exclusive_or_expression = 74
    RULE_inclusive_or_expression = 75
    RULE_conditional_and_expression = 76
    RULE_conditional_or_expression = 77
    RULE_null_coalescing_expression = 78
    RULE_conditional_expression = 79
    RULE_lambda_expression = 80
    RULE_anonymous_method_expression = 81
    RULE_anonymous_function_signature = 82
    RULE_explicit_anonymous_function_signature = 83
    RULE_explicit_anonymous_function_parameter_list = 84
    RULE_explicit_anonymous_function_parameter = 85
    RULE_anonymous_function_parameter_modifier = 86
    RULE_implicit_anonymous_function_signature = 87
    RULE_implicit_anonymous_function_parameter_list = 88
    RULE_implicit_anonymous_function_parameter = 89
    RULE_anonymous_function_body = 90
    RULE_query_expression = 91
    RULE_from_clause = 92
    RULE_query_body = 93
    RULE_query_body_clauses = 94
    RULE_query_body_clause = 95
    RULE_let_clause = 96
    RULE_where_clause = 97
    RULE_join_clause = 98
    RULE_join_into_clause = 99
    RULE_combined_join_clause = 100
    RULE_orderby_clause = 101
    RULE_orderings = 102
    RULE_ordering = 103
    RULE_ordering_direction = 104
    RULE_select_or_group_clause = 105
    RULE_select_clause = 106
    RULE_group_clause = 107
    RULE_query_continuation = 108
    RULE_assignment = 109
    RULE_assignment_operator = 110
    RULE_expression = 111
    RULE_non_assignment_expression = 112
    RULE_constant_expression = 113
    RULE_boolean_expression = 114
    RULE_statement = 115
    RULE_embedded_statement = 116
    RULE_simple_embedded_statement = 117
    RULE_block = 118
    RULE_statement_list = 119
    RULE_empty_statement = 120
    RULE_labeled_statement = 121
    RULE_declaration_statement = 122
    RULE_local_variable_declaration = 123
    RULE_local_variable_type = 124
    RULE_local_variable_declarators = 125
    RULE_local_variable_declarator = 126
    RULE_local_variable_initializer = 127
    RULE_local_constant_declaration = 128
    RULE_expression_statement = 129
    RULE_statement_expression = 130
    RULE_selection_statement = 131
    RULE_if_body = 132
    RULE_if_statement = 133
    RULE_switch_statement = 134
    RULE_switch_block = 135
    RULE_switch_sections = 136
    RULE_switch_section = 137
    RULE_switch_labels = 138
    RULE_switch_label = 139
    RULE_iteration_statement = 140
    RULE_while_statement = 141
    RULE_do_statement = 142
    RULE_for_statement = 143
    RULE_for_initializer = 144
    RULE_for_condition = 145
    RULE_for_iterator = 146
    RULE_statement_expression_list = 147
    RULE_foreach_statement = 148
    RULE_jump_statement = 149
    RULE_break_statement = 150
    RULE_continue_statement = 151
    RULE_goto_statement = 152
    RULE_return_statement = 153
    RULE_throw_statement = 154
    RULE_try_statement = 155
    RULE_catch_clauses = 156
    RULE_specific_catch_clauses = 157
    RULE_specific_catch_clause = 158
    RULE_general_catch_clause = 159
    RULE_finally_clause = 160
    RULE_checked_statement = 161
    RULE_unchecked_statement = 162
    RULE_lock_statement = 163
    RULE_using_statement = 164
    RULE_resource_acquisition = 165
    RULE_yield_statement = 166
    RULE_parse = 167
    RULE_namespace_declaration = 168
    RULE_qualified_identifier = 169
    RULE_namespace_body = 170
    RULE_extern_alias_directives = 171
    RULE_extern_alias_directive = 172
    RULE_using_directives = 173
    RULE_using_directive = 174
    RULE_using_alias_directive = 175
    RULE_using_namespace_directive = 176
    RULE_namespace_member_declarations = 177
    RULE_namespace_member_declaration = 178
    RULE_type_declaration = 179
    RULE_qualified_alias_member = 180
    RULE_class_declaration = 181
    RULE_class_modifiers = 182
    RULE_class_modifier = 183
    RULE_type_parameter_list = 184
    RULE_type_parameters = 185
    RULE_type_parameter = 186
    RULE_class_base = 187
    RULE_interface_type_list = 188
    RULE_type_parameter_constraints_clauses = 189
    RULE_type_parameter_constraints_clause = 190
    RULE_type_parameter_constraints = 191
    RULE_primary_constraint = 192
    RULE_secondary_constraints = 193
    RULE_constructor_constraint = 194
    RULE_class_body = 195
    RULE_class_member_declarations = 196
    RULE_class_member_declaration = 197
    RULE_all_member_modifiers = 198
    RULE_all_member_modifier = 199
    RULE_common_member_declaration = 200
    RULE_typed_member_declaration = 201
    RULE_constant_declarators = 202
    RULE_constant_declarator = 203
    RULE_variable_declarators = 204
    RULE_variable_declarator = 205
    RULE_variable_initializer = 206
    RULE_method_declaration = 207
    RULE_method_header = 208
    RULE_method_modifiers = 209
    RULE_method_modifier = 210
    RULE_return_type = 211
    RULE_member_name = 212
    RULE_method_body = 213
    RULE_formal_parameter_list = 214
    RULE_fixed_parameters = 215
    RULE_fixed_parameter = 216
    RULE_default_argument = 217
    RULE_parameter_modifier = 218
    RULE_parameter_array = 219
    RULE_property_declaration = 220
    RULE_property_modifiers = 221
    RULE_property_modifier = 222
    RULE_accessor_declarations = 223
    RULE_get_accessor_declaration = 224
    RULE_set_accessor_declaration = 225
    RULE_accessor_modifier = 226
    RULE_accessor_body = 227
    RULE_event_declaration = 228
    RULE_event_modifiers = 229
    RULE_event_modifier = 230
    RULE_event_accessor_declarations = 231
    RULE_add_accessor_declaration = 232
    RULE_remove_accessor_declaration = 233
    RULE_indexer_declaration = 234
    RULE_indexer_modifiers = 235
    RULE_indexer_modifier = 236
    RULE_indexer_declarator = 237
    RULE_operator_declaration = 238
    RULE_operator_modifiers = 239
    RULE_operator_modifier = 240
    RULE_operator_declarator = 241
    RULE_unary_operator_declarator = 242
    RULE_overloadable_unary_operator = 243
    RULE_binary_operator_declarator = 244
    RULE_overloadable_binary_operator = 245
    RULE_overloadable_operator = 246
    RULE_conversion_operator_declarator = 247
    RULE_operator_body = 248
    RULE_constructor_declaration = 249
    RULE_constructor_modifiers = 250
    RULE_constructor_modifier = 251
    RULE_constructor_declarator = 252
    RULE_constructor_initializer = 253
    RULE_constructor_body = 254
    RULE_static_constructor_declaration = 255
    RULE_static_constructor_modifiers = 256
    RULE_static_constructor_body = 257
    RULE_destructor_declaration = 258
    RULE_destructor_body = 259
    RULE_body = 260
    RULE_struct_declaration = 261
    RULE_struct_modifiers = 262
    RULE_struct_modifier = 263
    RULE_struct_interfaces = 264
    RULE_struct_body = 265
    RULE_struct_member_declarations = 266
    RULE_struct_member_declaration = 267
    RULE_array_type = 268
    RULE_non_array_type = 269
    RULE_rank_specifiers = 270
    RULE_rank_specifier = 271
    RULE_dim_separators = 272
    RULE_array_initializer = 273
    RULE_variable_initializer_list = 274
    RULE_interface_declaration = 275
    RULE_interface_modifiers = 276
    RULE_interface_modifier = 277
    RULE_variant_type_parameter_list = 278
    RULE_variant_type_parameters = 279
    RULE_variance_annotation = 280
    RULE_interface_base = 281
    RULE_interface_body = 282
    RULE_interface_member_declarations = 283
    RULE_interface_member_declaration = 284
    RULE_interface_method_declaration = 285
    RULE_interface_property_declaration = 286
    RULE_interface_accessors = 287
    RULE_interface_event_declaration = 288
    RULE_interface_indexer_declaration = 289
    RULE_enum_declaration = 290
    RULE_enum_base = 291
    RULE_enum_body = 292
    RULE_enum_modifiers = 293
    RULE_enum_modifier = 294
    RULE_enum_member_declarations = 295
    RULE_enum_member_declaration = 296
    RULE_delegate_declaration = 297
    RULE_delegate_modifiers = 298
    RULE_delegate_modifier = 299
    RULE_global_attributes = 300
    RULE_global_attribute_sections = 301
    RULE_global_attribute_section = 302
    RULE_global_attribute_target_specifier = 303
    RULE_global_attribute_target = 304
    RULE_attributes = 305
    RULE_attribute_sections = 306
    RULE_attribute_section = 307
    RULE_attribute_target_specifier = 308
    RULE_attribute_target = 309
    RULE_attribute_list = 310
    RULE_attribute = 311
    RULE_attribute_name = 312
    RULE_attribute_arguments = 313
    RULE_positional_argument_list = 314
    RULE_positional_argument = 315
    RULE_named_argument_list = 316
    RULE_named_argument = 317
    RULE_attribute_argument_expression = 318
    RULE_class_modifier_unsafe = 319
    RULE_struct_modifier_unsafe = 320
    RULE_interface_modifier_unsafe = 321
    RULE_delegate_modifier_unsafe = 322
    RULE_field_modifier_unsafe = 323
    RULE_method_modifier_unsafe = 324
    RULE_property_modifier_unsafe = 325
    RULE_event_modifier_unsafe = 326
    RULE_indexer_modifier_unsafe = 327
    RULE_operator_modifier_unsafe = 328
    RULE_constructor_modifier_unsafe = 329
    RULE_destructor_declaration_unsafe = 330
    RULE_static_constructor_modifiers_unsafe = 331
    RULE_embedded_statement_unsafe = 332
    RULE_unsafe_statement = 333
    RULE_type_unsafe = 334
    RULE_pointer_type = 335
    RULE_unmanaged_type = 336
    RULE_primary_no_array_creation_expression_unsafe = 337
    RULE_unary_expression_unsafe = 338
    RULE_pointer_indirection_expression = 339
    RULE_addressof_expression = 340
    RULE_sizeof_expression = 341
    RULE_fixed_statement = 342
    RULE_fixed_pointer_declarators = 343
    RULE_fixed_pointer_declarator = 344
    RULE_fixed_pointer_initializer = 345
    RULE_struct_member_declaration_unsafe = 346
    RULE_fixed_size_buffer_declaration = 347
    RULE_fixed_size_buffer_modifiers = 348
    RULE_fixed_size_buffer_modifier = 349
    RULE_buffer_element_type = 350
    RULE_fixed_size_buffer_declarators = 351
    RULE_fixed_size_buffer_declarator = 352
    RULE_local_variable_initializer_unsafe = 353
    RULE_stackalloc_initializer = 354
    RULE_from_contextual_keyword = 355
    RULE_let_contextual_keyword = 356
    RULE_where_contextual_keyword = 357
    RULE_join_contextual_keyword = 358
    RULE_on_contextual_keyword = 359
    RULE_equals_contextual_keyword = 360
    RULE_into_contextual_keyword = 361
    RULE_orderby_contextual_keyword = 362
    RULE_ascending_contextual_keyword = 363
    RULE_descending_contextual_keyword = 364
    RULE_select_contextual_keyword = 365
    RULE_group_contextual_keyword = 366
    RULE_by_contextual_keyword = 367
    RULE_partial_contextual_keyword = 368
    RULE_alias_contextual_keyword = 369
    RULE_yield_contextual_keyword = 370
    RULE_get_contextual_keyword = 371
    RULE_set_contextual_keyword = 372
    RULE_add_contextual_keyword = 373
    RULE_remove_contextual_keyword = 374
    RULE_dynamic_contextual_keyword = 375
    RULE_arglist = 376
    RULE_right_arrow = 377
    RULE_right_shift = 378
    RULE_right_shift_assignment = 379
    RULE_literal = 380
    RULE_boolean_literal = 381
    RULE_keyword = 382
    RULE_class_definition = 383
    RULE_struct_definition = 384
    RULE_interface_definition = 385
    RULE_enum_definition = 386
    RULE_delegate_definition = 387
    RULE_event_declaration2 = 388
    RULE_field_declaration2 = 389
    RULE_property_declaration2 = 390
    RULE_constant_declaration2 = 391
    RULE_indexer_declaration2 = 392
    RULE_destructor_definition = 393
    RULE_constructor_declaration2 = 394
    RULE_method_declaration2 = 395
    RULE_method_member_name = 396
    RULE_method_member_name2 = 397
    RULE_operator_declaration2 = 398
    RULE_interface_method_declaration2 = 399
    RULE_interface_property_declaration2 = 400
    RULE_interface_event_declaration2 = 401
    RULE_interface_indexer_declaration2 = 402
    RULE_member_access2 = 403
    RULE_method_invocation2 = 404
    RULE_object_creation_expression2 = 405

    ruleNames =  [ "namespace_name", "type_name", "identifier", "namespace_or_type_name", 
                   "type_argument_list_opt", "any_type", "base_type", "simple_type", 
                   "numeric_type", "integral_type", "floating_point_type", 
                   "nullable_type", "non_nullable_value_type", "reference_type", 
                   "class_type", "interface_type", "delegate_type", "type_argument_list", 
                   "type_arguments", "type_argument", "type_void", "variable_reference", 
                   "argument_list", "argument", "argument_name", "argument_value", 
                   "primary_expression", "primary_expression_start", "bracket_expression", 
                   "simple_name", "parenthesized_expression", "member_access", 
                   "predefined_type", "expression_list", "this_access", 
                   "base_access", "object_creation_expression", "object_or_collection_initializer", 
                   "object_initializer", "member_initializer_list", "member_initializer", 
                   "initializer_value", "collection_initializer", "element_initializer_list", 
                   "element_initializer", "array_creation_expression", "delegate_creation_expression", 
                   "anonymous_object_creation_expression", "anonymous_object_initializer", 
                   "member_declarator_list", "member_declarator", "typeof_expression", 
                   "unbound_type_name", "generic_dimension_specifier", "commas", 
                   "checked_expression", "unchecked_expression", "default_value_expression", 
                   "unary_expression", "scan_for_cast_generic_precedence", 
                   "cast_disambiguation_token", "pre_increment_expression", 
                   "pre_decrement_expression", "cast_expression", "multiplicative_expression", 
                   "additive_expression", "shift_expression", "relational_expression", 
                   "scan_for_shift_generic_precedence", "shift_disambiguation_token", 
                   "isType", "is_disambiguation_token", "equality_expression", 
                   "and_expression", "exclusive_or_expression", "inclusive_or_expression", 
                   "conditional_and_expression", "conditional_or_expression", 
                   "null_coalescing_expression", "conditional_expression", 
                   "lambda_expression", "anonymous_method_expression", "anonymous_function_signature", 
                   "explicit_anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
                   "explicit_anonymous_function_parameter", "anonymous_function_parameter_modifier", 
                   "implicit_anonymous_function_signature", "implicit_anonymous_function_parameter_list", 
                   "implicit_anonymous_function_parameter", "anonymous_function_body", 
                   "query_expression", "from_clause", "query_body", "query_body_clauses", 
                   "query_body_clause", "let_clause", "where_clause", "join_clause", 
                   "join_into_clause", "combined_join_clause", "orderby_clause", 
                   "orderings", "ordering", "ordering_direction", "select_or_group_clause", 
                   "select_clause", "group_clause", "query_continuation", 
                   "assignment", "assignment_operator", "expression", "non_assignment_expression", 
                   "constant_expression", "boolean_expression", "statement", 
                   "embedded_statement", "simple_embedded_statement", "block", 
                   "statement_list", "empty_statement", "labeled_statement", 
                   "declaration_statement", "local_variable_declaration", 
                   "local_variable_type", "local_variable_declarators", 
                   "local_variable_declarator", "local_variable_initializer", 
                   "local_constant_declaration", "expression_statement", 
                   "statement_expression", "selection_statement", "if_body", 
                   "if_statement", "switch_statement", "switch_block", "switch_sections", 
                   "switch_section", "switch_labels", "switch_label", "iteration_statement", 
                   "while_statement", "do_statement", "for_statement", "for_initializer", 
                   "for_condition", "for_iterator", "statement_expression_list", 
                   "foreach_statement", "jump_statement", "break_statement", 
                   "continue_statement", "goto_statement", "return_statement", 
                   "throw_statement", "try_statement", "catch_clauses", 
                   "specific_catch_clauses", "specific_catch_clause", "general_catch_clause", 
                   "finally_clause", "checked_statement", "unchecked_statement", 
                   "lock_statement", "using_statement", "resource_acquisition", 
                   "yield_statement", "parse", "namespace_declaration", 
                   "qualified_identifier", "namespace_body", "extern_alias_directives", 
                   "extern_alias_directive", "using_directives", "using_directive", 
                   "using_alias_directive", "using_namespace_directive", 
                   "namespace_member_declarations", "namespace_member_declaration", 
                   "type_declaration", "qualified_alias_member", "class_declaration", 
                   "class_modifiers", "class_modifier", "type_parameter_list", 
                   "type_parameters", "type_parameter", "class_base", "interface_type_list", 
                   "type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
                   "type_parameter_constraints", "primary_constraint", "secondary_constraints", 
                   "constructor_constraint", "class_body", "class_member_declarations", 
                   "class_member_declaration", "all_member_modifiers", "all_member_modifier", 
                   "common_member_declaration", "typed_member_declaration", 
                   "constant_declarators", "constant_declarator", "variable_declarators", 
                   "variable_declarator", "variable_initializer", "method_declaration", 
                   "method_header", "method_modifiers", "method_modifier", 
                   "return_type", "member_name", "method_body", "formal_parameter_list", 
                   "fixed_parameters", "fixed_parameter", "default_argument", 
                   "parameter_modifier", "parameter_array", "property_declaration", 
                   "property_modifiers", "property_modifier", "accessor_declarations", 
                   "get_accessor_declaration", "set_accessor_declaration", 
                   "accessor_modifier", "accessor_body", "event_declaration", 
                   "event_modifiers", "event_modifier", "event_accessor_declarations", 
                   "add_accessor_declaration", "remove_accessor_declaration", 
                   "indexer_declaration", "indexer_modifiers", "indexer_modifier", 
                   "indexer_declarator", "operator_declaration", "operator_modifiers", 
                   "operator_modifier", "operator_declarator", "unary_operator_declarator", 
                   "overloadable_unary_operator", "binary_operator_declarator", 
                   "overloadable_binary_operator", "overloadable_operator", 
                   "conversion_operator_declarator", "operator_body", "constructor_declaration", 
                   "constructor_modifiers", "constructor_modifier", "constructor_declarator", 
                   "constructor_initializer", "constructor_body", "static_constructor_declaration", 
                   "static_constructor_modifiers", "static_constructor_body", 
                   "destructor_declaration", "destructor_body", "body", 
                   "struct_declaration", "struct_modifiers", "struct_modifier", 
                   "struct_interfaces", "struct_body", "struct_member_declarations", 
                   "struct_member_declaration", "array_type", "non_array_type", 
                   "rank_specifiers", "rank_specifier", "dim_separators", 
                   "array_initializer", "variable_initializer_list", "interface_declaration", 
                   "interface_modifiers", "interface_modifier", "variant_type_parameter_list", 
                   "variant_type_parameters", "variance_annotation", "interface_base", 
                   "interface_body", "interface_member_declarations", "interface_member_declaration", 
                   "interface_method_declaration", "interface_property_declaration", 
                   "interface_accessors", "interface_event_declaration", 
                   "interface_indexer_declaration", "enum_declaration", 
                   "enum_base", "enum_body", "enum_modifiers", "enum_modifier", 
                   "enum_member_declarations", "enum_member_declaration", 
                   "delegate_declaration", "delegate_modifiers", "delegate_modifier", 
                   "global_attributes", "global_attribute_sections", "global_attribute_section", 
                   "global_attribute_target_specifier", "global_attribute_target", 
                   "attributes", "attribute_sections", "attribute_section", 
                   "attribute_target_specifier", "attribute_target", "attribute_list", 
                   "attribute", "attribute_name", "attribute_arguments", 
                   "positional_argument_list", "positional_argument", "named_argument_list", 
                   "named_argument", "attribute_argument_expression", "class_modifier_unsafe", 
                   "struct_modifier_unsafe", "interface_modifier_unsafe", 
                   "delegate_modifier_unsafe", "field_modifier_unsafe", 
                   "method_modifier_unsafe", "property_modifier_unsafe", 
                   "event_modifier_unsafe", "indexer_modifier_unsafe", "operator_modifier_unsafe", 
                   "constructor_modifier_unsafe", "destructor_declaration_unsafe", 
                   "static_constructor_modifiers_unsafe", "embedded_statement_unsafe", 
                   "unsafe_statement", "type_unsafe", "pointer_type", "unmanaged_type", 
                   "primary_no_array_creation_expression_unsafe", "unary_expression_unsafe", 
                   "pointer_indirection_expression", "addressof_expression", 
                   "sizeof_expression", "fixed_statement", "fixed_pointer_declarators", 
                   "fixed_pointer_declarator", "fixed_pointer_initializer", 
                   "struct_member_declaration_unsafe", "fixed_size_buffer_declaration", 
                   "fixed_size_buffer_modifiers", "fixed_size_buffer_modifier", 
                   "buffer_element_type", "fixed_size_buffer_declarators", 
                   "fixed_size_buffer_declarator", "local_variable_initializer_unsafe", 
                   "stackalloc_initializer", "from_contextual_keyword", 
                   "let_contextual_keyword", "where_contextual_keyword", 
                   "join_contextual_keyword", "on_contextual_keyword", "equals_contextual_keyword", 
                   "into_contextual_keyword", "orderby_contextual_keyword", 
                   "ascending_contextual_keyword", "descending_contextual_keyword", 
                   "select_contextual_keyword", "group_contextual_keyword", 
                   "by_contextual_keyword", "partial_contextual_keyword", 
                   "alias_contextual_keyword", "yield_contextual_keyword", 
                   "get_contextual_keyword", "set_contextual_keyword", "add_contextual_keyword", 
                   "remove_contextual_keyword", "dynamic_contextual_keyword", 
                   "arglist", "right_arrow", "right_shift", "right_shift_assignment", 
                   "literal", "boolean_literal", "keyword", "class_definition", 
                   "struct_definition", "interface_definition", "enum_definition", 
                   "delegate_definition", "event_declaration2", "field_declaration2", 
                   "property_declaration2", "constant_declaration2", "indexer_declaration2", 
                   "destructor_definition", "constructor_declaration2", 
                   "method_declaration2", "method_member_name", "method_member_name2", 
                   "operator_declaration2", "interface_method_declaration2", 
                   "interface_property_declaration2", "interface_event_declaration2", 
                   "interface_indexer_declaration2", "member_access2", "method_invocation2", 
                   "object_creation_expression2" ]

    EOF = Token.EOF
    Pp_directive=1
    BYTE_ORDER_MARK=2
    SINGLE_LINE_DOC_COMMENT=3
    DELIMITED_DOC_COMMENT=4
    NEW_LINE=5
    SINGLE_LINE_COMMENT=6
    DELIMITED_COMMENT=7
    WHITESPACE=8
    ABSTRACT=9
    ADD=10
    ALIAS=11
    ARGLIST=12
    AS=13
    ASCENDING=14
    BASE=15
    BOOL=16
    BREAK=17
    BY=18
    BYTE=19
    CASE=20
    CATCH=21
    CHAR=22
    CHECKED=23
    CLASS=24
    CONST=25
    CONTINUE=26
    DECIMAL=27
    DEFAULT=28
    DELEGATE=29
    DESCENDING=30
    DO=31
    DOUBLE=32
    DYNAMIC=33
    ELSE=34
    ENUM=35
    EQUALS=36
    EVENT=37
    EXPLICIT=38
    EXTERN=39
    FALSE=40
    FINALLY=41
    FIXED=42
    FLOAT=43
    FOR=44
    FOREACH=45
    FROM=46
    GET=47
    GOTO=48
    GROUP=49
    IF=50
    IMPLICIT=51
    IN=52
    INT=53
    INTERFACE=54
    INTERNAL=55
    INTO=56
    IS=57
    JOIN=58
    LET=59
    LOCK=60
    LONG=61
    NAMESPACE=62
    NEW=63
    NULL=64
    OBJECT=65
    ON=66
    OPERATOR=67
    ORDERBY=68
    OUT=69
    OVERRIDE=70
    PARAMS=71
    PARTIAL=72
    PRIVATE=73
    PROTECTED=74
    PUBLIC=75
    READONLY=76
    REF=77
    REMOVE=78
    RETURN=79
    SBYTE=80
    SEALED=81
    SELECT=82
    SET=83
    SHORT=84
    SIZEOF=85
    STACKALLOC=86
    STATIC=87
    STRING=88
    STRUCT=89
    SWITCH=90
    THIS=91
    THROW=92
    TRUE=93
    TRY=94
    TYPEOF=95
    UINT=96
    ULONG=97
    UNCHECKED=98
    UNSAFE=99
    USHORT=100
    USING=101
    VIRTUAL=102
    VOID=103
    VOLATILE=104
    WHERE=105
    WHILE=106
    YIELD=107
    IDENTIFIER=108
    INTEGER_LITERAL=109
    LiteralAccess=110
    REAL_LITERAL=111
    CHARACTER_LITERAL=112
    STRING_LITERAL=113
    OPEN_BRACE=114
    CLOSE_BRACE=115
    OPEN_BRACKET=116
    CLOSE_BRACKET=117
    OPEN_PARENS=118
    CLOSE_PARENS=119
    DOT=120
    COMMA=121
    COLON=122
    SEMICOLON=123
    PLUS=124
    MINUS=125
    STAR=126
    DIV=127
    PERCENT=128
    AMP=129
    BITWISE_OR=130
    CARET=131
    BANG=132
    TILDE=133
    ASSIGNMENT=134
    LT=135
    GT=136
    INTERR=137
    DOUBLE_COLON=138
    OP_COALESCING=139
    OP_INC=140
    OP_DEC=141
    OP_AND=142
    OP_OR=143
    OP_PTR=144
    OP_EQ=145
    OP_NE=146
    OP_LE=147
    OP_GE=148
    OP_ADD_ASSIGNMENT=149
    OP_SUB_ASSIGNMENT=150
    OP_MULT_ASSIGNMENT=151
    OP_DIV_ASSIGNMENT=152
    OP_MOD_ASSIGNMENT=153
    OP_AND_ASSIGNMENT=154
    OP_OR_ASSIGNMENT=155
    OP_XOR_ASSIGNMENT=156
    OP_LEFT_SHIFT=157
    OP_LEFT_SHIFT_ASSIGNMENT=158
    QUOTE=159
    DOUBLE_QUOTE=160
    BACK_SLASH=161
    DOUBLE_BACK_SLASH=162
    SHARP=163

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Namespace_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_name" ):
                listener.enterNamespace_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_name" ):
                listener.exitNamespace_name(self)




    def namespace_name(self):

        localctx = CSharp4Parser.Namespace_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_namespace_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_or_type_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = CSharp4Parser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.namespace_or_type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CSharp4Parser.IDENTIFIER, 0)

        def FROM(self):
            return self.getToken(CSharp4Parser.FROM, 0)

        def LET(self):
            return self.getToken(CSharp4Parser.LET, 0)

        def WHERE(self):
            return self.getToken(CSharp4Parser.WHERE, 0)

        def JOIN(self):
            return self.getToken(CSharp4Parser.JOIN, 0)

        def ON(self):
            return self.getToken(CSharp4Parser.ON, 0)

        def EQUALS(self):
            return self.getToken(CSharp4Parser.EQUALS, 0)

        def INTO(self):
            return self.getToken(CSharp4Parser.INTO, 0)

        def ORDERBY(self):
            return self.getToken(CSharp4Parser.ORDERBY, 0)

        def ASCENDING(self):
            return self.getToken(CSharp4Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CSharp4Parser.DESCENDING, 0)

        def SELECT(self):
            return self.getToken(CSharp4Parser.SELECT, 0)

        def GROUP(self):
            return self.getToken(CSharp4Parser.GROUP, 0)

        def BY(self):
            return self.getToken(CSharp4Parser.BY, 0)

        def PARTIAL(self):
            return self.getToken(CSharp4Parser.PARTIAL, 0)

        def ALIAS(self):
            return self.getToken(CSharp4Parser.ALIAS, 0)

        def YIELD(self):
            return self.getToken(CSharp4Parser.YIELD, 0)

        def GET(self):
            return self.getToken(CSharp4Parser.GET, 0)

        def SET(self):
            return self.getToken(CSharp4Parser.SET, 0)

        def ADD(self):
            return self.getToken(CSharp4Parser.ADD, 0)

        def REMOVE(self):
            return self.getToken(CSharp4Parser.REMOVE, 0)

        def DYNAMIC(self):
            return self.getToken(CSharp4Parser.DYNAMIC, 0)

        def ARGLIST(self):
            return self.getToken(CSharp4Parser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = CSharp4Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_or_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def type_argument_list_opt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type_argument_list_optContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type_argument_list_optContext,i)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharp4Parser.Qualified_alias_memberContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_or_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_or_type_name" ):
                listener.enterNamespace_or_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_or_type_name" ):
                listener.exitNamespace_or_type_name(self)




    def namespace_or_type_name(self):

        localctx = CSharp4Parser.Namespace_or_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_namespace_or_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 818
                self.identifier()
                self.state = 819
                self.type_argument_list_opt()
                pass

            elif la_ == 2:
                self.state = 821
                self.qualified_alias_member()
                pass


            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 824
                    self.match(CSharp4Parser.DOT)
                    self.state = 825
                    self.identifier()
                    self.state = 826
                    self.type_argument_list_opt() 
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_argument_list_optContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_argument_list_opt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list_opt" ):
                listener.enterType_argument_list_opt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list_opt" ):
                listener.exitType_argument_list_opt(self)




    def type_argument_list_opt(self):

        localctx = CSharp4Parser.Type_argument_list_optContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type_argument_list_opt)
        try:
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.type_argument_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_typeContext,0)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = CSharp4Parser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_any_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.base_type()
            self.state = 843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 841
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.INTERR]:
                        self.state = 838
                        self.match(CSharp4Parser.INTERR)
                        pass
                    elif token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 839
                        self.rank_specifier()
                        pass
                    elif token in [CSharp4Parser.STAR]:
                        self.state = 840
                        self.match(CSharp4Parser.STAR)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_typeContext,0)


        def class_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_type" ):
                listener.enterBase_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_type" ):
                listener.exitBase_type(self)




    def base_type(self):

        localctx = CSharp4Parser.Base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_base_type)
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.BOOL, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.simple_type()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.class_type()
                pass
            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 848
                self.match(CSharp4Parser.VOID)
                self.state = 849
                self.match(CSharp4Parser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Numeric_typeContext,0)


        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_simple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type" ):
                listener.enterSimple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type" ):
                listener.exitSimple_type(self)




    def simple_type(self):

        localctx = CSharp4Parser.Simple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_simple_type)
        try:
            self.state = 854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.numeric_type()
                pass
            elif token in [CSharp4Parser.BOOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.match(CSharp4Parser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integral_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Integral_typeContext,0)


        def floating_point_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Floating_point_typeContext,0)


        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_numeric_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_type" ):
                listener.enterNumeric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_type" ):
                listener.exitNumeric_type(self)




    def numeric_type(self):

        localctx = CSharp4Parser.Numeric_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_numeric_type)
        try:
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.integral_type()
                pass
            elif token in [CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.floating_point_type()
                pass
            elif token in [CSharp4Parser.DECIMAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.match(CSharp4Parser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Integral_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_integral_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegral_type" ):
                listener.enterIntegral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegral_type" ):
                listener.exitIntegral_type(self)




    def integral_type(self):

        localctx = CSharp4Parser.Integral_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_integral_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (CSharp4Parser.SBYTE - 80)) | (1 << (CSharp4Parser.SHORT - 80)) | (1 << (CSharp4Parser.UINT - 80)) | (1 << (CSharp4Parser.ULONG - 80)) | (1 << (CSharp4Parser.USHORT - 80)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Floating_point_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_floating_point_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_point_type" ):
                listener.enterFloating_point_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_point_type" ):
                listener.exitFloating_point_type(self)




    def floating_point_type(self):

        localctx = CSharp4Parser.Floating_point_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_floating_point_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.DOUBLE or _la==CSharp4Parser.FLOAT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nullable_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_nullable_value_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_nullable_value_typeContext,0)


        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_nullable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullable_type" ):
                listener.enterNullable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullable_type" ):
                listener.exitNullable_type(self)




    def nullable_type(self):

        localctx = CSharp4Parser.Nullable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_nullable_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.non_nullable_value_type()
            self.state = 866
            self.match(CSharp4Parser.INTERR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_nullable_value_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_non_nullable_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_nullable_value_type" ):
                listener.enterNon_nullable_value_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_nullable_value_type" ):
                listener.exitNon_nullable_value_type(self)




    def non_nullable_value_type(self):

        localctx = CSharp4Parser.Non_nullable_value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_non_nullable_value_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.base_type()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OPEN_BRACKET or _la==CSharp4Parser.STAR:
                self.state = 871
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.OPEN_BRACKET]:
                    self.state = 869
                    self.rank_specifier()
                    pass
                elif token in [CSharp4Parser.STAR]:
                    self.state = 870
                    self.match(CSharp4Parser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def class_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_reference_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_type" ):
                listener.enterReference_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_type" ):
                listener.exitReference_type(self)




    def reference_type(self):

        localctx = CSharp4Parser.Reference_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_reference_type)
        self._la = 0 # Token type
        try:
            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.BOOL, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.simple_type()
                self.state = 886
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 880
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                            self.state = 877
                            _la = self._input.LA(1)
                            if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 882
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 883
                        self.rank_specifier() 
                    self.state = 888
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                    self.state = 889
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 895
                self.rank_specifier()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.class_type()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (CSharp4Parser.OPEN_BRACKET - 116)) | (1 << (CSharp4Parser.STAR - 116)) | (1 << (CSharp4Parser.INTERR - 116)))) != 0):
                    self.state = 901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                        self.state = 898
                        _la = self._input.LA(1)
                        if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 903
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 904
                    self.rank_specifier()
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 910
                self.match(CSharp4Parser.VOID)
                self.state = 911
                self.match(CSharp4Parser.STAR)
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 915
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                            self.state = 912
                            _la = self._input.LA(1)
                            if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 917
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 918
                        self.rank_specifier() 
                    self.state = 923
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                    self.state = 924
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 930
                self.rank_specifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_nameContext,0)


        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def dynamic_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Dynamic_contextual_keywordContext,0)


        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = CSharp4Parser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_class_type)
        try:
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.match(CSharp4Parser.OBJECT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                self.dynamic_contextual_keyword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 936
                self.match(CSharp4Parser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type" ):
                listener.enterInterface_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type" ):
                listener.exitInterface_type(self)




    def interface_type(self):

        localctx = CSharp4Parser.Interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interface_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_type" ):
                listener.enterDelegate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_type" ):
                listener.exitDelegate_type(self)




    def delegate_type(self):

        localctx = CSharp4Parser.Delegate_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delegate_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def type_arguments(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_argumentsContext,0)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument_list" ):
                listener.enterType_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument_list" ):
                listener.exitType_argument_list(self)




    def type_argument_list(self):

        localctx = CSharp4Parser.Type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_type_argument_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(CSharp4Parser.LT)
            self.state = 944
            self.type_arguments()
            self.state = 945
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type_argumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_arguments" ):
                listener.enterType_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_arguments" ):
                listener.exitType_arguments(self)




    def type_arguments(self):

        localctx = CSharp4Parser.Type_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_type_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.type_argument()
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 948
                self.match(CSharp4Parser.COMMA)
                self.state = 949
                self.type_argument()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_argument" ):
                listener.enterType_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_argument" ):
                listener.exitType_argument(self)




    def type_argument(self):

        localctx = CSharp4Parser.Type_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_type_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_voidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_void

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_void" ):
                listener.enterType_void(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_void" ):
                listener.exitType_void(self)




    def type_void(self):

        localctx = CSharp4Parser.Type_voidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_type_void)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(CSharp4Parser.VOID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = CSharp4Parser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)




    def argument_list(self):

        localctx = CSharp4Parser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.argument()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 962
                self.match(CSharp4Parser.COMMA)
                self.state = 963
                self.argument()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_value(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_valueContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CSharp4Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 969
                self.argument_name()


            self.state = 972
            self.argument_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = CSharp4Parser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.identifier()
            self.state = 975
            self.match(CSharp4Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_referenceContext,0)


        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_argument_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_value" ):
                listener.enterArgument_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_value" ):
                listener.exitArgument_value(self)




    def argument_value(self):

        localctx = CSharp4Parser.Argument_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_argument_value)
        try:
            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.expression()
                pass
            elif token in [CSharp4Parser.REF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.match(CSharp4Parser.REF)
                self.state = 979
                self.variable_reference()
                pass
            elif token in [CSharp4Parser.OUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 980
                self.match(CSharp4Parser.OUT)
                self.state = 981
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pe = None # Primary_expression_startContext

        def primary_expression_start(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expression_startContext,0)


        def bracket_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Bracket_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Bracket_expressionContext,i)


        def member_access2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Member_access2Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Member_access2Context,i)


        def method_invocation2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Method_invocation2Context)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Method_invocation2Context,i)


        def OP_INC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_INC)
            else:
                return self.getToken(CSharp4Parser.OP_INC, i)

        def OP_DEC(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_DEC)
            else:
                return self.getToken(CSharp4Parser.OP_DEC, i)

        def OP_PTR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_PTR)
            else:
                return self.getToken(CSharp4Parser.OP_PTR, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = CSharp4Parser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_primary_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            localctx.pe = self.primary_expression_start()
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 985
                self.bracket_expression()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (CSharp4Parser.OPEN_PARENS - 118)) | (1 << (CSharp4Parser.DOT - 118)) | (1 << (CSharp4Parser.OP_INC - 118)) | (1 << (CSharp4Parser.OP_DEC - 118)) | (1 << (CSharp4Parser.OP_PTR - 118)))) != 0):
                self.state = 997
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.DOT]:
                    self.state = 991
                    self.member_access2()
                    pass
                elif token in [CSharp4Parser.OPEN_PARENS]:
                    self.state = 992
                    self.method_invocation2()
                    pass
                elif token in [CSharp4Parser.OP_INC]:
                    self.state = 993
                    self.match(CSharp4Parser.OP_INC)
                    pass
                elif token in [CSharp4Parser.OP_DEC]:
                    self.state = 994
                    self.match(CSharp4Parser.OP_DEC)
                    pass
                elif token in [CSharp4Parser.OP_PTR]:
                    self.state = 995
                    self.match(CSharp4Parser.OP_PTR)
                    self.state = 996
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 999
                    self.bracket_expression()
                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_expression_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CSharp4Parser.LiteralContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_nameContext,0)


        def parenthesized_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Parenthesized_expressionContext,0)


        def predefined_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Predefined_typeContext,0)


        def qualified_alias_member(self):
            return self.getTypedRuleContext(CSharp4Parser.Qualified_alias_memberContext,0)


        def this_access(self):
            return self.getTypedRuleContext(CSharp4Parser.This_accessContext,0)


        def base_access(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_accessContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_object_initializerContext,0)


        def rank_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def object_creation_expression2(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_creation_expression2Context,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def rank_specifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifiersContext,0)


        def typeof_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Typeof_expressionContext,0)


        def checked_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Checked_expressionContext,0)


        def unchecked_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unchecked_expressionContext,0)


        def default_value_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Default_value_expressionContext,0)


        def anonymous_method_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_method_expressionContext,0)


        def sizeof_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Sizeof_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_expression_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression_start" ):
                listener.enterPrimary_expression_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression_start" ):
                listener.exitPrimary_expression_start(self)




    def primary_expression_start(self):

        localctx = CSharp4Parser.Primary_expression_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_primary_expression_start)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.simple_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.parenthesized_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1013
                self.predefined_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1014
                self.qualified_alias_member()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1015
                self.this_access()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1016
                self.base_access()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1017
                self.match(CSharp4Parser.NEW)
                self.state = 1039
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                    self.state = 1018
                    self.any_type()
                    self.state = 1033
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 1019
                        self.object_creation_expression2()
                        pass

                    elif la_ == 2:
                        self.state = 1020
                        self.object_or_collection_initializer()
                        pass

                    elif la_ == 3:
                        self.state = 1021
                        self.match(CSharp4Parser.OPEN_BRACKET)
                        self.state = 1022
                        self.expression_list()
                        self.state = 1023
                        self.match(CSharp4Parser.CLOSE_BRACKET)
                        self.state = 1025
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                        if la_ == 1:
                            self.state = 1024
                            self.rank_specifiers()


                        self.state = 1028
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CSharp4Parser.OPEN_BRACE:
                            self.state = 1027
                            self.array_initializer()


                        pass

                    elif la_ == 4:
                        self.state = 1030
                        self.rank_specifiers()
                        self.state = 1031
                        self.array_initializer()
                        pass


                    pass
                elif token in [CSharp4Parser.OPEN_BRACE]:
                    self.state = 1035
                    self.anonymous_object_initializer()
                    pass
                elif token in [CSharp4Parser.OPEN_BRACKET]:
                    self.state = 1036
                    self.rank_specifier()
                    self.state = 1037
                    self.array_initializer()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1041
                self.typeof_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1042
                self.checked_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1043
                self.unchecked_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1044
                self.default_value_expression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1045
                self.anonymous_method_expression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1046
                self.sizeof_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bracket_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = CSharp4Parser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_bracket_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 1050
            self.expression_list()
            self.state = 1051
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def type_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_argument_list_optContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)




    def simple_name(self):

        localctx = CSharp4Parser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.identifier()
            self.state = 1054
            self.type_argument_list_opt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parenthesized_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_parenthesized_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized_expression" ):
                listener.enterParenthesized_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized_expression" ):
                listener.exitParenthesized_expression(self)




    def parenthesized_expression(self):

        localctx = CSharp4Parser.Parenthesized_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_parenthesized_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1057
            self.expression()
            self.state = 1058
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access" ):
                listener.enterMember_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access" ):
                listener.exitMember_access(self)




    def member_access(self):

        localctx = CSharp4Parser.Member_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_member_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.primary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Predefined_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_predefined_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefined_type" ):
                listener.enterPredefined_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefined_type" ):
                listener.exitPredefined_type(self)




    def predefined_type(self):

        localctx = CSharp4Parser.Predefined_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_predefined_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = CSharp4Parser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.expression()
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1065
                self.match(CSharp4Parser.COMMA)
                self.state = 1066
                self.expression()
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class This_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_this_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThis_access" ):
                listener.enterThis_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThis_access" ):
                listener.exitThis_access(self)




    def this_access(self):

        localctx = CSharp4Parser.This_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_this_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(CSharp4Parser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def type_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_argument_list_optContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_base_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_access" ):
                listener.enterBase_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_access" ):
                listener.exitBase_access(self)




    def base_access(self):

        localctx = CSharp4Parser.Base_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_base_access)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.match(CSharp4Parser.BASE)
                self.state = 1075
                self.match(CSharp4Parser.DOT)
                self.state = 1076
                self.identifier()
                self.state = 1077
                self.type_argument_list_opt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(CSharp4Parser.BASE)
                self.state = 1080
                self.match(CSharp4Parser.OPEN_BRACKET)
                self.state = 1081
                self.expression_list()
                self.state = 1082
                self.match(CSharp4Parser.CLOSE_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression" ):
                listener.enterObject_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression" ):
                listener.exitObject_creation_expression(self)




    def object_creation_expression(self):

        localctx = CSharp4Parser.Object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_object_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(CSharp4Parser.NEW)
            self.state = 1087
            self.any_type()
            self.state = 1097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_PARENS]:
                self.state = 1088
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TYPEOF - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                    self.state = 1089
                    self.argument_list()


                self.state = 1092
                self.match(CSharp4Parser.CLOSE_PARENS)
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACE:
                    self.state = 1093
                    self.object_or_collection_initializer()


                pass
            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.state = 1096
                self.object_or_collection_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_or_collection_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_initializerContext,0)


        def collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_or_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_or_collection_initializer" ):
                listener.enterObject_or_collection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_or_collection_initializer" ):
                listener.exitObject_or_collection_initializer(self)




    def object_or_collection_initializer(self):

        localctx = CSharp4Parser.Object_or_collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_object_or_collection_initializer)
        try:
            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                self.object_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.collection_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def member_initializer_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_initializer" ):
                listener.enterObject_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_initializer" ):
                listener.exitObject_initializer(self)




    def object_initializer(self):

        localctx = CSharp4Parser.Object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_object_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1104
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1106
                self.member_initializer_list()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 1107
                    self.match(CSharp4Parser.COMMA)


                self.state = 1110
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Member_initializerContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Member_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer_list" ):
                listener.enterMember_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer_list" ):
                listener.exitMember_initializer_list(self)




    def member_initializer_list(self):

        localctx = CSharp4Parser.Member_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_member_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.member_initializer()
            self.state = 1119
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1115
                    self.match(CSharp4Parser.COMMA)
                    self.state = 1116
                    self.member_initializer() 
                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def initializer_value(self):
            return self.getTypedRuleContext(CSharp4Parser.Initializer_valueContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_initializer" ):
                listener.enterMember_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_initializer" ):
                listener.exitMember_initializer(self)




    def member_initializer(self):

        localctx = CSharp4Parser.Member_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_member_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.identifier()
            self.state = 1123
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 1124
            self.initializer_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Initializer_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_initializer_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_value" ):
                listener.enterInitializer_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_value" ):
                listener.exitInitializer_value(self)




    def initializer_value(self):

        localctx = CSharp4Parser.Initializer_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_initializer_value)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.expression()
                pass
            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                self.object_or_collection_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def element_initializer_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Element_initializer_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_collection_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_initializer" ):
                listener.enterCollection_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_initializer" ):
                listener.exitCollection_initializer(self)




    def collection_initializer(self):

        localctx = CSharp4Parser.Collection_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_collection_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 1131
            self.element_initializer_list()
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 1132
                self.match(CSharp4Parser.COMMA)


            self.state = 1135
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Element_initializerContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Element_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_element_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer_list" ):
                listener.enterElement_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer_list" ):
                listener.exitElement_initializer_list(self)




    def element_initializer_list(self):

        localctx = CSharp4Parser.Element_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_element_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.element_initializer()
            self.state = 1142
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1138
                    self.match(CSharp4Parser.COMMA)
                    self.state = 1139
                    self.element_initializer() 
                self.state = 1144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_assignment_expressionContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_element_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_initializer" ):
                listener.enterElement_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_initializer" ):
                listener.exitElement_initializer(self)




    def element_initializer(self):

        localctx = CSharp4Parser.Element_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_element_initializer)
        try:
            self.state = 1150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.non_assignment_expression()
                pass
            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1147
                self.expression_list()
                self.state = 1148
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_typeContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def non_array_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_array_typeContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def rank_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,0)


        def rank_specifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Rank_specifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_array_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_creation_expression" ):
                listener.enterArray_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_creation_expression" ):
                listener.exitArray_creation_expression(self)




    def array_creation_expression(self):

        localctx = CSharp4Parser.Array_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_array_creation_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(CSharp4Parser.NEW)
            self.state = 1169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1153
                self.array_type()
                self.state = 1154
                self.array_initializer()
                pass

            elif la_ == 2:
                self.state = 1156
                self.non_array_type()
                self.state = 1157
                self.match(CSharp4Parser.OPEN_BRACKET)
                self.state = 1158
                self.expression_list()
                self.state = 1159
                self.match(CSharp4Parser.CLOSE_BRACKET)
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 1160
                    self.rank_specifiers()


                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACE:
                    self.state = 1163
                    self.array_initializer()


                pass

            elif la_ == 3:
                self.state = 1166
                self.rank_specifier()
                self.state = 1167
                self.array_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def delegate_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_typeContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_creation_expression" ):
                listener.enterDelegate_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_creation_expression" ):
                listener.exitDelegate_creation_expression(self)




    def delegate_creation_expression(self):

        localctx = CSharp4Parser.Delegate_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_delegate_creation_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(CSharp4Parser.NEW)
            self.state = 1172
            self.delegate_type()
            self.state = 1173
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1174
            self.expression()
            self.state = 1175
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_object_creation_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def anonymous_object_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_object_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_object_creation_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_creation_expression" ):
                listener.enterAnonymous_object_creation_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_creation_expression" ):
                listener.exitAnonymous_object_creation_expression(self)




    def anonymous_object_creation_expression(self):

        localctx = CSharp4Parser.Anonymous_object_creation_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_anonymous_object_creation_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(CSharp4Parser.NEW)
            self.state = 1178
            self.anonymous_object_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_object_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def member_declarator_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_declarator_listContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_object_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_object_initializer" ):
                listener.enterAnonymous_object_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_object_initializer" ):
                listener.exitAnonymous_object_initializer(self)




    def anonymous_object_initializer(self):

        localctx = CSharp4Parser.Anonymous_object_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_anonymous_object_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1181
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 1183
                self.member_declarator_list()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 1184
                    self.match(CSharp4Parser.COMMA)


                self.state = 1187
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_declarator_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Member_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Member_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator_list" ):
                listener.enterMember_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator_list" ):
                listener.exitMember_declarator_list(self)




    def member_declarator_list(self):

        localctx = CSharp4Parser.Member_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_member_declarator_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.member_declarator()
            self.state = 1196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1192
                    self.match(CSharp4Parser.COMMA)
                    self.state = 1193
                    self.member_declarator() 
                self.state = 1198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_declarator" ):
                listener.enterMember_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_declarator" ):
                listener.exitMember_declarator(self)




    def member_declarator(self):

        localctx = CSharp4Parser.Member_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_member_declarator)
        try:
            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.primary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.identifier()
                self.state = 1201
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 1202
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Typeof_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(CSharp4Parser.TYPEOF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def unbound_type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Unbound_type_nameContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_typeof_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeof_expression" ):
                listener.enterTypeof_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeof_expression" ):
                listener.exitTypeof_expression(self)




    def typeof_expression(self):

        localctx = CSharp4Parser.Typeof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeof_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(CSharp4Parser.TYPEOF)
            self.state = 1207
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 1208
                self.unbound_type_name()
                self.state = 1209
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.state = 1211
                self.any_type()
                self.state = 1212
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.state = 1214
                self.match(CSharp4Parser.VOID)
                self.state = 1215
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unbound_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharp4Parser.DOUBLE_COLON, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def generic_dimension_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Generic_dimension_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Generic_dimension_specifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unbound_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnbound_type_name" ):
                listener.enterUnbound_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnbound_type_name" ):
                listener.exitUnbound_type_name(self)




    def unbound_type_name(self):

        localctx = CSharp4Parser.Unbound_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_unbound_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.identifier()
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.CLOSE_PARENS, CSharp4Parser.DOT, CSharp4Parser.LT]:
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 1219
                    self.generic_dimension_specifier()


                pass
            elif token in [CSharp4Parser.DOUBLE_COLON]:
                self.state = 1222
                self.match(CSharp4Parser.DOUBLE_COLON)
                self.state = 1223
                self.identifier()
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 1224
                    self.generic_dimension_specifier()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.DOT:
                self.state = 1229
                self.match(CSharp4Parser.DOT)
                self.state = 1230
                self.identifier()
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 1231
                    self.generic_dimension_specifier()


                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Generic_dimension_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def commas(self):
            return self.getTypedRuleContext(CSharp4Parser.CommasContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_generic_dimension_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_dimension_specifier" ):
                listener.enterGeneric_dimension_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_dimension_specifier" ):
                listener.exitGeneric_dimension_specifier(self)




    def generic_dimension_specifier(self):

        localctx = CSharp4Parser.Generic_dimension_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_generic_dimension_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(CSharp4Parser.LT)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 1240
                self.commas()


            self.state = 1243
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_commas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommas" ):
                listener.enterCommas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommas" ):
                listener.exitCommas(self)




    def commas(self):

        localctx = CSharp4Parser.CommasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_commas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(CSharp4Parser.COMMA)
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1246
                self.match(CSharp4Parser.COMMA)
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Checked_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_checked_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_expression" ):
                listener.enterChecked_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_expression" ):
                listener.exitChecked_expression(self)




    def checked_expression(self):

        localctx = CSharp4Parser.Checked_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_checked_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(CSharp4Parser.CHECKED)
            self.state = 1253
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1254
            self.expression()
            self.state = 1255
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unchecked_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_unchecked_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_expression" ):
                listener.enterUnchecked_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_expression" ):
                listener.exitUnchecked_expression(self)




    def unchecked_expression(self):

        localctx = CSharp4Parser.Unchecked_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_unchecked_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(CSharp4Parser.UNCHECKED)
            self.state = 1258
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1259
            self.expression()
            self.state = 1260
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_value_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_default_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_expression" ):
                listener.enterDefault_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_expression" ):
                listener.exitDefault_value_expression(self)




    def default_value_expression(self):

        localctx = CSharp4Parser.Default_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_default_value_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(CSharp4Parser.DEFAULT)
            self.state = 1263
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1264
            self.any_type()
            self.state = 1265
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Cast_expressionContext,0)


        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def pre_increment_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Pre_increment_expressionContext,0)


        def pre_decrement_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Pre_decrement_expressionContext,0)


        def unary_expression_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expression_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = CSharp4Parser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_unary_expression)
        try:
            self.state = 1280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1267
                self.cast_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.primary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1269
                self.match(CSharp4Parser.PLUS)
                self.state = 1270
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1271
                self.match(CSharp4Parser.MINUS)
                self.state = 1272
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1273
                self.match(CSharp4Parser.BANG)
                self.state = 1274
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1275
                self.match(CSharp4Parser.TILDE)
                self.state = 1276
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1277
                self.pre_increment_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1278
                self.pre_decrement_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1279
                self.unary_expression_unsafe()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scan_for_cast_generic_precedenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def cast_disambiguation_token(self):
            return self.getTypedRuleContext(CSharp4Parser.Cast_disambiguation_tokenContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_scan_for_cast_generic_precedence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScan_for_cast_generic_precedence" ):
                listener.enterScan_for_cast_generic_precedence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScan_for_cast_generic_precedence" ):
                listener.exitScan_for_cast_generic_precedence(self)




    def scan_for_cast_generic_precedence(self):

        localctx = CSharp4Parser.Scan_for_cast_generic_precedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_scan_for_cast_generic_precedence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1283
            self.any_type()
            self.state = 1284
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1285
            self.cast_disambiguation_token()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_disambiguation_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CSharp4Parser.LiteralContext,0)


        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharp4Parser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharp4Parser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharp4Parser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharp4Parser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def FINALLY(self):
            return self.getToken(CSharp4Parser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharp4Parser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharp4Parser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharp4Parser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharp4Parser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharp4Parser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def LOCK(self):
            return self.getToken(CSharp4Parser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharp4Parser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharp4Parser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharp4Parser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharp4Parser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharp4Parser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharp4Parser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharp4Parser.THROW, 0)

        def TRY(self):
            return self.getToken(CSharp4Parser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharp4Parser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharp4Parser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_cast_disambiguation_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_disambiguation_token" ):
                listener.enterCast_disambiguation_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_disambiguation_token" ):
                listener.exitCast_disambiguation_token(self)




    def cast_disambiguation_token(self):

        localctx = CSharp4Parser.Cast_disambiguation_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_cast_disambiguation_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.TILDE]:
                self.state = 1287
                self.match(CSharp4Parser.TILDE)
                pass
            elif token in [CSharp4Parser.BANG]:
                self.state = 1288
                self.match(CSharp4Parser.BANG)
                pass
            elif token in [CSharp4Parser.OPEN_PARENS]:
                self.state = 1289
                self.match(CSharp4Parser.OPEN_PARENS)
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.state = 1290
                self.identifier()
                pass
            elif token in [CSharp4Parser.FALSE, CSharp4Parser.NULL, CSharp4Parser.TRUE, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL]:
                self.state = 1291
                self.literal()
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.state = 1292
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.BASE]:
                self.state = 1293
                self.match(CSharp4Parser.BASE)
                pass
            elif token in [CSharp4Parser.BOOL]:
                self.state = 1294
                self.match(CSharp4Parser.BOOL)
                pass
            elif token in [CSharp4Parser.BREAK]:
                self.state = 1295
                self.match(CSharp4Parser.BREAK)
                pass
            elif token in [CSharp4Parser.BYTE]:
                self.state = 1296
                self.match(CSharp4Parser.BYTE)
                pass
            elif token in [CSharp4Parser.CASE]:
                self.state = 1297
                self.match(CSharp4Parser.CASE)
                pass
            elif token in [CSharp4Parser.CATCH]:
                self.state = 1298
                self.match(CSharp4Parser.CATCH)
                pass
            elif token in [CSharp4Parser.CHAR]:
                self.state = 1299
                self.match(CSharp4Parser.CHAR)
                pass
            elif token in [CSharp4Parser.CHECKED]:
                self.state = 1300
                self.match(CSharp4Parser.CHECKED)
                pass
            elif token in [CSharp4Parser.CLASS]:
                self.state = 1301
                self.match(CSharp4Parser.CLASS)
                pass
            elif token in [CSharp4Parser.CONST]:
                self.state = 1302
                self.match(CSharp4Parser.CONST)
                pass
            elif token in [CSharp4Parser.CONTINUE]:
                self.state = 1303
                self.match(CSharp4Parser.CONTINUE)
                pass
            elif token in [CSharp4Parser.DECIMAL]:
                self.state = 1304
                self.match(CSharp4Parser.DECIMAL)
                pass
            elif token in [CSharp4Parser.DEFAULT]:
                self.state = 1305
                self.match(CSharp4Parser.DEFAULT)
                pass
            elif token in [CSharp4Parser.DELEGATE]:
                self.state = 1306
                self.match(CSharp4Parser.DELEGATE)
                pass
            elif token in [CSharp4Parser.DO]:
                self.state = 1307
                self.match(CSharp4Parser.DO)
                pass
            elif token in [CSharp4Parser.DOUBLE]:
                self.state = 1308
                self.match(CSharp4Parser.DOUBLE)
                pass
            elif token in [CSharp4Parser.ELSE]:
                self.state = 1309
                self.match(CSharp4Parser.ELSE)
                pass
            elif token in [CSharp4Parser.ENUM]:
                self.state = 1310
                self.match(CSharp4Parser.ENUM)
                pass
            elif token in [CSharp4Parser.EVENT]:
                self.state = 1311
                self.match(CSharp4Parser.EVENT)
                pass
            elif token in [CSharp4Parser.EXPLICIT]:
                self.state = 1312
                self.match(CSharp4Parser.EXPLICIT)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.state = 1313
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.FINALLY]:
                self.state = 1314
                self.match(CSharp4Parser.FINALLY)
                pass
            elif token in [CSharp4Parser.FIXED]:
                self.state = 1315
                self.match(CSharp4Parser.FIXED)
                pass
            elif token in [CSharp4Parser.FLOAT]:
                self.state = 1316
                self.match(CSharp4Parser.FLOAT)
                pass
            elif token in [CSharp4Parser.FOR]:
                self.state = 1317
                self.match(CSharp4Parser.FOR)
                pass
            elif token in [CSharp4Parser.FOREACH]:
                self.state = 1318
                self.match(CSharp4Parser.FOREACH)
                pass
            elif token in [CSharp4Parser.GOTO]:
                self.state = 1319
                self.match(CSharp4Parser.GOTO)
                pass
            elif token in [CSharp4Parser.IF]:
                self.state = 1320
                self.match(CSharp4Parser.IF)
                pass
            elif token in [CSharp4Parser.IMPLICIT]:
                self.state = 1321
                self.match(CSharp4Parser.IMPLICIT)
                pass
            elif token in [CSharp4Parser.IN]:
                self.state = 1322
                self.match(CSharp4Parser.IN)
                pass
            elif token in [CSharp4Parser.INT]:
                self.state = 1323
                self.match(CSharp4Parser.INT)
                pass
            elif token in [CSharp4Parser.INTERFACE]:
                self.state = 1324
                self.match(CSharp4Parser.INTERFACE)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.state = 1325
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.LOCK]:
                self.state = 1326
                self.match(CSharp4Parser.LOCK)
                pass
            elif token in [CSharp4Parser.LONG]:
                self.state = 1327
                self.match(CSharp4Parser.LONG)
                pass
            elif token in [CSharp4Parser.NAMESPACE]:
                self.state = 1328
                self.match(CSharp4Parser.NAMESPACE)
                pass
            elif token in [CSharp4Parser.NEW]:
                self.state = 1329
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.OBJECT]:
                self.state = 1330
                self.match(CSharp4Parser.OBJECT)
                pass
            elif token in [CSharp4Parser.OPERATOR]:
                self.state = 1331
                self.match(CSharp4Parser.OPERATOR)
                pass
            elif token in [CSharp4Parser.OUT]:
                self.state = 1332
                self.match(CSharp4Parser.OUT)
                pass
            elif token in [CSharp4Parser.OVERRIDE]:
                self.state = 1333
                self.match(CSharp4Parser.OVERRIDE)
                pass
            elif token in [CSharp4Parser.PARAMS]:
                self.state = 1334
                self.match(CSharp4Parser.PARAMS)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.state = 1335
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.state = 1336
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.state = 1337
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.READONLY]:
                self.state = 1338
                self.match(CSharp4Parser.READONLY)
                pass
            elif token in [CSharp4Parser.REF]:
                self.state = 1339
                self.match(CSharp4Parser.REF)
                pass
            elif token in [CSharp4Parser.RETURN]:
                self.state = 1340
                self.match(CSharp4Parser.RETURN)
                pass
            elif token in [CSharp4Parser.SBYTE]:
                self.state = 1341
                self.match(CSharp4Parser.SBYTE)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.state = 1342
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.SHORT]:
                self.state = 1343
                self.match(CSharp4Parser.SHORT)
                pass
            elif token in [CSharp4Parser.SIZEOF]:
                self.state = 1344
                self.match(CSharp4Parser.SIZEOF)
                pass
            elif token in [CSharp4Parser.STACKALLOC]:
                self.state = 1345
                self.match(CSharp4Parser.STACKALLOC)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.state = 1346
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.STRING]:
                self.state = 1347
                self.match(CSharp4Parser.STRING)
                pass
            elif token in [CSharp4Parser.STRUCT]:
                self.state = 1348
                self.match(CSharp4Parser.STRUCT)
                pass
            elif token in [CSharp4Parser.SWITCH]:
                self.state = 1349
                self.match(CSharp4Parser.SWITCH)
                pass
            elif token in [CSharp4Parser.THIS]:
                self.state = 1350
                self.match(CSharp4Parser.THIS)
                pass
            elif token in [CSharp4Parser.THROW]:
                self.state = 1351
                self.match(CSharp4Parser.THROW)
                pass
            elif token in [CSharp4Parser.TRY]:
                self.state = 1352
                self.match(CSharp4Parser.TRY)
                pass
            elif token in [CSharp4Parser.TYPEOF]:
                self.state = 1353
                self.match(CSharp4Parser.TYPEOF)
                pass
            elif token in [CSharp4Parser.UINT]:
                self.state = 1354
                self.match(CSharp4Parser.UINT)
                pass
            elif token in [CSharp4Parser.ULONG]:
                self.state = 1355
                self.match(CSharp4Parser.ULONG)
                pass
            elif token in [CSharp4Parser.UNCHECKED]:
                self.state = 1356
                self.match(CSharp4Parser.UNCHECKED)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.state = 1357
                self.match(CSharp4Parser.UNSAFE)
                pass
            elif token in [CSharp4Parser.USHORT]:
                self.state = 1358
                self.match(CSharp4Parser.USHORT)
                pass
            elif token in [CSharp4Parser.USING]:
                self.state = 1359
                self.match(CSharp4Parser.USING)
                pass
            elif token in [CSharp4Parser.VIRTUAL]:
                self.state = 1360
                self.match(CSharp4Parser.VIRTUAL)
                pass
            elif token in [CSharp4Parser.VOID]:
                self.state = 1361
                self.match(CSharp4Parser.VOID)
                pass
            elif token in [CSharp4Parser.VOLATILE]:
                self.state = 1362
                self.match(CSharp4Parser.VOLATILE)
                pass
            elif token in [CSharp4Parser.WHILE]:
                self.state = 1363
                self.match(CSharp4Parser.WHILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pre_increment_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_INC(self):
            return self.getToken(CSharp4Parser.OP_INC, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_pre_increment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_increment_expression" ):
                listener.enterPre_increment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_increment_expression" ):
                listener.exitPre_increment_expression(self)




    def pre_increment_expression(self):

        localctx = CSharp4Parser.Pre_increment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pre_increment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(CSharp4Parser.OP_INC)
            self.state = 1367
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pre_decrement_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_DEC(self):
            return self.getToken(CSharp4Parser.OP_DEC, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_pre_decrement_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_decrement_expression" ):
                listener.enterPre_decrement_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_decrement_expression" ):
                listener.exitPre_decrement_expression(self)




    def pre_decrement_expression(self):

        localctx = CSharp4Parser.Pre_decrement_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pre_decrement_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(CSharp4Parser.OP_DEC)
            self.state = 1370
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_cast_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expression" ):
                listener.enterCast_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expression" ):
                listener.exitCast_expression(self)




    def cast_expression(self):

        localctx = CSharp4Parser.Cast_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_cast_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1373
            self.any_type()
            self.state = 1374
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1375
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiplicative_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Unary_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DIV)
            else:
                return self.getToken(CSharp4Parser.DIV, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.PERCENT)
            else:
                return self.getToken(CSharp4Parser.PERCENT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_multiplicative_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expression" ):
                listener.enterMultiplicative_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expression" ):
                listener.exitMultiplicative_expression(self)




    def multiplicative_expression(self):

        localctx = CSharp4Parser.Multiplicative_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_multiplicative_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.unary_expression()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (CSharp4Parser.STAR - 126)) | (1 << (CSharp4Parser.DIV - 126)) | (1 << (CSharp4Parser.PERCENT - 126)))) != 0):
                self.state = 1384
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.STAR]:
                    self.state = 1378
                    self.match(CSharp4Parser.STAR)
                    self.state = 1379
                    self.unary_expression()
                    pass
                elif token in [CSharp4Parser.DIV]:
                    self.state = 1380
                    self.match(CSharp4Parser.DIV)
                    self.state = 1381
                    self.unary_expression()
                    pass
                elif token in [CSharp4Parser.PERCENT]:
                    self.state = 1382
                    self.match(CSharp4Parser.PERCENT)
                    self.state = 1383
                    self.unary_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Additive_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Multiplicative_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Multiplicative_expressionContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.PLUS)
            else:
                return self.getToken(CSharp4Parser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.MINUS)
            else:
                return self.getToken(CSharp4Parser.MINUS, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = CSharp4Parser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.multiplicative_expression()
            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.PLUS or _la==CSharp4Parser.MINUS:
                self.state = 1394
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.PLUS]:
                    self.state = 1390
                    self.match(CSharp4Parser.PLUS)
                    self.state = 1391
                    self.multiplicative_expression()
                    pass
                elif token in [CSharp4Parser.MINUS]:
                    self.state = 1392
                    self.match(CSharp4Parser.MINUS)
                    self.state = 1393
                    self.multiplicative_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Additive_expressionContext,i)


        def OP_LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_LEFT_SHIFT)
            else:
                return self.getToken(CSharp4Parser.OP_LEFT_SHIFT, i)

        def right_shift(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Right_shiftContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Right_shiftContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_shift_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expression" ):
                listener.enterShift_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expression" ):
                listener.exitShift_expression(self)




    def shift_expression(self):

        localctx = CSharp4Parser.Shift_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_shift_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.additive_expression()
            self.state = 1407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1405
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OP_LEFT_SHIFT]:
                        self.state = 1400
                        self.match(CSharp4Parser.OP_LEFT_SHIFT)
                        self.state = 1401
                        self.additive_expression()
                        pass
                    elif token in [CSharp4Parser.GT]:
                        self.state = 1402
                        self.right_shift()
                        self.state = 1403
                        self.additive_expression()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Shift_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Shift_expressionContext,i)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.LT)
            else:
                return self.getToken(CSharp4Parser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.GT)
            else:
                return self.getToken(CSharp4Parser.GT, i)

        def OP_LE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_LE)
            else:
                return self.getToken(CSharp4Parser.OP_LE, i)

        def OP_GE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_GE)
            else:
                return self.getToken(CSharp4Parser.OP_GE, i)

        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.IS)
            else:
                return self.getToken(CSharp4Parser.IS, i)

        def isType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IsTypeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IsTypeContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.AS)
            else:
                return self.getToken(CSharp4Parser.AS, i)

        def any_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Any_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)




    def relational_expression(self):

        localctx = CSharp4Parser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_relational_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.shift_expression()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.AS or _la==CSharp4Parser.IS or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CSharp4Parser.LT - 135)) | (1 << (CSharp4Parser.GT - 135)) | (1 << (CSharp4Parser.OP_LE - 135)) | (1 << (CSharp4Parser.OP_GE - 135)))) != 0):
                self.state = 1423
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.LT]:
                    self.state = 1411
                    self.match(CSharp4Parser.LT)
                    self.state = 1412
                    self.shift_expression()
                    pass
                elif token in [CSharp4Parser.GT]:
                    self.state = 1413
                    self.match(CSharp4Parser.GT)
                    self.state = 1414
                    self.shift_expression()
                    pass
                elif token in [CSharp4Parser.OP_LE]:
                    self.state = 1415
                    self.match(CSharp4Parser.OP_LE)
                    self.state = 1416
                    self.shift_expression()
                    pass
                elif token in [CSharp4Parser.OP_GE]:
                    self.state = 1417
                    self.match(CSharp4Parser.OP_GE)
                    self.state = 1418
                    self.shift_expression()
                    pass
                elif token in [CSharp4Parser.IS]:
                    self.state = 1419
                    self.match(CSharp4Parser.IS)
                    self.state = 1420
                    self.isType()
                    pass
                elif token in [CSharp4Parser.AS]:
                    self.state = 1421
                    self.match(CSharp4Parser.AS)
                    self.state = 1422
                    self.any_type()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scan_for_shift_generic_precedenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def any_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Any_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,i)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def shift_disambiguation_token(self):
            return self.getTypedRuleContext(CSharp4Parser.Shift_disambiguation_tokenContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_scan_for_shift_generic_precedence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScan_for_shift_generic_precedence" ):
                listener.enterScan_for_shift_generic_precedence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScan_for_shift_generic_precedence" ):
                listener.exitScan_for_shift_generic_precedence(self)




    def scan_for_shift_generic_precedence(self):

        localctx = CSharp4Parser.Scan_for_shift_generic_precedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_scan_for_shift_generic_precedence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.identifier()
            self.state = 1429
            self.match(CSharp4Parser.LT)
            self.state = 1430
            self.any_type()
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1431
                self.match(CSharp4Parser.COMMA)
                self.state = 1432
                self.any_type()
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1438
            self.match(CSharp4Parser.GT)
            self.state = 1439
            self.shift_disambiguation_token()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_disambiguation_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def OP_EQ(self):
            return self.getToken(CSharp4Parser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharp4Parser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_shift_disambiguation_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_disambiguation_token" ):
                listener.enterShift_disambiguation_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_disambiguation_token" ):
                listener.exitShift_disambiguation_token(self)




    def shift_disambiguation_token(self):

        localctx = CSharp4Parser.Shift_disambiguation_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_shift_disambiguation_token)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            _la = self._input.LA(1)
            if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (CSharp4Parser.CLOSE_BRACKET - 117)) | (1 << (CSharp4Parser.OPEN_PARENS - 117)) | (1 << (CSharp4Parser.CLOSE_PARENS - 117)) | (1 << (CSharp4Parser.DOT - 117)) | (1 << (CSharp4Parser.COMMA - 117)) | (1 << (CSharp4Parser.COLON - 117)) | (1 << (CSharp4Parser.SEMICOLON - 117)) | (1 << (CSharp4Parser.GT - 117)) | (1 << (CSharp4Parser.INTERR - 117)) | (1 << (CSharp4Parser.OP_EQ - 117)) | (1 << (CSharp4Parser.OP_NE - 117)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_nullable_value_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_nullable_value_typeContext,0)


        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_isType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsType" ):
                listener.enterIsType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsType" ):
                listener.exitIsType(self)




    def isType(self):

        localctx = CSharp4Parser.IsTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_isType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.non_nullable_value_type()
            self.state = 1445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1444
                self.match(CSharp4Parser.INTERR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Is_disambiguation_tokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def OP_AND(self):
            return self.getToken(CSharp4Parser.OP_AND, 0)

        def OP_OR(self):
            return self.getToken(CSharp4Parser.OP_OR, 0)

        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_is_disambiguation_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_disambiguation_token" ):
                listener.enterIs_disambiguation_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_disambiguation_token" ):
                listener.exitIs_disambiguation_token(self)




    def is_disambiguation_token(self):

        localctx = CSharp4Parser.Is_disambiguation_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_is_disambiguation_token)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            _la = self._input.LA(1)
            if not(((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (CSharp4Parser.CLOSE_PARENS - 119)) | (1 << (CSharp4Parser.INTERR - 119)) | (1 << (CSharp4Parser.OP_AND - 119)) | (1 << (CSharp4Parser.OP_OR - 119)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equality_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Relational_expressionContext,i)


        def OP_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_EQ)
            else:
                return self.getToken(CSharp4Parser.OP_EQ, i)

        def OP_NE(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_NE)
            else:
                return self.getToken(CSharp4Parser.OP_NE, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = CSharp4Parser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.relational_expression()
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OP_EQ or _la==CSharp4Parser.OP_NE:
                self.state = 1454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.OP_EQ]:
                    self.state = 1450
                    self.match(CSharp4Parser.OP_EQ)
                    self.state = 1451
                    self.relational_expression()
                    pass
                elif token in [CSharp4Parser.OP_NE]:
                    self.state = 1452
                    self.match(CSharp4Parser.OP_NE)
                    self.state = 1453
                    self.relational_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Equality_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Equality_expressionContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.AMP)
            else:
                return self.getToken(CSharp4Parser.AMP, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expression" ):
                listener.enterAnd_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expression" ):
                listener.exitAnd_expression(self)




    def and_expression(self):

        localctx = CSharp4Parser.And_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.equality_expression()
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.AMP:
                self.state = 1460
                self.match(CSharp4Parser.AMP)
                self.state = 1461
                self.equality_expression()
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exclusive_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.And_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.And_expressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.CARET)
            else:
                return self.getToken(CSharp4Parser.CARET, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_exclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusive_or_expression" ):
                listener.enterExclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusive_or_expression" ):
                listener.exitExclusive_or_expression(self)




    def exclusive_or_expression(self):

        localctx = CSharp4Parser.Exclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_exclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.and_expression()
            self.state = 1472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.CARET:
                self.state = 1468
                self.match(CSharp4Parser.CARET)
                self.state = 1469
                self.and_expression()
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inclusive_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Exclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Exclusive_or_expressionContext,i)


        def BITWISE_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.BITWISE_OR)
            else:
                return self.getToken(CSharp4Parser.BITWISE_OR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_inclusive_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusive_or_expression" ):
                listener.enterInclusive_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusive_or_expression" ):
                listener.exitInclusive_or_expression(self)




    def inclusive_or_expression(self):

        localctx = CSharp4Parser.Inclusive_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_inclusive_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.exclusive_or_expression()
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.BITWISE_OR:
                self.state = 1476
                self.match(CSharp4Parser.BITWISE_OR)
                self.state = 1477
                self.exclusive_or_expression()
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_and_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusive_or_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Inclusive_or_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Inclusive_or_expressionContext,i)


        def OP_AND(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_AND)
            else:
                return self.getToken(CSharp4Parser.OP_AND, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conditional_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_and_expression" ):
                listener.enterConditional_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_and_expression" ):
                listener.exitConditional_and_expression(self)




    def conditional_and_expression(self):

        localctx = CSharp4Parser.Conditional_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_conditional_and_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.inclusive_or_expression()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OP_AND:
                self.state = 1484
                self.match(CSharp4Parser.OP_AND)
                self.state = 1485
                self.inclusive_or_expression()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Conditional_and_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Conditional_and_expressionContext,i)


        def OP_OR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.OP_OR)
            else:
                return self.getToken(CSharp4Parser.OP_OR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conditional_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_or_expression" ):
                listener.enterConditional_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_or_expression" ):
                listener.exitConditional_or_expression(self)




    def conditional_or_expression(self):

        localctx = CSharp4Parser.Conditional_or_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_conditional_or_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.conditional_and_expression()
            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.OP_OR:
                self.state = 1492
                self.match(CSharp4Parser.OP_OR)
                self.state = 1493
                self.conditional_and_expression()
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_coalescing_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_or_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Conditional_or_expressionContext,0)


        def OP_COALESCING(self):
            return self.getToken(CSharp4Parser.OP_COALESCING, 0)

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Null_coalescing_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_null_coalescing_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_coalescing_expression" ):
                listener.enterNull_coalescing_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_coalescing_expression" ):
                listener.exitNull_coalescing_expression(self)




    def null_coalescing_expression(self):

        localctx = CSharp4Parser.Null_coalescing_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_null_coalescing_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.conditional_or_expression()
            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OP_COALESCING:
                self.state = 1500
                self.match(CSharp4Parser.OP_COALESCING)
                self.state = 1501
                self.null_coalescing_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_coalescing_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Null_coalescing_expressionContext,0)


        def INTERR(self):
            return self.getToken(CSharp4Parser.INTERR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conditional_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_expression" ):
                listener.enterConditional_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_expression" ):
                listener.exitConditional_expression(self)




    def conditional_expression(self):

        localctx = CSharp4Parser.Conditional_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_conditional_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.null_coalescing_expression()
            self.state = 1510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.INTERR:
                self.state = 1505
                self.match(CSharp4Parser.INTERR)
                self.state = 1506
                self.expression()
                self.state = 1507
                self.match(CSharp4Parser.COLON)
                self.state = 1508
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambda_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_function_signatureContext,0)


        def right_arrow(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_arrowContext,0)


        def anonymous_function_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_function_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_lambda_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_expression" ):
                listener.enterLambda_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_expression" ):
                listener.exitLambda_expression(self)




    def lambda_expression(self):

        localctx = CSharp4Parser.Lambda_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_lambda_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.anonymous_function_signature()
            self.state = 1513
            self.right_arrow()
            self.state = 1514
            self.anonymous_function_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_method_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def explicit_anonymous_function_signature(self):
            return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_signatureContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_method_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_method_expression" ):
                listener.enterAnonymous_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_method_expression" ):
                listener.exitAnonymous_method_expression(self)




    def anonymous_method_expression(self):

        localctx = CSharp4Parser.Anonymous_method_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_anonymous_method_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.match(CSharp4Parser.DELEGATE)
            self.state = 1518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_PARENS:
                self.state = 1517
                self.explicit_anonymous_function_signature()


            self.state = 1520
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameterContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_signature" ):
                listener.enterAnonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_signature" ):
                listener.exitAnonymous_function_signature(self)




    def anonymous_function_signature(self):

        localctx = CSharp4Parser.Anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_anonymous_function_signature)
        try:
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1523
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1524
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1525
                self.explicit_anonymous_function_parameter_list()
                self.state = 1526
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1528
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1529
                self.implicit_anonymous_function_parameter_list()
                self.state = 1530
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1532
                self.implicit_anonymous_function_parameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_anonymous_function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def explicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_parameter_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_explicit_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_signature" ):
                listener.enterExplicit_anonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_signature" ):
                listener.exitExplicit_anonymous_function_signature(self)




    def explicit_anonymous_function_signature(self):

        localctx = CSharp4Parser.Explicit_anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_explicit_anonymous_function_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)))) != 0):
                self.state = 1536
                self.explicit_anonymous_function_parameter_list()


            self.state = 1539
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_anonymous_function_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Explicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Explicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_explicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter_list" ):
                listener.enterExplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter_list" ):
                listener.exitExplicit_anonymous_function_parameter_list(self)




    def explicit_anonymous_function_parameter_list(self):

        localctx = CSharp4Parser.Explicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_explicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.explicit_anonymous_function_parameter()
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1542
                self.match(CSharp4Parser.COMMA)
                self.state = 1543
                self.explicit_anonymous_function_parameter()
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_anonymous_function_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def anonymous_function_parameter_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Anonymous_function_parameter_modifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_explicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_anonymous_function_parameter" ):
                listener.enterExplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_anonymous_function_parameter" ):
                listener.exitExplicit_anonymous_function_parameter(self)




    def explicit_anonymous_function_parameter(self):

        localctx = CSharp4Parser.Explicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_explicit_anonymous_function_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OUT or _la==CSharp4Parser.REF:
                self.state = 1549
                self.anonymous_function_parameter_modifier()


            self.state = 1552
            self.any_type()
            self.state = 1553
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_function_parameter_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_function_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_parameter_modifier" ):
                listener.enterAnonymous_function_parameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_parameter_modifier" ):
                listener.exitAnonymous_function_parameter_modifier(self)




    def anonymous_function_parameter_modifier(self):

        localctx = CSharp4Parser.Anonymous_function_parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_anonymous_function_parameter_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.OUT or _la==CSharp4Parser.REF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicit_anonymous_function_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def implicit_anonymous_function_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameter_listContext,0)


        def implicit_anonymous_function_parameter(self):
            return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameterContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_implicit_anonymous_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_signature" ):
                listener.enterImplicit_anonymous_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_signature" ):
                listener.exitImplicit_anonymous_function_signature(self)




    def implicit_anonymous_function_signature(self):

        localctx = CSharp4Parser.Implicit_anonymous_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_implicit_anonymous_function_signature)
        self._la = 0 # Token type
        try:
            self.state = 1563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_PARENS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)))) != 0):
                    self.state = 1558
                    self.implicit_anonymous_function_parameter_list()


                self.state = 1561
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.implicit_anonymous_function_parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicit_anonymous_function_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicit_anonymous_function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Implicit_anonymous_function_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Implicit_anonymous_function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_implicit_anonymous_function_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter_list" ):
                listener.enterImplicit_anonymous_function_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter_list" ):
                listener.exitImplicit_anonymous_function_parameter_list(self)




    def implicit_anonymous_function_parameter_list(self):

        localctx = CSharp4Parser.Implicit_anonymous_function_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_implicit_anonymous_function_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.implicit_anonymous_function_parameter()
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1566
                self.match(CSharp4Parser.COMMA)
                self.state = 1567
                self.implicit_anonymous_function_parameter()
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implicit_anonymous_function_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_implicit_anonymous_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_anonymous_function_parameter" ):
                listener.enterImplicit_anonymous_function_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_anonymous_function_parameter" ):
                listener.exitImplicit_anonymous_function_parameter(self)




    def implicit_anonymous_function_parameter(self):

        localctx = CSharp4Parser.Implicit_anonymous_function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_implicit_anonymous_function_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_anonymous_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_function_body" ):
                listener.enterAnonymous_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_function_body" ):
                listener.exitAnonymous_function_body(self)




    def anonymous_function_body(self):

        localctx = CSharp4Parser.Anonymous_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_anonymous_function_body)
        try:
            self.state = 1577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.expression()
                pass
            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.From_clauseContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = CSharp4Parser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.from_clause()
            self.state = 1580
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.From_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = CSharp4Parser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.from_contextual_keyword()
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1583
                self.any_type()


            self.state = 1586
            self.identifier()
            self.state = 1587
            self.match(CSharp4Parser.IN)
            self.state = 1588
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_group_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Select_or_group_clauseContext,0)


        def query_body_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_body_clausesContext,0)


        def query_continuation(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_continuationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body" ):
                listener.enterQuery_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body" ):
                listener.exitQuery_body(self)




    def query_body(self):

        localctx = CSharp4Parser.Query_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_query_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (CSharp4Parser.FROM - 46)) | (1 << (CSharp4Parser.JOIN - 46)) | (1 << (CSharp4Parser.LET - 46)) | (1 << (CSharp4Parser.ORDERBY - 46)) | (1 << (CSharp4Parser.WHERE - 46)))) != 0):
                self.state = 1590
                self.query_body_clauses()


            self.state = 1593
            self.select_or_group_clause()
            self.state = 1595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1594
                self.query_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_body_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_body_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Query_body_clauseContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Query_body_clauseContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_body_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clauses" ):
                listener.enterQuery_body_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clauses" ):
                listener.exitQuery_body_clauses(self)




    def query_body_clauses(self):

        localctx = CSharp4Parser.Query_body_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_query_body_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.query_body_clause()
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (CSharp4Parser.FROM - 46)) | (1 << (CSharp4Parser.JOIN - 46)) | (1 << (CSharp4Parser.LET - 46)) | (1 << (CSharp4Parser.ORDERBY - 46)) | (1 << (CSharp4Parser.WHERE - 46)))) != 0):
                self.state = 1598
                self.query_body_clause()
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_body_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.From_clauseContext,0)


        def let_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Let_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Where_clauseContext,0)


        def combined_join_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Combined_join_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Orderby_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_body_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_body_clause" ):
                listener.enterQuery_body_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_body_clause" ):
                listener.exitQuery_body_clause(self)




    def query_body_clause(self):

        localctx = CSharp4Parser.Query_body_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_query_body_clause)
        try:
            self.state = 1609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.from_clause()
                pass
            elif token in [CSharp4Parser.LET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.let_clause()
                pass
            elif token in [CSharp4Parser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1606
                self.where_clause()
                pass
            elif token in [CSharp4Parser.JOIN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1607
                self.combined_join_clause()
                pass
            elif token in [CSharp4Parser.ORDERBY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1608
                self.orderby_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def let_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Let_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_let_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_clause" ):
                listener.enterLet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_clause" ):
                listener.exitLet_clause(self)




    def let_clause(self):

        localctx = CSharp4Parser.Let_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_let_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.let_contextual_keyword()
            self.state = 1612
            self.identifier()
            self.state = 1613
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 1614
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def where_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Where_contextual_keywordContext,0)


        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = CSharp4Parser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.where_contextual_keyword()
            self.state = 1617
            self.boolean_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Join_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def on_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.On_contextual_keywordContext,0)


        def equals_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Equals_contextual_keywordContext,0)


        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = CSharp4Parser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_join_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.join_contextual_keyword()
            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1620
                self.any_type()


            self.state = 1623
            self.identifier()
            self.state = 1624
            self.match(CSharp4Parser.IN)
            self.state = 1625
            self.expression()
            self.state = 1626
            self.on_contextual_keyword()
            self.state = 1627
            self.expression()
            self.state = 1628
            self.equals_contextual_keyword()
            self.state = 1629
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Join_contextual_keywordContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def on_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.On_contextual_keywordContext,0)


        def equals_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Equals_contextual_keywordContext,0)


        def into_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Into_contextual_keywordContext,0)


        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_join_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_into_clause" ):
                listener.enterJoin_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_into_clause" ):
                listener.exitJoin_into_clause(self)




    def join_into_clause(self):

        localctx = CSharp4Parser.Join_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_join_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.join_contextual_keyword()
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1632
                self.any_type()


            self.state = 1635
            self.identifier()
            self.state = 1636
            self.match(CSharp4Parser.IN)
            self.state = 1637
            self.expression()
            self.state = 1638
            self.on_contextual_keyword()
            self.state = 1639
            self.expression()
            self.state = 1640
            self.equals_contextual_keyword()
            self.state = 1641
            self.expression()
            self.state = 1642
            self.into_contextual_keyword()
            self.state = 1643
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Combined_join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Join_contextual_keywordContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def on_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.On_contextual_keywordContext,0)


        def equals_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Equals_contextual_keywordContext,0)


        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def into_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Into_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_combined_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombined_join_clause" ):
                listener.enterCombined_join_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombined_join_clause" ):
                listener.exitCombined_join_clause(self)




    def combined_join_clause(self):

        localctx = CSharp4Parser.Combined_join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_combined_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.join_contextual_keyword()
            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1646
                self.any_type()


            self.state = 1649
            self.identifier()
            self.state = 1650
            self.match(CSharp4Parser.IN)
            self.state = 1651
            self.expression()
            self.state = 1652
            self.on_contextual_keyword()
            self.state = 1653
            self.expression()
            self.state = 1654
            self.equals_contextual_keyword()
            self.state = 1655
            self.expression()
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.INTO:
                self.state = 1656
                self.into_contextual_keyword()
                self.state = 1657
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderby_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Orderby_contextual_keywordContext,0)


        def orderings(self):
            return self.getTypedRuleContext(CSharp4Parser.OrderingsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = CSharp4Parser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_orderby_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.orderby_contextual_keyword()
            self.state = 1662
            self.orderings()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.OrderingContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.OrderingContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_orderings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderings" ):
                listener.enterOrderings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderings" ):
                listener.exitOrderings(self)




    def orderings(self):

        localctx = CSharp4Parser.OrderingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_orderings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.ordering()
            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1665
                self.match(CSharp4Parser.COMMA)
                self.state = 1666
                self.ordering()
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def ordering_direction(self):
            return self.getTypedRuleContext(CSharp4Parser.Ordering_directionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering" ):
                listener.enterOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering" ):
                listener.exitOrdering(self)




    def ordering(self):

        localctx = CSharp4Parser.OrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.expression()
            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ASCENDING or _la==CSharp4Parser.DESCENDING:
                self.state = 1673
                self.ordering_direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_directionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ascending_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Ascending_contextual_keywordContext,0)


        def descending_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Descending_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_ordering_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_direction" ):
                listener.enterOrdering_direction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_direction" ):
                listener.exitOrdering_direction(self)




    def ordering_direction(self):

        localctx = CSharp4Parser.Ordering_directionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_ordering_direction)
        try:
            self.state = 1678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ASCENDING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1676
                self.ascending_contextual_keyword()
                pass
            elif token in [CSharp4Parser.DESCENDING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.descending_contextual_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Select_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Group_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_select_or_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_group_clause" ):
                listener.enterSelect_or_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_group_clause" ):
                listener.exitSelect_or_group_clause(self)




    def select_or_group_clause(self):

        localctx = CSharp4Parser.Select_or_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_select_or_group_clause)
        try:
            self.state = 1682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1680
                self.select_clause()
                pass
            elif token in [CSharp4Parser.GROUP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1681
                self.group_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Select_contextual_keywordContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_clause" ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_clause" ):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = CSharp4Parser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_select_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.select_contextual_keyword()
            self.state = 1685
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Group_contextual_keywordContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,i)


        def by_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.By_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_clause" ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_clause" ):
                listener.exitGroup_clause(self)




    def group_clause(self):

        localctx = CSharp4Parser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.group_contextual_keyword()
            self.state = 1688
            self.expression()
            self.state = 1689
            self.by_contextual_keyword()
            self.state = 1690
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_continuationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Into_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def query_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_query_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_continuation" ):
                listener.enterQuery_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_continuation" ):
                listener.exitQuery_continuation(self)




    def query_continuation(self):

        localctx = CSharp4Parser.Query_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_query_continuation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.into_contextual_keyword()
            self.state = 1693
            self.identifier()
            self.state = 1694
            self.query_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Assignment_operatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CSharp4Parser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.unary_expression()
            self.state = 1697
            self.assignment_operator()
            self.state = 1698
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def OP_ADD_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_ADD_ASSIGNMENT, 0)

        def OP_SUB_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_SUB_ASSIGNMENT, 0)

        def OP_MULT_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_MULT_ASSIGNMENT, 0)

        def OP_DIV_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_DIV_ASSIGNMENT, 0)

        def OP_MOD_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_MOD_ASSIGNMENT, 0)

        def OP_AND_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_AND_ASSIGNMENT, 0)

        def OP_OR_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_OR_ASSIGNMENT, 0)

        def OP_XOR_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_XOR_ASSIGNMENT, 0)

        def OP_LEFT_SHIFT_ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT, 0)

        def right_shift_assignment(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_shift_assignmentContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = CSharp4Parser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_assignment_operator)
        try:
            self.state = 1711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1700
                self.match(CSharp4Parser.ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_ADD_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1701
                self.match(CSharp4Parser.OP_ADD_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_SUB_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1702
                self.match(CSharp4Parser.OP_SUB_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_MULT_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1703
                self.match(CSharp4Parser.OP_MULT_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_DIV_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1704
                self.match(CSharp4Parser.OP_DIV_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_MOD_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1705
                self.match(CSharp4Parser.OP_MOD_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_AND_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1706
                self.match(CSharp4Parser.OP_AND_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_OR_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1707
                self.match(CSharp4Parser.OP_OR_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_XOR_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1708
                self.match(CSharp4Parser.OP_XOR_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1709
                self.match(CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT)
                pass
            elif token in [CSharp4Parser.GT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1710
                self.right_shift_assignment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(CSharp4Parser.AssignmentContext,0)


        def non_assignment_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Non_assignment_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CSharp4Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_expression)
        try:
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1713
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1714
                self.non_assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_assignment_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Lambda_expressionContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Query_expressionContext,0)


        def conditional_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Conditional_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_non_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_assignment_expression" ):
                listener.enterNon_assignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_assignment_expression" ):
                listener.exitNon_assignment_expression(self)




    def non_assignment_expression(self):

        localctx = CSharp4Parser.Non_assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_non_assignment_expression)
        try:
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.lambda_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.query_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1719
                self.conditional_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = CSharp4Parser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_constant_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_boolean_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_expression" ):
                listener.enterBoolean_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_expression" ):
                listener.exitBoolean_expression(self)




    def boolean_expression(self):

        localctx = CSharp4Parser.Boolean_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_boolean_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Labeled_statementContext,0)


        def declaration_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Declaration_statementContext,0)


        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CSharp4Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_statement)
        try:
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1726
                self.labeled_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1727
                self.declaration_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1728
                self.embedded_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Embedded_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement" ):
                listener.enterEmbedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement" ):
                listener.exitEmbedded_statement(self)




    def embedded_statement(self):

        localctx = CSharp4Parser.Embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_embedded_statement)
        try:
            self.state = 1733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1731
                self.block()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GOTO, CSharp4Parser.GROUP, CSharp4Parser.IF, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.WHERE, CSharp4Parser.WHILE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.SEMICOLON, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1732
                self.simple_embedded_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_embedded_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def empty_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Empty_statementContext,0)


        def expression_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Expression_statementContext,0)


        def selection_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Selection_statementContext,0)


        def iteration_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Iteration_statementContext,0)


        def jump_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Jump_statementContext,0)


        def try_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Try_statementContext,0)


        def checked_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Checked_statementContext,0)


        def unchecked_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Unchecked_statementContext,0)


        def lock_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Lock_statementContext,0)


        def using_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_statementContext,0)


        def yield_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Yield_statementContext,0)


        def embedded_statement_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statement_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_simple_embedded_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_embedded_statement" ):
                listener.enterSimple_embedded_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_embedded_statement" ):
                listener.exitSimple_embedded_statement(self)




    def simple_embedded_statement(self):

        localctx = CSharp4Parser.Simple_embedded_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_simple_embedded_statement)
        try:
            self.state = 1747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.empty_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.expression_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.selection_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1738
                self.iteration_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1739
                self.jump_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1740
                self.try_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1741
                self.checked_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1742
                self.unchecked_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1743
                self.lock_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1744
                self.using_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1745
                self.yield_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1746
                self.embedded_statement_unsafe()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = CSharp4Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BREAK - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.CONST - 10)) | (1 << (CSharp4Parser.CONTINUE - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DO - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FIXED - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FOR - 10)) | (1 << (CSharp4Parser.FOREACH - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GOTO - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.IF - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LOCK - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.RETURN - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.SWITCH - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.THROW - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TRY - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.UNSAFE - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.USING - 78)) | (1 << (CSharp4Parser.VOID - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.WHILE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_BRACE - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.SEMICOLON - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 1750
                self.statement_list()


            self.state = 1753
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.StatementContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)




    def statement_list(self):

        localctx = CSharp4Parser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_statement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1755
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 1758 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Empty_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = CSharp4Parser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Labeled_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(CSharp4Parser.StatementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_labeled_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_statement" ):
                listener.enterLabeled_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_statement" ):
                listener.exitLabeled_statement(self)




    def labeled_statement(self):

        localctx = CSharp4Parser.Labeled_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_labeled_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.identifier()
            self.state = 1763
            self.match(CSharp4Parser.COLON)
            self.state = 1764
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declarationContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def local_constant_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_constant_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_declaration_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_statement" ):
                listener.enterDeclaration_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_statement" ):
                listener.exitDeclaration_statement(self)




    def declaration_statement(self):

        localctx = CSharp4Parser.Declaration_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_declaration_statement)
        try:
            self.state = 1772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.local_variable_declaration()
                self.state = 1767
                self.match(CSharp4Parser.SEMICOLON)
                pass
            elif token in [CSharp4Parser.CONST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1769
                self.local_constant_declaration()
                self.state = 1770
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None # Local_variable_typeContext

        def local_variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declaratorsContext,0)


        def local_variable_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declaration" ):
                listener.enterLocal_variable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declaration" ):
                listener.exitLocal_variable_declaration(self)




    def local_variable_declaration(self):

        localctx = CSharp4Parser.Local_variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_local_variable_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1774
            localctx.t = self.local_variable_type()
            self.state = 1775
            self.local_variable_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_type" ):
                listener.enterLocal_variable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_type" ):
                listener.exitLocal_variable_type(self)




    def local_variable_type(self):

        localctx = CSharp4Parser.Local_variable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_local_variable_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Local_variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Local_variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarators" ):
                listener.enterLocal_variable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarators" ):
                listener.exitLocal_variable_declarators(self)




    def local_variable_declarators(self):

        localctx = CSharp4Parser.Local_variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_local_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.local_variable_declarator()
            self.state = 1784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1780
                self.match(CSharp4Parser.COMMA)
                self.state = 1781
                self.local_variable_declarator()
                self.state = 1786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def local_variable_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_declarator" ):
                listener.enterLocal_variable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_declarator" ):
                listener.exitLocal_variable_declarator(self)




    def local_variable_declarator(self):

        localctx = CSharp4Parser.Local_variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_local_variable_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.identifier()
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ASSIGNMENT:
                self.state = 1788
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 1789
                self.local_variable_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def local_variable_initializer_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_initializer_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer" ):
                listener.enterLocal_variable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer" ):
                listener.exitLocal_variable_initializer(self)




    def local_variable_initializer(self):

        localctx = CSharp4Parser.Local_variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_local_variable_initializer)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1792
                self.expression()
                pass
            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.array_initializer()
                pass
            elif token in [CSharp4Parser.STACKALLOC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1794
                self.local_variable_initializer_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_constant_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_declaratorsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_constant_declaration" ):
                listener.enterLocal_constant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_constant_declaration" ):
                listener.exitLocal_constant_declaration(self)




    def local_constant_declaration(self):

        localctx = CSharp4Parser.Local_constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_local_constant_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.match(CSharp4Parser.CONST)
            self.state = 1798
            self.any_type()
            self.state = 1799
            self.constant_declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_expressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_expression_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_statement" ):
                listener.enterExpression_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_statement" ):
                listener.exitExpression_statement(self)




    def expression_statement(self):

        localctx = CSharp4Parser.Expression_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_expression_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.statement_expression()
            self.state = 1802
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_expression" ):
                listener.enterStatement_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_expression" ):
                listener.exitStatement_expression(self)




    def statement_expression(self):

        localctx = CSharp4Parser.Statement_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_statement_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selection_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.If_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_selection_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_statement" ):
                listener.enterSelection_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_statement" ):
                listener.exitSelection_statement(self)




    def selection_statement(self):

        localctx = CSharp4Parser.Selection_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_selection_statement)
        try:
            self.state = 1808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1806
                self.if_statement()
                pass
            elif token in [CSharp4Parser.SWITCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1807
                self.switch_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CSharp4Parser.RULE_if_body

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfBodyBlockContext(If_bodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharp4Parser.If_bodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBodyBlock" ):
                listener.enterIfBodyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBodyBlock" ):
                listener.exitIfBodyBlock(self)


    class IfBodySingleContext(If_bodyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CSharp4Parser.If_bodyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simple_embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_embedded_statementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBodySingle" ):
                listener.enterIfBodySingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBodySingle" ):
                listener.exitIfBodySingle(self)



    def if_body(self):

        localctx = CSharp4Parser.If_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_if_body)
        try:
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                localctx = CSharp4Parser.IfBodyBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1810
                self.block()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GOTO, CSharp4Parser.GROUP, CSharp4Parser.IF, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.WHERE, CSharp4Parser.WHILE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.SEMICOLON, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                localctx = CSharp4Parser.IfBodySingleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1811
                self.simple_embedded_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CSharp4Parser.IF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def if_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.If_bodyContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.If_bodyContext,i)


        def ELSE(self):
            return self.getToken(CSharp4Parser.ELSE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CSharp4Parser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(CSharp4Parser.IF)
            self.state = 1815
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1816
            self.boolean_expression()
            self.state = 1817
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1818
            self.if_body()
            self.state = 1821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1819
                self.match(CSharp4Parser.ELSE)
                self.state = 1820
                self.if_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(CSharp4Parser.SWITCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def switch_block(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_blockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = CSharp4Parser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_switch_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(CSharp4Parser.SWITCH)
            self.state = 1824
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1825
            self.expression()
            self.state = 1826
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1827
            self.switch_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def switch_sections(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_sectionsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_block" ):
                listener.enterSwitch_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_block" ):
                listener.exitSwitch_block(self)




    def switch_block(self):

        localctx = CSharp4Parser.Switch_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_switch_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.CASE or _la==CSharp4Parser.DEFAULT:
                self.state = 1830
                self.switch_sections()


            self.state = 1833
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Switch_sectionContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_sections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_sections" ):
                listener.enterSwitch_sections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_sections" ):
                listener.exitSwitch_sections(self)




    def switch_sections(self):

        localctx = CSharp4Parser.Switch_sectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_switch_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.switch_section()
            self.state = 1839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.CASE or _la==CSharp4Parser.DEFAULT:
                self.state = 1836
                self.switch_section()
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_labels(self):
            return self.getTypedRuleContext(CSharp4Parser.Switch_labelsContext,0)


        def statement_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = CSharp4Parser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self.switch_labels()
            self.state = 1843
            self.statement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_labelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Switch_labelContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Switch_labelContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_labels" ):
                listener.enterSwitch_labels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_labels" ):
                listener.exitSwitch_labels(self)




    def switch_labels(self):

        localctx = CSharp4Parser.Switch_labelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_switch_labels)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.switch_label()
            self.state = 1849
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1846
                    self.switch_label() 
                self.state = 1851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_switch_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_label" ):
                listener.enterSwitch_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_label" ):
                listener.exitSwitch_label(self)




    def switch_label(self):

        localctx = CSharp4Parser.Switch_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_switch_label)
        try:
            self.state = 1858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1852
                self.match(CSharp4Parser.CASE)
                self.state = 1853
                self.constant_expression()
                self.state = 1854
                self.match(CSharp4Parser.COLON)
                pass
            elif token in [CSharp4Parser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1856
                self.match(CSharp4Parser.DEFAULT)
                self.state = 1857
                self.match(CSharp4Parser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Iteration_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def while_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.While_statementContext,0)


        def do_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Do_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.For_statementContext,0)


        def foreach_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Foreach_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_iteration_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteration_statement" ):
                listener.enterIteration_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteration_statement" ):
                listener.exitIteration_statement(self)




    def iteration_statement(self):

        localctx = CSharp4Parser.Iteration_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_iteration_statement)
        try:
            self.state = 1864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1860
                self.while_statement()
                pass
            elif token in [CSharp4Parser.DO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.do_statement()
                pass
            elif token in [CSharp4Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1862
                self.for_statement()
                pass
            elif token in [CSharp4Parser.FOREACH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1863
                self.foreach_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = CSharp4Parser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(CSharp4Parser.WHILE)
            self.state = 1867
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1868
            self.boolean_expression()
            self.state = 1869
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1870
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(CSharp4Parser.DO, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_do_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement" ):
                listener.enterDo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement" ):
                listener.exitDo_statement(self)




    def do_statement(self):

        localctx = CSharp4Parser.Do_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_do_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.match(CSharp4Parser.DO)
            self.state = 1873
            self.embedded_statement()
            self.state = 1874
            self.match(CSharp4Parser.WHILE)
            self.state = 1875
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1876
            self.boolean_expression()
            self.state = 1877
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1878
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CSharp4Parser.FOR, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.SEMICOLON)
            else:
                return self.getToken(CSharp4Parser.SEMICOLON, i)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def for_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.For_initializerContext,0)


        def for_condition(self):
            return self.getTypedRuleContext(CSharp4Parser.For_conditionContext,0)


        def for_iterator(self):
            return self.getTypedRuleContext(CSharp4Parser.For_iteratorContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = CSharp4Parser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            self.match(CSharp4Parser.FOR)
            self.state = 1881
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.VOID - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 1882
                self.for_initializer()


            self.state = 1885
            self.match(CSharp4Parser.SEMICOLON)
            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 1886
                self.for_condition()


            self.state = 1889
            self.match(CSharp4Parser.SEMICOLON)
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 1890
                self.for_iterator()


            self.state = 1893
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1894
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declarationContext,0)


        def statement_expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_expression_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_initializer" ):
                listener.enterFor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_initializer" ):
                listener.exitFor_initializer(self)




    def for_initializer(self):

        localctx = CSharp4Parser.For_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_for_initializer)
        try:
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1896
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1897
                self.statement_expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_condition" ):
                listener.enterFor_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_condition" ):
                listener.exitFor_condition(self)




    def for_condition(self):

        localctx = CSharp4Parser.For_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_for_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.boolean_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_iteratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_expression_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Statement_expression_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_for_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_iterator" ):
                listener.enterFor_iterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_iterator" ):
                listener.exitFor_iterator(self)




    def for_iterator(self):

        localctx = CSharp4Parser.For_iteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_for_iterator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.statement_expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Statement_expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Statement_expressionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Statement_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_statement_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_expression_list" ):
                listener.enterStatement_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_expression_list" ):
                listener.exitStatement_expression_list(self)




    def statement_expression_list(self):

        localctx = CSharp4Parser.Statement_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_statement_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.statement_expression()
            self.state = 1909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 1905
                self.match(CSharp4Parser.COMMA)
                self.state = 1906
                self.statement_expression()
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreach_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(CSharp4Parser.FOREACH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def local_variable_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_foreach_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach_statement" ):
                listener.enterForeach_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach_statement" ):
                listener.exitForeach_statement(self)




    def foreach_statement(self):

        localctx = CSharp4Parser.Foreach_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_foreach_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.match(CSharp4Parser.FOREACH)
            self.state = 1913
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1914
            self.local_variable_type()
            self.state = 1915
            self.identifier()
            self.state = 1916
            self.match(CSharp4Parser.IN)
            self.state = 1917
            self.expression()
            self.state = 1918
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1919
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Jump_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Goto_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Throw_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_jump_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJump_statement" ):
                listener.enterJump_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJump_statement" ):
                listener.exitJump_statement(self)




    def jump_statement(self):

        localctx = CSharp4Parser.Jump_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_jump_statement)
        try:
            self.state = 1926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1921
                self.break_statement()
                pass
            elif token in [CSharp4Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.continue_statement()
                pass
            elif token in [CSharp4Parser.GOTO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1923
                self.goto_statement()
                pass
            elif token in [CSharp4Parser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1924
                self.return_statement()
                pass
            elif token in [CSharp4Parser.THROW]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1925
                self.throw_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = CSharp4Parser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.match(CSharp4Parser.BREAK)
            self.state = 1929
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(CSharp4Parser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = CSharp4Parser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(CSharp4Parser.CONTINUE)
            self.state = 1932
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(CSharp4Parser.GOTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)




    def goto_statement(self):

        localctx = CSharp4Parser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_goto_statement)
        try:
            self.state = 1946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1934
                self.match(CSharp4Parser.GOTO)
                self.state = 1935
                self.identifier()
                self.state = 1936
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1938
                self.match(CSharp4Parser.GOTO)
                self.state = 1939
                self.match(CSharp4Parser.CASE)
                self.state = 1940
                self.constant_expression()
                self.state = 1941
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1943
                self.match(CSharp4Parser.GOTO)
                self.state = 1944
                self.match(CSharp4Parser.DEFAULT)
                self.state = 1945
                self.match(CSharp4Parser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = CSharp4Parser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(CSharp4Parser.RETURN)
            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 1949
                self.expression()


            self.state = 1952
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Throw_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(CSharp4Parser.THROW, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_throw_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)




    def throw_statement(self):

        localctx = CSharp4Parser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_throw_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1954
            self.match(CSharp4Parser.THROW)
            self.state = 1956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 1955
                self.expression()


            self.state = 1958
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(CSharp4Parser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Catch_clausesContext,0)


        def finally_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.Finally_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_try_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_statement" ):
                listener.enterTry_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_statement" ):
                listener.exitTry_statement(self)




    def try_statement(self):

        localctx = CSharp4Parser.Try_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_try_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.match(CSharp4Parser.TRY)
            self.state = 1961
            self.block()
            self.state = 1963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.CATCH:
                self.state = 1962
                self.catch_clauses()


            self.state = 1966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.FINALLY:
                self.state = 1965
                self.finally_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Catch_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Specific_catch_clausesContext,0)


        def general_catch_clause(self):
            return self.getTypedRuleContext(CSharp4Parser.General_catch_clauseContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = CSharp4Parser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_catch_clauses)
        self._la = 0 # Token type
        try:
            self.state = 1973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1968
                self.specific_catch_clauses()
                self.state = 1970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.CATCH:
                    self.state = 1969
                    self.general_catch_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1972
                self.general_catch_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Specific_catch_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specific_catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Specific_catch_clauseContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Specific_catch_clauseContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_specific_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clauses" ):
                listener.enterSpecific_catch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clauses" ):
                listener.exitSpecific_catch_clauses(self)




    def specific_catch_clauses(self):

        localctx = CSharp4Parser.Specific_catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_specific_catch_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.specific_catch_clause()
            self.state = 1979
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1976
                    self.specific_catch_clause() 
                self.state = 1981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Specific_catch_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_specific_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecific_catch_clause" ):
                listener.enterSpecific_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecific_catch_clause" ):
                listener.exitSpecific_catch_clause(self)




    def specific_catch_clause(self):

        localctx = CSharp4Parser.Specific_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_specific_catch_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(CSharp4Parser.CATCH)
            self.state = 1983
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 1984
            self.class_type()
            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)))) != 0):
                self.state = 1985
                self.identifier()


            self.state = 1988
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 1989
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_catch_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_general_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_catch_clause" ):
                listener.enterGeneral_catch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_catch_clause" ):
                listener.exitGeneral_catch_clause(self)




    def general_catch_clause(self):

        localctx = CSharp4Parser.General_catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_general_catch_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.match(CSharp4Parser.CATCH)
            self.state = 1992
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Finally_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(CSharp4Parser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = CSharp4Parser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(CSharp4Parser.FINALLY)
            self.state = 1995
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Checked_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_checked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecked_statement" ):
                listener.enterChecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecked_statement" ):
                listener.exitChecked_statement(self)




    def checked_statement(self):

        localctx = CSharp4Parser.Checked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_checked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(CSharp4Parser.CHECKED)
            self.state = 1998
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unchecked_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unchecked_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchecked_statement" ):
                listener.enterUnchecked_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchecked_statement" ):
                listener.exitUnchecked_statement(self)




    def unchecked_statement(self):

        localctx = CSharp4Parser.Unchecked_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_unchecked_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(CSharp4Parser.UNCHECKED)
            self.state = 2001
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CSharp4Parser.LOCK, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_lock_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_statement" ):
                listener.enterLock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_statement" ):
                listener.exitLock_statement(self)




    def lock_statement(self):

        localctx = CSharp4Parser.Lock_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_lock_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.match(CSharp4Parser.LOCK)
            self.state = 2004
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2005
            self.expression()
            self.state = 2006
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2007
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def resource_acquisition(self):
            return self.getTypedRuleContext(CSharp4Parser.Resource_acquisitionContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_statement" ):
                listener.enterUsing_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_statement" ):
                listener.exitUsing_statement(self)




    def using_statement(self):

        localctx = CSharp4Parser.Using_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_using_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.match(CSharp4Parser.USING)
            self.state = 2010
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2011
            self.resource_acquisition()
            self.state = 2012
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2013
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Resource_acquisitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_variable_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Local_variable_declarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_resource_acquisition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_acquisition" ):
                listener.enterResource_acquisition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_acquisition" ):
                listener.exitResource_acquisition(self)




    def resource_acquisition(self):

        localctx = CSharp4Parser.Resource_acquisitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_resource_acquisition)
        try:
            self.state = 2017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2015
                self.local_variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2016
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Yield_contextual_keywordContext,0)


        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_yield_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_statement" ):
                listener.enterYield_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_statement" ):
                listener.exitYield_statement(self)




    def yield_statement(self):

        localctx = CSharp4Parser.Yield_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_yield_statement)
        try:
            self.state = 2028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2019
                self.yield_contextual_keyword()
                self.state = 2020
                self.match(CSharp4Parser.RETURN)
                self.state = 2021
                self.expression()
                self.state = 2022
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2024
                self.yield_contextual_keyword()
                self.state = 2025
                self.match(CSharp4Parser.BREAK)
                self.state = 2026
                self.match(CSharp4Parser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CSharp4Parser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(CSharp4Parser.BYTE_ORDER_MARK, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_directivesContext,0)


        def global_attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Global_attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Global_attribute_sectionContext,i)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = CSharp4Parser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.BYTE_ORDER_MARK:
                self.state = 2030
                self.match(CSharp4Parser.BYTE_ORDER_MARK)


            self.state = 2034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 2033
                self.extern_alias_directives()


            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.USING:
                self.state = 2036
                self.using_directives()


            self.state = 2042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2039
                    self.global_attribute_section() 
                self.state = 2044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

            self.state = 2046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NAMESPACE) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PARTIAL - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.READONLY - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.STRUCT - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)) | (1 << (CSharp4Parser.VOLATILE - 70)) | (1 << (CSharp4Parser.OPEN_BRACKET - 70)))) != 0):
                self.state = 2045
                self.namespace_member_declarations()


            self.state = 2048
            self.match(CSharp4Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qi = None # Qualified_identifierContext

        def NAMESPACE(self):
            return self.getToken(CSharp4Parser.NAMESPACE, 0)

        def namespace_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_bodyContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Qualified_identifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_declaration" ):
                listener.enterNamespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_declaration" ):
                listener.exitNamespace_declaration(self)




    def namespace_declaration(self):

        localctx = CSharp4Parser.Namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.match(CSharp4Parser.NAMESPACE)
            self.state = 2051
            localctx.qi = self.qualified_identifier()
            self.state = 2052
            self.namespace_body()
            self.state = 2054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2053
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)




    def qualified_identifier(self):

        localctx = CSharp4Parser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_qualified_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.identifier()
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.DOT:
                self.state = 2057
                self.match(CSharp4Parser.DOT)
                self.state = 2058
                self.identifier()
                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def extern_alias_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Extern_alias_directivesContext,0)


        def using_directives(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_directivesContext,0)


        def namespace_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_body" ):
                listener.enterNamespace_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_body" ):
                listener.exitNamespace_body(self)




    def namespace_body(self):

        localctx = CSharp4Parser.Namespace_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_namespace_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 2065
                self.extern_alias_directives()


            self.state = 2069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.USING:
                self.state = 2068
                self.using_directives()


            self.state = 2072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NAMESPACE) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PARTIAL - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.READONLY - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.STRUCT - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)) | (1 << (CSharp4Parser.VOLATILE - 70)) | (1 << (CSharp4Parser.OPEN_BRACKET - 70)))) != 0):
                self.state = 2071
                self.namespace_member_declarations()


            self.state = 2074
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extern_alias_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extern_alias_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Extern_alias_directiveContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Extern_alias_directiveContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_extern_alias_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directives" ):
                listener.enterExtern_alias_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directives" ):
                listener.exitExtern_alias_directives(self)




    def extern_alias_directives(self):

        localctx = CSharp4Parser.Extern_alias_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_extern_alias_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2076
                    self.extern_alias_directive()

                else:
                    raise NoViableAltException(self)
                self.state = 2079 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extern_alias_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def alias_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Alias_contextual_keywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_extern_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtern_alias_directive" ):
                listener.enterExtern_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtern_alias_directive" ):
                listener.exitExtern_alias_directive(self)




    def extern_alias_directive(self):

        localctx = CSharp4Parser.Extern_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_extern_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.match(CSharp4Parser.EXTERN)
            self.state = 2082
            self.alias_contextual_keyword()
            self.state = 2083
            self.identifier()
            self.state = 2084
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Using_directiveContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Using_directiveContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directives" ):
                listener.enterUsing_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directives" ):
                listener.exitUsing_directives(self)




    def using_directives(self):

        localctx = CSharp4Parser.Using_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_using_directives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2086
                self.using_directive()
                self.state = 2089 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CSharp4Parser.USING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def using_alias_directive(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_alias_directiveContext,0)


        def using_namespace_directive(self):
            return self.getTypedRuleContext(CSharp4Parser.Using_namespace_directiveContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_directive" ):
                listener.enterUsing_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_directive" ):
                listener.exitUsing_directive(self)




    def using_directive(self):

        localctx = CSharp4Parser.Using_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_using_directive)
        try:
            self.state = 2093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2091
                self.using_alias_directive()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2092
                self.using_namespace_directive()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_alias_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def namespace_or_type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_or_type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_alias_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_alias_directive" ):
                listener.enterUsing_alias_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_alias_directive" ):
                listener.exitUsing_alias_directive(self)




    def using_alias_directive(self):

        localctx = CSharp4Parser.Using_alias_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_using_alias_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.match(CSharp4Parser.USING)
            self.state = 2096
            self.identifier()
            self.state = 2097
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 2098
            self.namespace_or_type_name()
            self.state = 2099
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_namespace_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def namespace_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_using_namespace_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_namespace_directive" ):
                listener.enterUsing_namespace_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_namespace_directive" ):
                listener.exitUsing_namespace_directive(self)




    def using_namespace_directive(self):

        localctx = CSharp4Parser.Using_namespace_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_using_namespace_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2101
            self.match(CSharp4Parser.USING)
            self.state = 2102
            self.namespace_name()
            self.state = 2103
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Namespace_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Namespace_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declarations" ):
                listener.enterNamespace_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declarations" ):
                listener.exitNamespace_member_declarations(self)




    def namespace_member_declarations(self):

        localctx = CSharp4Parser.Namespace_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_namespace_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2105
                self.namespace_member_declaration()
                self.state = 2108 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NAMESPACE) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PARTIAL - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.READONLY - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.STRUCT - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)) | (1 << (CSharp4Parser.VOLATILE - 70)) | (1 << (CSharp4Parser.OPEN_BRACKET - 70)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Namespace_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_namespace_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_member_declaration" ):
                listener.enterNamespace_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_member_declaration" ):
                listener.exitNamespace_member_declaration(self)




    def namespace_member_declaration(self):

        localctx = CSharp4Parser.Namespace_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_namespace_member_declaration)
        try:
            self.state = 2112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NAMESPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2110
                self.namespace_declaration()
                pass
            elif token in [CSharp4Parser.ABSTRACT, CSharp4Parser.CLASS, CSharp4Parser.DELEGATE, CSharp4Parser.ENUM, CSharp4Parser.EXTERN, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.NEW, CSharp4Parser.OVERRIDE, CSharp4Parser.PARTIAL, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.SEALED, CSharp4Parser.STATIC, CSharp4Parser.STRUCT, CSharp4Parser.UNSAFE, CSharp4Parser.VIRTUAL, CSharp4Parser.VOLATILE, CSharp4Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2111
                self.type_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_definitionContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = CSharp4Parser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2114
                self.attributes()


            self.state = 2118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PARTIAL - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.READONLY - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)) | (1 << (CSharp4Parser.VOLATILE - 70)))) != 0):
                self.state = 2117
                self.all_member_modifiers()


            self.state = 2125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.CLASS]:
                self.state = 2120
                self.class_definition()
                pass
            elif token in [CSharp4Parser.STRUCT]:
                self.state = 2121
                self.struct_definition()
                pass
            elif token in [CSharp4Parser.INTERFACE]:
                self.state = 2122
                self.interface_definition()
                pass
            elif token in [CSharp4Parser.ENUM]:
                self.state = 2123
                self.enum_definition()
                pass
            elif token in [CSharp4Parser.DELEGATE]:
                self.state = 2124
                self.delegate_definition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_alias_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharp4Parser.DOUBLE_COLON, 0)

        def type_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_argument_list_optContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_qualified_alias_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_alias_member" ):
                listener.enterQualified_alias_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_alias_member" ):
                listener.exitQualified_alias_member(self)




    def qualified_alias_member(self):

        localctx = CSharp4Parser.Qualified_alias_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_qualified_alias_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.identifier()
            self.state = 2128
            self.match(CSharp4Parser.DOUBLE_COLON)
            self.state = 2129
            self.identifier()
            self.state = 2130
            self.type_argument_list_opt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def class_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_declaration" ):
                listener.enterClass_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_declaration" ):
                listener.exitClass_declaration(self)




    def class_declaration(self):

        localctx = CSharp4Parser.Class_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_class_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2132
                self.attributes()


            self.state = 2136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CSharp4Parser.PRIVATE - 73)) | (1 << (CSharp4Parser.PROTECTED - 73)) | (1 << (CSharp4Parser.PUBLIC - 73)) | (1 << (CSharp4Parser.SEALED - 73)) | (1 << (CSharp4Parser.STATIC - 73)) | (1 << (CSharp4Parser.UNSAFE - 73)))) != 0):
                self.state = 2135
                self.class_modifiers()


            self.state = 2139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.PARTIAL:
                self.state = 2138
                self.partial_contextual_keyword()


            self.state = 2141
            self.match(CSharp4Parser.CLASS)
            self.state = 2142
            self.identifier()
            self.state = 2144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2143
                self.type_parameter_list()


            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2146
                self.class_base()


            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2149
                self.type_parameter_constraints_clauses()


            self.state = 2152
            self.class_body()
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2153
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Class_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Class_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifiers" ):
                listener.enterClass_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifiers" ):
                listener.exitClass_modifiers(self)




    def class_modifiers(self):

        localctx = CSharp4Parser.Class_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_class_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.class_modifier()
            self.state = 2160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CSharp4Parser.PRIVATE - 73)) | (1 << (CSharp4Parser.PROTECTED - 73)) | (1 << (CSharp4Parser.PUBLIC - 73)) | (1 << (CSharp4Parser.SEALED - 73)) | (1 << (CSharp4Parser.STATIC - 73)) | (1 << (CSharp4Parser.UNSAFE - 73)))) != 0):
                self.state = 2157
                self.class_modifier()
                self.state = 2162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def class_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier" ):
                listener.enterClass_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier" ):
                listener.exitClass_modifier(self)




    def class_modifier(self):

        localctx = CSharp4Parser.Class_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_class_modifier)
        try:
            self.state = 2172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2165
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2166
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2167
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2168
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2169
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2170
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2171
                self.class_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def type_parameters(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parametersContext,0)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_list" ):
                listener.enterType_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_list" ):
                listener.exitType_parameter_list(self)




    def type_parameter_list(self):

        localctx = CSharp4Parser.Type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_type_parameter_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            self.match(CSharp4Parser.LT)
            self.state = 2175
            self.type_parameters()
            self.state = 2176
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type_parameterContext,i)


        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameters" ):
                listener.enterType_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameters" ):
                listener.exitType_parameters(self)




    def type_parameters(self):

        localctx = CSharp4Parser.Type_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_type_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2178
                self.attributes()


            self.state = 2181
            self.type_parameter()
            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2182
                self.match(CSharp4Parser.COMMA)
                self.state = 2184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 2183
                    self.attributes()


                self.state = 2186
                self.type_parameter()
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter" ):
                listener.enterType_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter" ):
                listener.exitType_parameter(self)




    def type_parameter(self):

        localctx = CSharp4Parser.Type_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_type_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2192
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_baseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def class_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_typeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def interface_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_typeContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_base" ):
                listener.enterClass_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_base" ):
                listener.exitClass_base(self)




    def class_base(self):

        localctx = CSharp4Parser.Class_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_class_base)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.match(CSharp4Parser.COLON)
            self.state = 2195
            self.class_type()
            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2196
                self.match(CSharp4Parser.COMMA)
                self.state = 2197
                self.interface_type()
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_type_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type_list" ):
                listener.enterInterface_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type_list" ):
                listener.exitInterface_type_list(self)




    def interface_type_list(self):

        localctx = CSharp4Parser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            self.interface_type()
            self.state = 2208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2204
                self.match(CSharp4Parser.COMMA)
                self.state = 2205
                self.interface_type()
                self.state = 2210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_parameter_constraints_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter_constraints_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type_parameter_constraints_clauseContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clauseContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_parameter_constraints_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clauses" ):
                listener.enterType_parameter_constraints_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clauses" ):
                listener.exitType_parameter_constraints_clauses(self)




    def type_parameter_constraints_clauses(self):

        localctx = CSharp4Parser.Type_parameter_constraints_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_type_parameter_constraints_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.type_parameter_constraints_clause()
            self.state = 2215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.WHERE:
                self.state = 2212
                self.type_parameter_constraints_clause()
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_parameter_constraints_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def where_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Where_contextual_keywordContext,0)


        def type_parameter(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameterContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def type_parameter_constraints(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraintsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_parameter_constraints_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints_clause" ):
                listener.enterType_parameter_constraints_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints_clause" ):
                listener.exitType_parameter_constraints_clause(self)




    def type_parameter_constraints_clause(self):

        localctx = CSharp4Parser.Type_parameter_constraints_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_type_parameter_constraints_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.where_contextual_keyword()
            self.state = 2219
            self.type_parameter()
            self.state = 2220
            self.match(CSharp4Parser.COLON)
            self.state = 2221
            self.type_parameter_constraints()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_parameter_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_constraint(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_constraintContext,0)


        def primary_constraint(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_constraintContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def secondary_constraints(self):
            return self.getTypedRuleContext(CSharp4Parser.Secondary_constraintsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_parameter_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_parameter_constraints" ):
                listener.enterType_parameter_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_parameter_constraints" ):
                listener.exitType_parameter_constraints(self)




    def type_parameter_constraints(self):

        localctx = CSharp4Parser.Type_parameter_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_type_parameter_constraints)
        self._la = 0 # Token type
        try:
            self.state = 2233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2223
                self.constructor_constraint()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.CLASS, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2224
                self.primary_constraint()
                self.state = 2227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 2225
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2226
                    self.secondary_constraints()


                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 2229
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2230
                    self.constructor_constraint()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_typeContext,0)


        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_constraint" ):
                listener.enterPrimary_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_constraint" ):
                listener.exitPrimary_constraint(self)




    def primary_constraint(self):

        localctx = CSharp4Parser.Primary_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_primary_constraint)
        try:
            self.state = 2238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.class_type()
                pass
            elif token in [CSharp4Parser.CLASS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.match(CSharp4Parser.CLASS)
                pass
            elif token in [CSharp4Parser.STRUCT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2237
                self.match(CSharp4Parser.STRUCT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Secondary_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_secondary_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_constraints" ):
                listener.enterSecondary_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_constraints" ):
                listener.exitSecondary_constraints(self)




    def secondary_constraints(self):

        localctx = CSharp4Parser.Secondary_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_secondary_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.interface_type()
            self.state = 2245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2241
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2242
                    self.interface_type() 
                self.state = 2247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_constraint" ):
                listener.enterConstructor_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_constraint" ):
                listener.exitConstructor_constraint(self)




    def constructor_constraint(self):

        localctx = CSharp4Parser.Constructor_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_constructor_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self.match(CSharp4Parser.NEW)
            self.state = 2249
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2250
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def class_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = CSharp4Parser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_class_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2252
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.Pp_directive) | (1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OVERRIDE - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.PRIVATE - 65)) | (1 << (CSharp4Parser.PROTECTED - 65)) | (1 << (CSharp4Parser.PUBLIC - 65)) | (1 << (CSharp4Parser.READONLY - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SEALED - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STATIC - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.STRUCT - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.UNSAFE - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VIRTUAL - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.VOLATILE - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0) or _la==CSharp4Parser.TILDE:
                self.state = 2253
                self.class_member_declarations()


            self.state = 2256
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Class_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Class_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declarations" ):
                listener.enterClass_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declarations" ):
                listener.exitClass_member_declarations(self)




    def class_member_declarations(self):

        localctx = CSharp4Parser.Class_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_class_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2258
                self.class_member_declaration()
                self.state = 2261 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.Pp_directive) | (1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OVERRIDE - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.PRIVATE - 65)) | (1 << (CSharp4Parser.PROTECTED - 65)) | (1 << (CSharp4Parser.PUBLIC - 65)) | (1 << (CSharp4Parser.READONLY - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SEALED - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STATIC - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.STRUCT - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.UNSAFE - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VIRTUAL - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.VOLATILE - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0) or _la==CSharp4Parser.TILDE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Common_member_declarationContext,0)


        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def destructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.All_member_modifiersContext,0)


        def Pp_directive(self):
            return self.getToken(CSharp4Parser.Pp_directive, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member_declaration" ):
                listener.enterClass_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member_declaration" ):
                listener.exitClass_member_declaration(self)




    def class_member_declaration(self):

        localctx = CSharp4Parser.Class_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_class_member_declaration)
        self._la = 0 # Token type
        try:
            self.state = 2279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ABSTRACT, CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.DECIMAL, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.ENUM, CSharp4Parser.EQUALS, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.EXTERN, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.IMPLICIT, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.OVERRIDE, CSharp4Parser.PARTIAL, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SEALED, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STATIC, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.VIRTUAL, CSharp4Parser.VOID, CSharp4Parser.VOLATILE, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.OPEN_BRACKET, CSharp4Parser.TILDE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 2263
                    self.attributes()


                self.state = 2267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 2266
                    self.all_member_modifiers()


                self.state = 2276
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.DECIMAL, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.ENUM, CSharp4Parser.EQUALS, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.IMPLICIT, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                    self.state = 2269
                    self.common_member_declaration()
                    pass
                elif token in [CSharp4Parser.TILDE]:
                    self.state = 2270
                    self.match(CSharp4Parser.TILDE)
                    self.state = 2271
                    self.identifier()
                    self.state = 2272
                    self.match(CSharp4Parser.OPEN_PARENS)
                    self.state = 2273
                    self.match(CSharp4Parser.CLOSE_PARENS)
                    self.state = 2274
                    self.destructor_body()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CSharp4Parser.Pp_directive]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2278
                self.match(CSharp4Parser.Pp_directive)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_member_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None # All_member_modifierContext

        def all_member_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.All_member_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.All_member_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_all_member_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifiers" ):
                listener.enterAll_member_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifiers" ):
                listener.exitAll_member_modifiers(self)




    def all_member_modifiers(self):

        localctx = CSharp4Parser.All_member_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_all_member_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2281
                    localctx.m = self.all_member_modifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2284 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_member_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def READONLY(self):
            return self.getToken(CSharp4Parser.READONLY, 0)

        def VOLATILE(self):
            return self.getToken(CSharp4Parser.VOLATILE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_all_member_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_member_modifier" ):
                listener.enterAll_member_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_member_modifier" ):
                listener.exitAll_member_modifier(self)




    def all_member_modifier(self):

        localctx = CSharp4Parser.All_member_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_all_member_modifier)
        try:
            self.state = 2301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2286
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2287
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2288
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2289
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2290
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.READONLY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2291
                self.match(CSharp4Parser.READONLY)
                pass
            elif token in [CSharp4Parser.VOLATILE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2292
                self.match(CSharp4Parser.VOLATILE)
                pass
            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2293
                self.match(CSharp4Parser.VIRTUAL)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2294
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2295
                self.match(CSharp4Parser.OVERRIDE)
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2296
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2297
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2298
                self.match(CSharp4Parser.UNSAFE)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2299
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.PARTIAL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2300
                self.partial_contextual_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_declaration2Context,0)


        def typed_member_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Typed_member_declarationContext,0)


        def event_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_declaration2Context,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Conversion_operator_declaratorContext,0)


        def operator_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_bodyContext,0)


        def constructor_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_declaration2Context,0)


        def type_void(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_voidContext,0)


        def method_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_declaration2Context,0)


        def class_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_definitionContext,0)


        def struct_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_definitionContext,0)


        def interface_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_definitionContext,0)


        def enum_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_definitionContext,0)


        def delegate_definition(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_definitionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_common_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_member_declaration" ):
                listener.enterCommon_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_member_declaration" ):
                listener.exitCommon_member_declaration(self)




    def common_member_declaration(self):

        localctx = CSharp4Parser.Common_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_common_member_declaration)
        try:
            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2303
                self.constant_declaration2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2304
                self.typed_member_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2305
                self.event_declaration2()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2306
                self.conversion_operator_declarator()
                self.state = 2307
                self.operator_body()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2309
                self.constructor_declaration2()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2310
                self.type_void()
                self.state = 2311
                self.method_declaration2()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2313
                self.class_definition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2314
                self.struct_definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2315
                self.interface_definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2316
                self.enum_definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2317
                self.delegate_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Typed_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def interface_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_typeContext,0)


        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def indexer_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_declaration2Context,0)


        def method_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_declaration2Context,0)


        def property_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Property_declaration2Context,0)


        def operator_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_declaration2Context,0)


        def field_declaration2(self):
            return self.getTypedRuleContext(CSharp4Parser.Field_declaration2Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_typed_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyped_member_declaration" ):
                listener.enterTyped_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyped_member_declaration" ):
                listener.exitTyped_member_declaration(self)




    def typed_member_declaration(self):

        localctx = CSharp4Parser.Typed_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_typed_member_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.any_type()
            self.state = 2330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 2321
                self.interface_type()
                self.state = 2322
                self.match(CSharp4Parser.DOT)
                self.state = 2323
                self.indexer_declaration2()
                pass

            elif la_ == 2:
                self.state = 2325
                self.method_declaration2()
                pass

            elif la_ == 3:
                self.state = 2326
                self.property_declaration2()
                pass

            elif la_ == 4:
                self.state = 2327
                self.indexer_declaration2()
                pass

            elif la_ == 5:
                self.state = 2328
                self.operator_declaration2()
                pass

            elif la_ == 6:
                self.state = 2329
                self.field_declaration2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Constant_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Constant_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarators" ):
                listener.enterConstant_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarators" ):
                listener.exitConstant_declarators(self)




    def constant_declarators(self):

        localctx = CSharp4Parser.Constant_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_constant_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.constant_declarator()
            self.state = 2337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2333
                self.match(CSharp4Parser.COMMA)
                self.state = 2334
                self.constant_declarator()
                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declarator" ):
                listener.enterConstant_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declarator" ):
                listener.exitConstant_declarator(self)




    def constant_declarator(self):

        localctx = CSharp4Parser.Constant_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_constant_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.identifier()
            self.state = 2341
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 2342
            self.constant_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Variable_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarators" ):
                listener.enterVariable_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarators" ):
                listener.exitVariable_declarators(self)




    def variable_declarators(self):

        localctx = CSharp4Parser.Variable_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_variable_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.variable_declarator()
            self.state = 2349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2345
                self.match(CSharp4Parser.COMMA)
                self.state = 2346
                self.variable_declarator()
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def variable_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declarator" ):
                listener.enterVariable_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declarator" ):
                listener.exitVariable_declarator(self)




    def variable_declarator(self):

        localctx = CSharp4Parser.Variable_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_variable_declarator)
        try:
            self.state = 2357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2352
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2353
                self.identifier()
                self.state = 2354
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 2355
                self.variable_initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def array_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer" ):
                listener.enterVariable_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer" ):
                listener.exitVariable_initializer(self)




    def variable_initializer(self):

        localctx = CSharp4Parser.Variable_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_variable_initializer)
        try:
            self.state = 2361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FALSE, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INT, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STRING, CSharp4Parser.THIS, CSharp4Parser.TRUE, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.USHORT, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER, CSharp4Parser.INTEGER_LITERAL, CSharp4Parser.REAL_LITERAL, CSharp4Parser.CHARACTER_LITERAL, CSharp4Parser.STRING_LITERAL, CSharp4Parser.OPEN_PARENS, CSharp4Parser.PLUS, CSharp4Parser.MINUS, CSharp4Parser.STAR, CSharp4Parser.AMP, CSharp4Parser.BANG, CSharp4Parser.TILDE, CSharp4Parser.OP_INC, CSharp4Parser.OP_DEC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2359
                self.expression()
                pass
            elif token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2360
                self.array_initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_header(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_headerContext,0)


        def method_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)




    def method_declaration(self):

        localctx = CSharp4Parser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_method_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.method_header()
            self.state = 2364
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_headerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_typeContext,0)


        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def method_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_header" ):
                listener.enterMethod_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_header" ):
                listener.exitMethod_header(self)




    def method_header(self):

        localctx = CSharp4Parser.Method_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_method_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2366
                self.attributes()


            self.state = 2370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0):
                self.state = 2369
                self.method_modifiers()


            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2372
                self.partial_contextual_keyword()


            self.state = 2375
            self.return_type()
            self.state = 2376
            self.member_name()
            self.state = 2378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2377
                self.type_parameter_list()


            self.state = 2380
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 2381
                self.formal_parameter_list()


            self.state = 2384
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2385
                self.type_parameter_constraints_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Method_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Method_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifiers" ):
                listener.enterMethod_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifiers" ):
                listener.exitMethod_modifiers(self)




    def method_modifiers(self):

        localctx = CSharp4Parser.Method_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_method_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2388
                self.method_modifier()
                self.state = 2391 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def method_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifier" ):
                listener.enterMethod_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifier" ):
                listener.exitMethod_modifier(self)




    def method_modifier(self):

        localctx = CSharp4Parser.Method_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_method_modifier)
        try:
            self.state = 2405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2393
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2394
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2395
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2396
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2397
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2398
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2399
                self.match(CSharp4Parser.VIRTUAL)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2400
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2401
                self.match(CSharp4Parser.OVERRIDE)
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2402
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2403
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2404
                self.method_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)




    def return_type(self):

        localctx = CSharp4Parser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_return_type)
        try:
            self.state = 2409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2407
                self.any_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2408
                self.match(CSharp4Parser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)




    def member_name(self):

        localctx = CSharp4Parser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self.interface_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_body" ):
                listener.enterMethod_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_body" ):
                listener.exitMethod_body(self)




    def method_body(self):

        localctx = CSharp4Parser.Method_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_method_body)
        try:
            self.state = 2415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2413
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2414
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Formal_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_array(self):
            return self.getTypedRuleContext(CSharp4Parser.Parameter_arrayContext,0)


        def fixed_parameters(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_parametersContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_formal_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter_list" ):
                listener.enterFormal_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter_list" ):
                listener.exitFormal_parameter_list(self)




    def formal_parameter_list(self):

        localctx = CSharp4Parser.Formal_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_formal_parameter_list)
        self._la = 0 # Token type
        try:
            self.state = 2423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2417
                self.parameter_array()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2418
                self.fixed_parameters()
                self.state = 2421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 2419
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2420
                    self.parameter_array()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameters" ):
                listener.enterFixed_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameters" ):
                listener.exitFixed_parameters(self)




    def fixed_parameters(self):

        localctx = CSharp4Parser.Fixed_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_fixed_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            self.fixed_parameter()
            self.state = 2430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2426
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2427
                    self.fixed_parameter() 
                self.state = 2432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def parameter_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Parameter_modifierContext,0)


        def default_argument(self):
            return self.getTypedRuleContext(CSharp4Parser.Default_argumentContext,0)


        def arglist(self):
            return self.getTypedRuleContext(CSharp4Parser.ArglistContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_parameter" ):
                listener.enterFixed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_parameter" ):
                listener.exitFixed_parameter(self)




    def fixed_parameter(self):

        localctx = CSharp4Parser.Fixed_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_fixed_parameter)
        self._la = 0 # Token type
        try:
            self.state = 2445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 2433
                    self.attributes()


                self.state = 2437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CSharp4Parser.OUT - 69)) | (1 << (CSharp4Parser.REF - 69)) | (1 << (CSharp4Parser.THIS - 69)))) != 0):
                    self.state = 2436
                    self.parameter_modifier()


                self.state = 2439
                self.any_type()
                self.state = 2440
                self.identifier()
                self.state = 2442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.ASSIGNMENT:
                    self.state = 2441
                    self.default_argument()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2444
                self.arglist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_default_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_argument" ):
                listener.enterDefault_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_argument" ):
                listener.exitDefault_argument(self)




    def default_argument(self):

        localctx = CSharp4Parser.Default_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_default_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2447
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 2448
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_parameter_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_modifier" ):
                listener.enterParameter_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_modifier" ):
                listener.exitParameter_modifier(self)




    def parameter_modifier(self):

        localctx = CSharp4Parser.Parameter_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_parameter_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CSharp4Parser.OUT - 69)) | (1 << (CSharp4Parser.REF - 69)) | (1 << (CSharp4Parser.THIS - 69)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_arrayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(CSharp4Parser.PARAMS, 0)

        def array_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_parameter_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_array" ):
                listener.enterParameter_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_array" ):
                listener.exitParameter_array(self)




    def parameter_array(self):

        localctx = CSharp4Parser.Parameter_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_parameter_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2452
                self.attributes()


            self.state = 2455
            self.match(CSharp4Parser.PARAMS)
            self.state = 2456
            self.array_type()
            self.state = 2457
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def property_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Property_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration" ):
                listener.enterProperty_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration" ):
                listener.exitProperty_declaration(self)




    def property_declaration(self):

        localctx = CSharp4Parser.Property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2459
                self.attributes()


            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0):
                self.state = 2462
                self.property_modifiers()


            self.state = 2465
            self.any_type()
            self.state = 2466
            self.member_name()
            self.state = 2467
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2468
            self.accessor_declarations()
            self.state = 2469
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Property_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Property_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_modifiers" ):
                listener.enterProperty_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_modifiers" ):
                listener.exitProperty_modifiers(self)




    def property_modifiers(self):

        localctx = CSharp4Parser.Property_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_property_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2472 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2471
                self.property_modifier()
                self.state = 2474 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def property_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Property_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_modifier" ):
                listener.enterProperty_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_modifier" ):
                listener.exitProperty_modifier(self)




    def property_modifier(self):

        localctx = CSharp4Parser.Property_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_property_modifier)
        try:
            self.state = 2488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2476
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2477
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2478
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2479
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2480
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2481
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2482
                self.match(CSharp4Parser.VIRTUAL)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2483
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2484
                self.match(CSharp4Parser.OVERRIDE)
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2485
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2486
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2487
                self.property_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Accessor_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attrs = None # AttributesContext
            self.mods = None # Accessor_modifierContext

        def get_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_contextual_keywordContext,0)


        def accessor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_bodyContext,0)


        def set_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_contextual_keywordContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_modifierContext,0)


        def set_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_accessor_declarationContext,0)


        def get_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_accessor_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_declarations" ):
                listener.enterAccessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_declarations" ):
                listener.exitAccessor_declarations(self)




    def accessor_declarations(self):

        localctx = CSharp4Parser.Accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2490
                localctx.attrs = self.attributes()


            self.state = 2494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)))) != 0):
                self.state = 2493
                localctx.mods = self.accessor_modifier()


            self.state = 2506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.GET]:
                self.state = 2496
                self.get_contextual_keyword()
                self.state = 2497
                self.accessor_body()
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.SET - 55)) | (1 << (CSharp4Parser.OPEN_BRACKET - 55)))) != 0):
                    self.state = 2498
                    self.set_accessor_declaration()


                pass
            elif token in [CSharp4Parser.SET]:
                self.state = 2501
                self.set_contextual_keyword()
                self.state = 2502
                self.accessor_body()
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.GET or _la==CSharp4Parser.INTERNAL or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CSharp4Parser.PRIVATE - 73)) | (1 << (CSharp4Parser.PROTECTED - 73)) | (1 << (CSharp4Parser.OPEN_BRACKET - 73)))) != 0):
                    self.state = 2503
                    self.get_accessor_declaration()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def get_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_contextual_keywordContext,0)


        def accessor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_get_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_accessor_declaration" ):
                listener.enterGet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_accessor_declaration" ):
                listener.exitGet_accessor_declaration(self)




    def get_accessor_declaration(self):

        localctx = CSharp4Parser.Get_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_get_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2508
                self.attributes()


            self.state = 2512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)))) != 0):
                self.state = 2511
                self.accessor_modifier()


            self.state = 2514
            self.get_contextual_keyword()
            self.state = 2515
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_contextual_keywordContext,0)


        def accessor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def accessor_modifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_modifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_set_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_accessor_declaration" ):
                listener.enterSet_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_accessor_declaration" ):
                listener.exitSet_accessor_declaration(self)




    def set_accessor_declaration(self):

        localctx = CSharp4Parser.Set_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_set_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2517
                self.attributes()


            self.state = 2521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)))) != 0):
                self.state = 2520
                self.accessor_modifier()


            self.state = 2523
            self.set_contextual_keyword()
            self.state = 2524
            self.accessor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Accessor_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_accessor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_modifier" ):
                listener.enterAccessor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_modifier" ):
                listener.exitAccessor_modifier(self)




    def accessor_modifier(self):

        localctx = CSharp4Parser.Accessor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_accessor_modifier)
        try:
            self.state = 2533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.match(CSharp4Parser.PROTECTED)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2527
                self.match(CSharp4Parser.INTERNAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2528
                self.match(CSharp4Parser.PRIVATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2529
                self.match(CSharp4Parser.PROTECTED)
                self.state = 2530
                self.match(CSharp4Parser.INTERNAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2531
                self.match(CSharp4Parser.INTERNAL)
                self.state = 2532
                self.match(CSharp4Parser.PROTECTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Accessor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_accessor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessor_body" ):
                listener.enterAccessor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessor_body" ):
                listener.exitAccessor_body(self)




    def accessor_body(self):

        localctx = CSharp4Parser.Accessor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_accessor_body)
        try:
            self.state = 2537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2535
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2536
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def event_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)




    def event_declaration(self):

        localctx = CSharp4Parser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_event_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2539
                self.attributes()


            self.state = 2543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0):
                self.state = 2542
                self.event_modifiers()


            self.state = 2545
            self.match(CSharp4Parser.EVENT)
            self.state = 2546
            self.any_type()
            self.state = 2555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 2547
                self.variable_declarators()
                self.state = 2548
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 2550
                self.member_name()
                self.state = 2551
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 2552
                self.event_accessor_declarations()
                self.state = 2553
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Event_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Event_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_modifiers" ):
                listener.enterEvent_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_modifiers" ):
                listener.exitEvent_modifiers(self)




    def event_modifiers(self):

        localctx = CSharp4Parser.Event_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_event_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2557
            self.event_modifier()
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.STATIC - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0):
                self.state = 2558
                self.event_modifier()
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def event_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_modifier" ):
                listener.enterEvent_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_modifier" ):
                listener.exitEvent_modifier(self)




    def event_modifier(self):

        localctx = CSharp4Parser.Event_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_event_modifier)
        try:
            self.state = 2576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2564
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2565
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2566
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2567
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2568
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2569
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2570
                self.match(CSharp4Parser.VIRTUAL)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2571
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2572
                self.match(CSharp4Parser.OVERRIDE)
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2573
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2574
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2575
                self.event_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_accessor_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Add_contextual_keywordContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def remove_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Remove_accessor_declarationContext,0)


        def remove_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Remove_contextual_keywordContext,0)


        def add_accessor_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Add_accessor_declarationContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_accessor_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_accessor_declarations" ):
                listener.enterEvent_accessor_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_accessor_declarations" ):
                listener.exitEvent_accessor_declarations(self)




    def event_accessor_declarations(self):

        localctx = CSharp4Parser.Event_accessor_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_event_accessor_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2578
                self.attributes()


            self.state = 2589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD]:
                self.state = 2581
                self.add_contextual_keyword()
                self.state = 2582
                self.block()
                self.state = 2583
                self.remove_accessor_declaration()
                pass
            elif token in [CSharp4Parser.REMOVE]:
                self.state = 2585
                self.remove_contextual_keyword()
                self.state = 2586
                self.block()
                self.state = 2587
                self.add_accessor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Add_contextual_keywordContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_add_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_accessor_declaration" ):
                listener.enterAdd_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_accessor_declaration" ):
                listener.exitAdd_accessor_declaration(self)




    def add_accessor_declaration(self):

        localctx = CSharp4Parser.Add_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_add_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2591
                self.attributes()


            self.state = 2594
            self.add_contextual_keyword()
            self.state = 2595
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remove_accessor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def remove_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Remove_contextual_keywordContext,0)


        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_remove_accessor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_accessor_declaration" ):
                listener.enterRemove_accessor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_accessor_declaration" ):
                listener.exitRemove_accessor_declaration(self)




    def remove_accessor_declaration(self):

        localctx = CSharp4Parser.Remove_accessor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_remove_accessor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2597
                self.attributes()


            self.state = 2600
            self.remove_contextual_keyword()
            self.state = 2601
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexer_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_declaratorContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def indexer_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration" ):
                listener.enterIndexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration" ):
                listener.exitIndexer_declaration(self)




    def indexer_declaration(self):

        localctx = CSharp4Parser.Indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_indexer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2603
                self.attributes()


            self.state = 2607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0):
                self.state = 2606
                self.indexer_modifiers()


            self.state = 2609
            self.indexer_declarator()
            self.state = 2610
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2611
            self.accessor_declarations()
            self.state = 2612
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexer_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Indexer_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Indexer_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_modifiers" ):
                listener.enterIndexer_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_modifiers" ):
                listener.exitIndexer_modifiers(self)




    def indexer_modifiers(self):

        localctx = CSharp4Parser.Indexer_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_indexer_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self.indexer_modifier()
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CSharp4Parser.OVERRIDE - 70)) | (1 << (CSharp4Parser.PRIVATE - 70)) | (1 << (CSharp4Parser.PROTECTED - 70)) | (1 << (CSharp4Parser.PUBLIC - 70)) | (1 << (CSharp4Parser.SEALED - 70)) | (1 << (CSharp4Parser.UNSAFE - 70)) | (1 << (CSharp4Parser.VIRTUAL - 70)))) != 0):
                self.state = 2615
                self.indexer_modifier()
                self.state = 2620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def indexer_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Indexer_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_modifier" ):
                listener.enterIndexer_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_modifier" ):
                listener.exitIndexer_modifier(self)




    def indexer_modifier(self):

        localctx = CSharp4Parser.Indexer_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_indexer_modifier)
        try:
            self.state = 2632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2621
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2622
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2623
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2624
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2625
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.VIRTUAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2626
                self.match(CSharp4Parser.VIRTUAL)
                pass
            elif token in [CSharp4Parser.SEALED]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2627
                self.match(CSharp4Parser.SEALED)
                pass
            elif token in [CSharp4Parser.OVERRIDE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2628
                self.match(CSharp4Parser.OVERRIDE)
                pass
            elif token in [CSharp4Parser.ABSTRACT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2629
                self.match(CSharp4Parser.ABSTRACT)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2630
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2631
                self.indexer_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def interface_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_typeContext,0)


        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declarator" ):
                listener.enterIndexer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declarator" ):
                listener.exitIndexer_declarator(self)




    def indexer_declarator(self):

        localctx = CSharp4Parser.Indexer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_indexer_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            self.any_type()
            self.state = 2638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)))) != 0):
                self.state = 2635
                self.interface_type()
                self.state = 2636
                self.match(CSharp4Parser.DOT)


            self.state = 2640
            self.match(CSharp4Parser.THIS)
            self.state = 2641
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 2642
            self.formal_parameter_list()
            self.state = 2643
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_modifiersContext,0)


        def operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_declaratorContext,0)


        def operator_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = CSharp4Parser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_operator_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2645
                self.attributes()


            self.state = 2648
            self.operator_modifiers()
            self.state = 2649
            self.operator_declarator()
            self.state = 2650
            self.operator_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Operator_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Operator_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_modifiers" ):
                listener.enterOperator_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_modifiers" ):
                listener.exitOperator_modifiers(self)




    def operator_modifiers(self):

        localctx = CSharp4Parser.Operator_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_operator_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            self.operator_modifier()
            self.state = 2656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (CSharp4Parser.EXTERN - 39)) | (1 << (CSharp4Parser.PUBLIC - 39)) | (1 << (CSharp4Parser.STATIC - 39)) | (1 << (CSharp4Parser.UNSAFE - 39)))) != 0):
                self.state = 2653
                self.operator_modifier()
                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def operator_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_modifier" ):
                listener.enterOperator_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_modifier" ):
                listener.exitOperator_modifier(self)




    def operator_modifier(self):

        localctx = CSharp4Parser.Operator_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_operator_modifier)
        try:
            self.state = 2663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2659
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2660
                self.match(CSharp4Parser.STATIC)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2661
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2662
                self.operator_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_operator_declaratorContext,0)


        def binary_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Binary_operator_declaratorContext,0)


        def conversion_operator_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Conversion_operator_declaratorContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declarator" ):
                listener.enterOperator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declarator" ):
                listener.exitOperator_declarator(self)




    def operator_declarator(self):

        localctx = CSharp4Parser.Operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_operator_declarator)
        try:
            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2665
                self.unary_operator_declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2666
                self.binary_operator_declarator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2667
                self.conversion_operator_declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Any_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,i)


        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def overloadable_unary_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Overloadable_unary_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_unary_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_declarator" ):
                listener.enterUnary_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_declarator" ):
                listener.exitUnary_operator_declarator(self)




    def unary_operator_declarator(self):

        localctx = CSharp4Parser.Unary_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_unary_operator_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.any_type()
            self.state = 2671
            self.match(CSharp4Parser.OPERATOR)
            self.state = 2672
            self.overloadable_unary_operator()
            self.state = 2673
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2674
            self.any_type()
            self.state = 2675
            self.identifier()
            self.state = 2676
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overloadable_unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharp4Parser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharp4Parser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_overloadable_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_unary_operator" ):
                listener.enterOverloadable_unary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_unary_operator" ):
                listener.exitOverloadable_unary_operator(self)




    def overloadable_unary_operator(self):

        localctx = CSharp4Parser.Overloadable_unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_overloadable_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.FALSE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (CSharp4Parser.TRUE - 93)) | (1 << (CSharp4Parser.PLUS - 93)) | (1 << (CSharp4Parser.MINUS - 93)) | (1 << (CSharp4Parser.BANG - 93)) | (1 << (CSharp4Parser.TILDE - 93)) | (1 << (CSharp4Parser.OP_INC - 93)) | (1 << (CSharp4Parser.OP_DEC - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Any_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,i)


        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def overloadable_binary_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Overloadable_binary_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_binary_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_declarator" ):
                listener.enterBinary_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_declarator" ):
                listener.exitBinary_operator_declarator(self)




    def binary_operator_declarator(self):

        localctx = CSharp4Parser.Binary_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_binary_operator_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2680
            self.any_type()
            self.state = 2681
            self.match(CSharp4Parser.OPERATOR)
            self.state = 2682
            self.overloadable_binary_operator()
            self.state = 2683
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2684
            self.any_type()
            self.state = 2685
            self.identifier()
            self.state = 2686
            self.match(CSharp4Parser.COMMA)
            self.state = 2687
            self.any_type()
            self.state = 2688
            self.identifier()
            self.state = 2689
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overloadable_binary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharp4Parser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharp4Parser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharp4Parser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharp4Parser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharp4Parser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharp4Parser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharp4Parser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharp4Parser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharp4Parser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_overloadable_binary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_binary_operator" ):
                listener.enterOverloadable_binary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_binary_operator" ):
                listener.exitOverloadable_binary_operator(self)




    def overloadable_binary_operator(self):

        localctx = CSharp4Parser.Overloadable_binary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_overloadable_binary_operator)
        try:
            self.state = 2707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2691
                self.match(CSharp4Parser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2692
                self.match(CSharp4Parser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2693
                self.match(CSharp4Parser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2694
                self.match(CSharp4Parser.DIV)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2695
                self.match(CSharp4Parser.PERCENT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2696
                self.match(CSharp4Parser.AMP)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2697
                self.match(CSharp4Parser.BITWISE_OR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2698
                self.match(CSharp4Parser.CARET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2699
                self.match(CSharp4Parser.OP_LEFT_SHIFT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2700
                self.right_shift()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2701
                self.match(CSharp4Parser.OP_EQ)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2702
                self.match(CSharp4Parser.OP_NE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2703
                self.match(CSharp4Parser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2704
                self.match(CSharp4Parser.LT)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2705
                self.match(CSharp4Parser.OP_GE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2706
                self.match(CSharp4Parser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Overloadable_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CSharp4Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CSharp4Parser.MINUS, 0)

        def BANG(self):
            return self.getToken(CSharp4Parser.BANG, 0)

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def OP_INC(self):
            return self.getToken(CSharp4Parser.OP_INC, 0)

        def OP_DEC(self):
            return self.getToken(CSharp4Parser.OP_DEC, 0)

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def DIV(self):
            return self.getToken(CSharp4Parser.DIV, 0)

        def PERCENT(self):
            return self.getToken(CSharp4Parser.PERCENT, 0)

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def BITWISE_OR(self):
            return self.getToken(CSharp4Parser.BITWISE_OR, 0)

        def CARET(self):
            return self.getToken(CSharp4Parser.CARET, 0)

        def OP_LEFT_SHIFT(self):
            return self.getToken(CSharp4Parser.OP_LEFT_SHIFT, 0)

        def right_shift(self):
            return self.getTypedRuleContext(CSharp4Parser.Right_shiftContext,0)


        def OP_EQ(self):
            return self.getToken(CSharp4Parser.OP_EQ, 0)

        def OP_NE(self):
            return self.getToken(CSharp4Parser.OP_NE, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def OP_GE(self):
            return self.getToken(CSharp4Parser.OP_GE, 0)

        def OP_LE(self):
            return self.getToken(CSharp4Parser.OP_LE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_overloadable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverloadable_operator" ):
                listener.enterOverloadable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverloadable_operator" ):
                listener.exitOverloadable_operator(self)




    def overloadable_operator(self):

        localctx = CSharp4Parser.Overloadable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_overloadable_operator)
        try:
            self.state = 2731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2709
                self.match(CSharp4Parser.PLUS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2710
                self.match(CSharp4Parser.MINUS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2711
                self.match(CSharp4Parser.BANG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2712
                self.match(CSharp4Parser.TILDE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2713
                self.match(CSharp4Parser.OP_INC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2714
                self.match(CSharp4Parser.OP_DEC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2715
                self.match(CSharp4Parser.TRUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2716
                self.match(CSharp4Parser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2717
                self.match(CSharp4Parser.STAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2718
                self.match(CSharp4Parser.DIV)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2719
                self.match(CSharp4Parser.PERCENT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2720
                self.match(CSharp4Parser.AMP)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2721
                self.match(CSharp4Parser.BITWISE_OR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2722
                self.match(CSharp4Parser.CARET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2723
                self.match(CSharp4Parser.OP_LEFT_SHIFT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2724
                self.right_shift()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2725
                self.match(CSharp4Parser.OP_EQ)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2726
                self.match(CSharp4Parser.OP_NE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2727
                self.match(CSharp4Parser.GT)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2728
                self.match(CSharp4Parser.LT)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2729
                self.match(CSharp4Parser.OP_GE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2730
                self.match(CSharp4Parser.OP_LE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conversion_operator_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLICIT(self):
            return self.getToken(CSharp4Parser.IMPLICIT, 0)

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def any_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Any_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,i)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def EXPLICIT(self):
            return self.getToken(CSharp4Parser.EXPLICIT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_conversion_operator_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_operator_declarator" ):
                listener.enterConversion_operator_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_operator_declarator" ):
                listener.exitConversion_operator_declarator(self)




    def conversion_operator_declarator(self):

        localctx = CSharp4Parser.Conversion_operator_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_conversion_operator_declarator)
        try:
            self.state = 2749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.IMPLICIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2733
                self.match(CSharp4Parser.IMPLICIT)
                self.state = 2734
                self.match(CSharp4Parser.OPERATOR)
                self.state = 2735
                self.any_type()
                self.state = 2736
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2737
                self.any_type()
                self.state = 2738
                self.identifier()
                self.state = 2739
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass
            elif token in [CSharp4Parser.EXPLICIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2741
                self.match(CSharp4Parser.EXPLICIT)
                self.state = 2742
                self.match(CSharp4Parser.OPERATOR)
                self.state = 2743
                self.any_type()
                self.state = 2744
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2745
                self.any_type()
                self.state = 2746
                self.identifier()
                self.state = 2747
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_body" ):
                listener.enterOperator_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_body" ):
                listener.exitOperator_body(self)




    def operator_body(self):

        localctx = CSharp4Parser.Operator_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_operator_body)
        try:
            self.state = 2753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2751
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2752
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_declarator(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_declaratorContext,0)


        def constructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def constructor_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = CSharp4Parser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2755
                self.attributes()


            self.state = 2759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (CSharp4Parser.EXTERN - 39)) | (1 << (CSharp4Parser.INTERNAL - 39)) | (1 << (CSharp4Parser.PRIVATE - 39)) | (1 << (CSharp4Parser.PROTECTED - 39)) | (1 << (CSharp4Parser.PUBLIC - 39)) | (1 << (CSharp4Parser.UNSAFE - 39)))) != 0):
                self.state = 2758
                self.constructor_modifiers()


            self.state = 2761
            self.constructor_declarator()
            self.state = 2762
            self.constructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructor_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Constructor_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Constructor_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_modifiers" ):
                listener.enterConstructor_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_modifiers" ):
                listener.exitConstructor_modifiers(self)




    def constructor_modifiers(self):

        localctx = CSharp4Parser.Constructor_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_constructor_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2764
                self.constructor_modifier()
                self.state = 2767 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (CSharp4Parser.EXTERN - 39)) | (1 << (CSharp4Parser.INTERNAL - 39)) | (1 << (CSharp4Parser.PRIVATE - 39)) | (1 << (CSharp4Parser.PROTECTED - 39)) | (1 << (CSharp4Parser.PUBLIC - 39)) | (1 << (CSharp4Parser.UNSAFE - 39)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def constructor_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_modifier" ):
                listener.enterConstructor_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_modifier" ):
                listener.exitConstructor_modifier(self)




    def constructor_modifier(self):

        localctx = CSharp4Parser.Constructor_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_constructor_modifier)
        try:
            self.state = 2775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2769
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2770
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2771
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2772
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.EXTERN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2773
                self.match(CSharp4Parser.EXTERN)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2774
                self.constructor_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declarator" ):
                listener.enterConstructor_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declarator" ):
                listener.exitConstructor_declarator(self)




    def constructor_declarator(self):

        localctx = CSharp4Parser.Constructor_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_constructor_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2777
            self.identifier()
            self.state = 2778
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 2779
                self.formal_parameter_list()


            self.state = 2782
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2783
                self.constructor_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_initializer" ):
                listener.enterConstructor_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_initializer" ):
                listener.exitConstructor_initializer(self)




    def constructor_initializer(self):

        localctx = CSharp4Parser.Constructor_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_constructor_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2786
                self.match(CSharp4Parser.COLON)
                self.state = 2787
                self.match(CSharp4Parser.BASE)
                self.state = 2788
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TYPEOF - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                    self.state = 2789
                    self.argument_list()


                self.state = 2792
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2793
                self.match(CSharp4Parser.COLON)
                self.state = 2794
                self.match(CSharp4Parser.THIS)
                self.state = 2795
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 2797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TYPEOF - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                    self.state = 2796
                    self.argument_list()


                self.state = 2799
                self.match(CSharp4Parser.CLOSE_PARENS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_body" ):
                listener.enterConstructor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_body" ):
                listener.exitConstructor_body(self)




    def constructor_body(self):

        localctx = CSharp4Parser.Constructor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_constructor_body)
        try:
            self.state = 2804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2802
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2803
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def static_constructor_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Static_constructor_modifiersContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def static_constructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Static_constructor_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_constructor_declaration" ):
                listener.enterStatic_constructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_constructor_declaration" ):
                listener.exitStatic_constructor_declaration(self)




    def static_constructor_declaration(self):

        localctx = CSharp4Parser.Static_constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_static_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2806
                self.attributes()


            self.state = 2809
            self.static_constructor_modifiers()
            self.state = 2810
            self.identifier()
            self.state = 2811
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 2812
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 2813
            self.static_constructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def static_constructor_modifiers_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Static_constructor_modifiers_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_constructor_modifiers" ):
                listener.enterStatic_constructor_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_constructor_modifiers" ):
                listener.exitStatic_constructor_modifiers(self)




    def static_constructor_modifiers(self):

        localctx = CSharp4Parser.Static_constructor_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_static_constructor_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2815
            self.static_constructor_modifiers_unsafe()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_constructor_body" ):
                listener.enterStatic_constructor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_constructor_body" ):
                listener.exitStatic_constructor_body(self)




    def static_constructor_body(self):

        localctx = CSharp4Parser.Static_constructor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_static_constructor_body)
        try:
            self.state = 2819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2817
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2818
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def destructor_declaration_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_declaration_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_declaration" ):
                listener.enterDestructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_declaration" ):
                listener.exitDestructor_declaration(self)




    def destructor_declaration(self):

        localctx = CSharp4Parser.Destructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_destructor_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self.destructor_declaration_unsafe()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_body" ):
                listener.enterDestructor_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_body" ):
                listener.exitDestructor_body(self)




    def destructor_body(self):

        localctx = CSharp4Parser.Destructor_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_destructor_body)
        try:
            self.state = 2825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2823
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2824
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = CSharp4Parser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_body)
        try:
            self.state = 2829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2827
                self.block()
                pass
            elif token in [CSharp4Parser.SEMICOLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2828
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def struct_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)




    def struct_declaration(self):

        localctx = CSharp4Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2831
                self.attributes()


            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 2834
                self.struct_modifiers()


            self.state = 2838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.PARTIAL:
                self.state = 2837
                self.partial_contextual_keyword()


            self.state = 2840
            self.match(CSharp4Parser.STRUCT)
            self.state = 2841
            self.identifier()
            self.state = 2843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2842
                self.type_parameter_list()


            self.state = 2846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2845
                self.struct_interfaces()


            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2848
                self.type_parameter_constraints_clauses()


            self.state = 2851
            self.struct_body()
            self.state = 2853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2852
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Struct_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Struct_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifiers" ):
                listener.enterStruct_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifiers" ):
                listener.exitStruct_modifiers(self)




    def struct_modifiers(self):

        localctx = CSharp4Parser.Struct_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_struct_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2855
            self.struct_modifier()
            self.state = 2859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 2856
                self.struct_modifier()
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def struct_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier" ):
                listener.enterStruct_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier" ):
                listener.exitStruct_modifier(self)




    def struct_modifier(self):

        localctx = CSharp4Parser.Struct_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_struct_modifier)
        try:
            self.state = 2868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2862
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2863
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2864
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2865
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2866
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2867
                self.struct_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_interfacesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_interfaces" ):
                listener.enterStruct_interfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_interfaces" ):
                listener.exitStruct_interfaces(self)




    def struct_interfaces(self):

        localctx = CSharp4Parser.Struct_interfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_struct_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2870
            self.match(CSharp4Parser.COLON)
            self.state = 2871
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def struct_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = CSharp4Parser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_struct_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 2875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FIXED) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OVERRIDE - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.PRIVATE - 65)) | (1 << (CSharp4Parser.PROTECTED - 65)) | (1 << (CSharp4Parser.PUBLIC - 65)) | (1 << (CSharp4Parser.READONLY - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SEALED - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STATIC - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.STRUCT - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.UNSAFE - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VIRTUAL - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.VOLATILE - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 2874
                self.struct_member_declarations()


            self.state = 2877
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Struct_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Struct_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declarations" ):
                listener.enterStruct_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declarations" ):
                listener.exitStruct_member_declarations(self)




    def struct_member_declarations(self):

        localctx = CSharp4Parser.Struct_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_struct_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2879
            self.struct_member_declaration()
            self.state = 2883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FIXED) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OVERRIDE - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.PRIVATE - 65)) | (1 << (CSharp4Parser.PROTECTED - 65)) | (1 << (CSharp4Parser.PUBLIC - 65)) | (1 << (CSharp4Parser.READONLY - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SEALED - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STATIC - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.STRUCT - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.UNSAFE - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VIRTUAL - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.VOLATILE - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 2880
                self.struct_member_declaration()
                self.state = 2885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_member_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Common_member_declarationContext,0)


        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def buffer_element_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Buffer_element_typeContext,0)


        def fixed_size_buffer_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def all_member_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.All_member_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration" ):
                listener.enterStruct_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration" ):
                listener.exitStruct_member_declaration(self)




    def struct_member_declaration(self):

        localctx = CSharp4Parser.Struct_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_struct_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2886
                self.attributes()


            self.state = 2890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2889
                self.all_member_modifiers()


            self.state = 2898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BOOL, CSharp4Parser.BY, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.DECIMAL, CSharp4Parser.DELEGATE, CSharp4Parser.DESCENDING, CSharp4Parser.DOUBLE, CSharp4Parser.DYNAMIC, CSharp4Parser.ENUM, CSharp4Parser.EQUALS, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.FLOAT, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.IMPLICIT, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.LONG, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SBYTE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.SHORT, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT, CSharp4Parser.VOID, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.state = 2892
                self.common_member_declaration()
                pass
            elif token in [CSharp4Parser.FIXED]:
                self.state = 2893
                self.match(CSharp4Parser.FIXED)
                self.state = 2894
                self.buffer_element_type()
                self.state = 2895
                self.fixed_size_buffer_declarators()
                self.state = 2896
                self.match(CSharp4Parser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = CSharp4Parser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.base_type()
            self.state = 2908 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR:
                    self.state = 2901
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.STAR or _la==CSharp4Parser.INTERR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2907
                self.rank_specifier()
                self.state = 2910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (CSharp4Parser.OPEN_BRACKET - 116)) | (1 << (CSharp4Parser.STAR - 116)) | (1 << (CSharp4Parser.INTERR - 116)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def base_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Base_typeContext,0)


        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.STAR)
            else:
                return self.getToken(CSharp4Parser.STAR, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_non_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_array_type" ):
                listener.enterNon_array_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_array_type" ):
                listener.exitNon_array_type(self)




    def non_array_type(self):

        localctx = CSharp4Parser.Non_array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_non_array_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2912
            self.base_type()
            self.state = 2918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2916
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 2913
                        self.rank_specifier()
                        pass
                    elif token in [CSharp4Parser.INTERR]:
                        self.state = 2914
                        self.match(CSharp4Parser.INTERR)
                        pass
                    elif token in [CSharp4Parser.STAR]:
                        self.state = 2915
                        self.match(CSharp4Parser.STAR)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rank_specifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_rank_specifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifiers" ):
                listener.enterRank_specifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifiers" ):
                listener.exitRank_specifiers(self)




    def rank_specifiers(self):

        localctx = CSharp4Parser.Rank_specifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_rank_specifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2922 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2921
                    self.rank_specifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2924 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rank_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def dim_separators(self):
            return self.getTypedRuleContext(CSharp4Parser.Dim_separatorsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_rank_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_specifier" ):
                listener.enterRank_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_specifier" ):
                listener.exitRank_specifier(self)




    def rank_specifier(self):

        localctx = CSharp4Parser.Rank_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_rank_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2926
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 2928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 2927
                self.dim_separators()


            self.state = 2930
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dim_separatorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_dim_separators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDim_separators" ):
                listener.enterDim_separators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDim_separators" ):
                listener.exitDim_separators(self)




    def dim_separators(self):

        localctx = CSharp4Parser.Dim_separatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_dim_separators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2932
            self.match(CSharp4Parser.COMMA)
            self.state = 2936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 2933
                self.match(CSharp4Parser.COMMA)
                self.state = 2938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def variable_initializer_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_initializer_listContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_array_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_initializer" ):
                listener.enterArray_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_initializer" ):
                listener.exitArray_initializer(self)




    def array_initializer(self):

        localctx = CSharp4Parser.Array_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_array_initializer)
        self._la = 0 # Token type
        try:
            self.state = 2948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2939
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 2940
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2941
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 2942
                self.variable_initializer_list()
                self.state = 2944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 2943
                    self.match(CSharp4Parser.COMMA)


                self.state = 2946
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_initializer_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Variable_initializerContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Variable_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variable_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_initializer_list" ):
                listener.enterVariable_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_initializer_list" ):
                listener.exitVariable_initializer_list(self)




    def variable_initializer_list(self):

        localctx = CSharp4Parser.Variable_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_variable_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2950
            self.variable_initializer()
            self.state = 2955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2951
                    self.match(CSharp4Parser.COMMA)
                    self.state = 2952
                    self.variable_initializer() 
                self.state = 2957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def interface_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def interface_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_modifiersContext,0)


        def partial_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Partial_contextual_keywordContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_declaration" ):
                listener.enterInterface_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_declaration" ):
                listener.exitInterface_declaration(self)




    def interface_declaration(self):

        localctx = CSharp4Parser.Interface_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_interface_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 2958
                self.attributes()


            self.state = 2962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 2961
                self.interface_modifiers()


            self.state = 2965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.PARTIAL:
                self.state = 2964
                self.partial_contextual_keyword()


            self.state = 2967
            self.match(CSharp4Parser.INTERFACE)
            self.state = 2968
            self.identifier()
            self.state = 2970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 2969
                self.variant_type_parameter_list()


            self.state = 2973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 2972
                self.interface_base()


            self.state = 2976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 2975
                self.type_parameter_constraints_clauses()


            self.state = 2978
            self.interface_body()
            self.state = 2980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 2979
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_modifiers" ):
                listener.enterInterface_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_modifiers" ):
                listener.exitInterface_modifiers(self)




    def interface_modifiers(self):

        localctx = CSharp4Parser.Interface_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_interface_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2982
            self.interface_modifier()
            self.state = 2986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 2983
                self.interface_modifier()
                self.state = 2988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def interface_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_modifier" ):
                listener.enterInterface_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_modifier" ):
                listener.exitInterface_modifier(self)




    def interface_modifier(self):

        localctx = CSharp4Parser.Interface_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_interface_modifier)
        try:
            self.state = 2995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2989
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2990
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2991
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2992
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2993
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2994
                self.interface_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variant_type_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(CSharp4Parser.LT, 0)

        def variant_type_parameters(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type_parametersContext,0)


        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variant_type_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameter_list" ):
                listener.enterVariant_type_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameter_list" ):
                listener.exitVariant_type_parameter_list(self)




    def variant_type_parameter_list(self):

        localctx = CSharp4Parser.Variant_type_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_variant_type_parameter_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2997
            self.match(CSharp4Parser.LT)
            self.state = 2998
            self.variant_type_parameters()
            self.state = 2999
            self.match(CSharp4Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variant_type_parametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type_parameterContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type_parameterContext,i)


        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributesContext,i)


        def variance_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Variance_annotationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Variance_annotationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variant_type_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant_type_parameters" ):
                listener.enterVariant_type_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant_type_parameters" ):
                listener.exitVariant_type_parameters(self)




    def variant_type_parameters(self):

        localctx = CSharp4Parser.Variant_type_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_variant_type_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3001
                self.attributes()


            self.state = 3005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.IN or _la==CSharp4Parser.OUT:
                self.state = 3004
                self.variance_annotation()


            self.state = 3007
            self.type_parameter()
            self.state = 3018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3008
                self.match(CSharp4Parser.COMMA)
                self.state = 3010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 3009
                    self.attributes()


                self.state = 3013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.IN or _la==CSharp4Parser.OUT:
                    self.state = 3012
                    self.variance_annotation()


                self.state = 3015
                self.type_parameter()
                self.state = 3020
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variance_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_variance_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariance_annotation" ):
                listener.enterVariance_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariance_annotation" ):
                listener.exitVariance_annotation(self)




    def variance_annotation(self):

        localctx = CSharp4Parser.Variance_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_variance_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.IN or _la==CSharp4Parser.OUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_baseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_type_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_base" ):
                listener.enterInterface_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_base" ):
                listener.exitInterface_base(self)




    def interface_base(self):

        localctx = CSharp4Parser.Interface_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_interface_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            self.match(CSharp4Parser.COLON)
            self.state = 3024
            self.interface_type_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def interface_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_member_declarationsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = CSharp4Parser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3026
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3027
                self.interface_member_declarations()


            self.state = 3030
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Interface_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Interface_member_declarationContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declarations" ):
                listener.enterInterface_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declarations" ):
                listener.exitInterface_member_declarations(self)




    def interface_member_declarations(self):

        localctx = CSharp4Parser.Interface_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_interface_member_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3033 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3032
                self.interface_member_declaration()
                self.state = 3035 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_member_declaration" ):
                listener.enterInterface_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_member_declaration" ):
                listener.exitInterface_member_declaration(self)




    def interface_member_declaration(self):

        localctx = CSharp4Parser.Interface_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_interface_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3037
                self.attributes()


            self.state = 3041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3040
                self.match(CSharp4Parser.NEW)


            self.state = 3093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 3043
                self.any_type()
                self.state = 3071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3044
                    self.identifier()
                    self.state = 3046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.LT:
                        self.state = 3045
                        self.type_parameter_list()


                    self.state = 3048
                    self.match(CSharp4Parser.OPEN_PARENS)
                    self.state = 3050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                        self.state = 3049
                        self.formal_parameter_list()


                    self.state = 3052
                    self.match(CSharp4Parser.CLOSE_PARENS)
                    self.state = 3054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.WHERE:
                        self.state = 3053
                        self.type_parameter_constraints_clauses()


                    self.state = 3056
                    self.match(CSharp4Parser.SEMICOLON)
                    pass

                elif la_ == 2:
                    self.state = 3058
                    self.identifier()
                    self.state = 3059
                    self.match(CSharp4Parser.OPEN_BRACE)
                    self.state = 3060
                    self.interface_accessors()
                    self.state = 3061
                    self.match(CSharp4Parser.CLOSE_BRACE)
                    pass

                elif la_ == 3:
                    self.state = 3063
                    self.match(CSharp4Parser.THIS)
                    self.state = 3064
                    self.match(CSharp4Parser.OPEN_BRACKET)
                    self.state = 3065
                    self.formal_parameter_list()
                    self.state = 3066
                    self.match(CSharp4Parser.CLOSE_BRACKET)
                    self.state = 3067
                    self.match(CSharp4Parser.OPEN_BRACE)
                    self.state = 3068
                    self.interface_accessors()
                    self.state = 3069
                    self.match(CSharp4Parser.CLOSE_BRACE)
                    pass


                pass

            elif la_ == 2:
                self.state = 3073
                self.match(CSharp4Parser.VOID)
                self.state = 3074
                self.identifier()
                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.LT:
                    self.state = 3075
                    self.type_parameter_list()


                self.state = 3078
                self.match(CSharp4Parser.OPEN_PARENS)
                self.state = 3080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                    self.state = 3079
                    self.formal_parameter_list()


                self.state = 3082
                self.match(CSharp4Parser.CLOSE_PARENS)
                self.state = 3084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.WHERE:
                    self.state = 3083
                    self.type_parameter_constraints_clauses()


                self.state = 3086
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 3:
                self.state = 3088
                self.match(CSharp4Parser.EVENT)
                self.state = 3089
                self.any_type()
                self.state = 3090
                self.identifier()
                self.state = 3091
                self.match(CSharp4Parser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_method_declaration" ):
                listener.enterInterface_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_method_declaration" ):
                listener.exitInterface_method_declaration(self)




    def interface_method_declaration(self):

        localctx = CSharp4Parser.Interface_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_interface_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3095
                self.attributes()


            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3098
                self.match(CSharp4Parser.NEW)


            self.state = 3101
            self.return_type()
            self.state = 3102
            self.identifier()
            self.state = 3104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3103
                self.type_parameter_list()


            self.state = 3106
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3107
                self.formal_parameter_list()


            self.state = 3110
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3111
                self.type_parameter_constraints_clauses()


            self.state = 3114
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_property_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_property_declaration" ):
                listener.enterInterface_property_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_property_declaration" ):
                listener.exitInterface_property_declaration(self)




    def interface_property_declaration(self):

        localctx = CSharp4Parser.Interface_property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_interface_property_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3116
                self.attributes()


            self.state = 3120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3119
                self.match(CSharp4Parser.NEW)


            self.state = 3122
            self.any_type()
            self.state = 3123
            self.identifier()
            self.state = 3124
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3125
            self.interface_accessors()
            self.state = 3126
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_accessorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def get_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Get_contextual_keywordContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.SEMICOLON)
            else:
                return self.getToken(CSharp4Parser.SEMICOLON, i)

        def set_contextual_keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.Set_contextual_keywordContext,0)


        def attributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributesContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributesContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_accessors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_accessors" ):
                listener.enterInterface_accessors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_accessors" ):
                listener.exitInterface_accessors(self)




    def interface_accessors(self):

        localctx = CSharp4Parser.Interface_accessorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_interface_accessors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3128
                self.attributes()


            self.state = 3151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.GET]:
                self.state = 3131
                self.get_contextual_keyword()
                self.state = 3132
                self.match(CSharp4Parser.SEMICOLON)
                self.state = 3139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.SET or _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 3134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.OPEN_BRACKET:
                        self.state = 3133
                        self.attributes()


                    self.state = 3136
                    self.set_contextual_keyword()
                    self.state = 3137
                    self.match(CSharp4Parser.SEMICOLON)


                pass
            elif token in [CSharp4Parser.SET]:
                self.state = 3141
                self.set_contextual_keyword()
                self.state = 3142
                self.match(CSharp4Parser.SEMICOLON)
                self.state = 3149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.GET or _la==CSharp4Parser.OPEN_BRACKET:
                    self.state = 3144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CSharp4Parser.OPEN_BRACKET:
                        self.state = 3143
                        self.attributes()


                    self.state = 3146
                    self.get_contextual_keyword()
                    self.state = 3147
                    self.match(CSharp4Parser.SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_event_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_event_declaration" ):
                listener.enterInterface_event_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_event_declaration" ):
                listener.exitInterface_event_declaration(self)




    def interface_event_declaration(self):

        localctx = CSharp4Parser.Interface_event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_interface_event_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3153
                self.attributes()


            self.state = 3157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3156
                self.match(CSharp4Parser.NEW)


            self.state = 3159
            self.match(CSharp4Parser.EVENT)
            self.state = 3160
            self.any_type()
            self.state = 3161
            self.identifier()
            self.state = 3162
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_indexer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_indexer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_indexer_declaration" ):
                listener.enterInterface_indexer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_indexer_declaration" ):
                listener.exitInterface_indexer_declaration(self)




    def interface_indexer_declaration(self):

        localctx = CSharp4Parser.Interface_indexer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_interface_indexer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3164
                self.attributes()


            self.state = 3168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.NEW:
                self.state = 3167
                self.match(CSharp4Parser.NEW)


            self.state = 3170
            self.any_type()
            self.state = 3171
            self.match(CSharp4Parser.THIS)
            self.state = 3172
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3173
            self.formal_parameter_list()
            self.state = 3174
            self.match(CSharp4Parser.CLOSE_BRACKET)
            self.state = 3175
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3176
            self.interface_accessors()
            self.state = 3177
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def enum_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_modifiersContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = CSharp4Parser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3179
                self.attributes()


            self.state = 3183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)))) != 0):
                self.state = 3182
                self.enum_modifiers()


            self.state = 3185
            self.match(CSharp4Parser.ENUM)
            self.state = 3186
            self.identifier()
            self.state = 3188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3187
                self.enum_base()


            self.state = 3190
            self.enum_body()
            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3191
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_baseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def integral_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Integral_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_base" ):
                listener.enterEnum_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_base" ):
                listener.exitEnum_base(self)




    def enum_base(self):

        localctx = CSharp4Parser.Enum_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_enum_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            self.match(CSharp4Parser.COLON)
            self.state = 3195
            self.integral_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def enum_member_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_member_declarationsContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_body" ):
                listener.enterEnum_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_body" ):
                listener.exitEnum_body(self)




    def enum_body(self):

        localctx = CSharp4Parser.Enum_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_enum_body)
        self._la = 0 # Token type
        try:
            self.state = 3206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3197
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 3198
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3199
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 3200
                self.enum_member_declarations()
                self.state = 3202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.COMMA:
                    self.state = 3201
                    self.match(CSharp4Parser.COMMA)


                self.state = 3204
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Enum_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Enum_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_modifiers" ):
                listener.enterEnum_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_modifiers" ):
                listener.exitEnum_modifiers(self)




    def enum_modifiers(self):

        localctx = CSharp4Parser.Enum_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_enum_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3208
                self.enum_modifier()
                self.state = 3211 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_modifier" ):
                listener.enterEnum_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_modifier" ):
                listener.exitEnum_modifier(self)




    def enum_modifier(self):

        localctx = CSharp4Parser.Enum_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_enum_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3213
            _la = self._input.LA(1)
            if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_declarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_member_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Enum_member_declarationContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Enum_member_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_member_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declarations" ):
                listener.enterEnum_member_declarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declarations" ):
                listener.exitEnum_member_declarations(self)




    def enum_member_declarations(self):

        localctx = CSharp4Parser.Enum_member_declarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_enum_member_declarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3215
            self.enum_member_declaration()
            self.state = 3220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3216
                    self.match(CSharp4Parser.COMMA)
                    self.state = 3217
                    self.enum_member_declaration() 
                self.state = 3222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_declaration" ):
                listener.enterEnum_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_declaration" ):
                listener.exitEnum_member_declaration(self)




    def enum_member_declaration(self):

        localctx = CSharp4Parser.Enum_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_enum_member_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3223
                self.attributes()


            self.state = 3226
            self.identifier()
            self.state = 3229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.ASSIGNMENT:
                self.state = 3227
                self.match(CSharp4Parser.ASSIGNMENT)
                self.state = 3228
                self.constant_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def delegate_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_modifiersContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_declaration" ):
                listener.enterDelegate_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_declaration" ):
                listener.exitDelegate_declaration(self)




    def delegate_declaration(self):

        localctx = CSharp4Parser.Delegate_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_delegate_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3231
                self.attributes()


            self.state = 3235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 3234
                self.delegate_modifiers()


            self.state = 3237
            self.match(CSharp4Parser.DELEGATE)
            self.state = 3238
            self.return_type()
            self.state = 3239
            self.identifier()
            self.state = 3241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3240
                self.variant_type_parameter_list()


            self.state = 3243
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3244
                self.formal_parameter_list()


            self.state = 3247
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3248
                self.type_parameter_constraints_clauses()


            self.state = 3251
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegate_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Delegate_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Delegate_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_modifiers" ):
                listener.enterDelegate_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_modifiers" ):
                listener.exitDelegate_modifiers(self)




    def delegate_modifiers(self):

        localctx = CSharp4Parser.Delegate_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_delegate_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3253
            self.delegate_modifier()
            self.state = 3257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 3254
                self.delegate_modifier()
                self.state = 3259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def delegate_modifier_unsafe(self):
            return self.getTypedRuleContext(CSharp4Parser.Delegate_modifier_unsafeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_modifier" ):
                listener.enterDelegate_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_modifier" ):
                listener.exitDelegate_modifier(self)




    def delegate_modifier(self):

        localctx = CSharp4Parser.Delegate_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_delegate_modifier)
        try:
            self.state = 3266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.NEW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3260
                self.match(CSharp4Parser.NEW)
                pass
            elif token in [CSharp4Parser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3261
                self.match(CSharp4Parser.PUBLIC)
                pass
            elif token in [CSharp4Parser.PROTECTED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3262
                self.match(CSharp4Parser.PROTECTED)
                pass
            elif token in [CSharp4Parser.INTERNAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3263
                self.match(CSharp4Parser.INTERNAL)
                pass
            elif token in [CSharp4Parser.PRIVATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3264
                self.match(CSharp4Parser.PRIVATE)
                pass
            elif token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3265
                self.delegate_modifier_unsafe()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_attribute_sections(self):
            return self.getTypedRuleContext(CSharp4Parser.Global_attribute_sectionsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attributes" ):
                listener.enterGlobal_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attributes" ):
                listener.exitGlobal_attributes(self)




    def global_attributes(self):

        localctx = CSharp4Parser.Global_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_global_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3268
            self.global_attribute_sections()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_sectionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Global_attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Global_attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_sections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_sections" ):
                listener.enterGlobal_attribute_sections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_sections" ):
                listener.exitGlobal_attribute_sections(self)




    def global_attribute_sections(self):

        localctx = CSharp4Parser.Global_attribute_sectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_global_attribute_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3271 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3270
                self.global_attribute_section()
                self.state = 3273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CSharp4Parser.OPEN_BRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def global_attribute_target_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Global_attribute_target_specifierContext,0)


        def attribute_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_section" ):
                listener.enterGlobal_attribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_section" ):
                listener.exitGlobal_attribute_section(self)




    def global_attribute_section(self):

        localctx = CSharp4Parser.Global_attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_global_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3276
            self.global_attribute_target_specifier()
            self.state = 3277
            self.attribute_list()
            self.state = 3279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 3278
                self.match(CSharp4Parser.COMMA)


            self.state = 3281
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_target_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_attribute_target(self):
            return self.getTypedRuleContext(CSharp4Parser.Global_attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_target_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target_specifier" ):
                listener.enterGlobal_attribute_target_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target_specifier" ):
                listener.exitGlobal_attribute_target_specifier(self)




    def global_attribute_target_specifier(self):

        localctx = CSharp4Parser.Global_attribute_target_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_global_attribute_target_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3283
            self.global_attribute_target()
            self.state = 3284
            self.match(CSharp4Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_attribute_targetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_global_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_attribute_target" ):
                listener.enterGlobal_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_attribute_target" ):
                listener.exitGlobal_attribute_target(self)




    def global_attribute_target(self):

        localctx = CSharp4Parser.Global_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_global_attribute_target)
        try:
            self.state = 3288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ABSTRACT, CSharp4Parser.AS, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BYTE, CSharp4Parser.CASE, CSharp4Parser.CATCH, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.ELSE, CSharp4Parser.ENUM, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.EXTERN, CSharp4Parser.FALSE, CSharp4Parser.FINALLY, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.GOTO, CSharp4Parser.IF, CSharp4Parser.IMPLICIT, CSharp4Parser.IN, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.IS, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NAMESPACE, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.OPERATOR, CSharp4Parser.OUT, CSharp4Parser.OVERRIDE, CSharp4Parser.PARAMS, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.REF, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SEALED, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STACKALLOC, CSharp4Parser.STATIC, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.VIRTUAL, CSharp4Parser.VOID, CSharp4Parser.VOLATILE, CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3286
                self.keyword()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3287
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_sections(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_sectionsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = CSharp4Parser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3290
            self.attribute_sections()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_sectionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Attribute_sectionContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Attribute_sectionContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_sections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_sections" ):
                listener.enterAttribute_sections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_sections" ):
                listener.exitAttribute_sections(self)




    def attribute_sections(self):

        localctx = CSharp4Parser.Attribute_sectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_attribute_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3292
                self.attribute_section()
                self.state = 3295 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CSharp4Parser.OPEN_BRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def attribute_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def attribute_target_specifier(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_target_specifierContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_section" ):
                listener.enterAttribute_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_section" ):
                listener.exitAttribute_section(self)




    def attribute_section(self):

        localctx = CSharp4Parser.Attribute_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_attribute_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 3298
                self.attribute_target_specifier()


            self.state = 3301
            self.attribute_list()
            self.state = 3303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 3302
                self.match(CSharp4Parser.COMMA)


            self.state = 3305
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_target_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_target(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_targetContext,0)


        def COLON(self):
            return self.getToken(CSharp4Parser.COLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_target_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target_specifier" ):
                listener.enterAttribute_target_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target_specifier" ):
                listener.exitAttribute_target_specifier(self)




    def attribute_target_specifier(self):

        localctx = CSharp4Parser.Attribute_target_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_attribute_target_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            self.attribute_target()
            self.state = 3308
            self.match(CSharp4Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_targetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(CSharp4Parser.KeywordContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_target" ):
                listener.enterAttribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_target" ):
                listener.exitAttribute_target(self)




    def attribute_target(self):

        localctx = CSharp4Parser.Attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_attribute_target)
        try:
            self.state = 3312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.ABSTRACT, CSharp4Parser.AS, CSharp4Parser.BASE, CSharp4Parser.BOOL, CSharp4Parser.BREAK, CSharp4Parser.BYTE, CSharp4Parser.CASE, CSharp4Parser.CATCH, CSharp4Parser.CHAR, CSharp4Parser.CHECKED, CSharp4Parser.CLASS, CSharp4Parser.CONST, CSharp4Parser.CONTINUE, CSharp4Parser.DECIMAL, CSharp4Parser.DEFAULT, CSharp4Parser.DELEGATE, CSharp4Parser.DO, CSharp4Parser.DOUBLE, CSharp4Parser.ELSE, CSharp4Parser.ENUM, CSharp4Parser.EVENT, CSharp4Parser.EXPLICIT, CSharp4Parser.EXTERN, CSharp4Parser.FALSE, CSharp4Parser.FINALLY, CSharp4Parser.FIXED, CSharp4Parser.FLOAT, CSharp4Parser.FOR, CSharp4Parser.FOREACH, CSharp4Parser.GOTO, CSharp4Parser.IF, CSharp4Parser.IMPLICIT, CSharp4Parser.IN, CSharp4Parser.INT, CSharp4Parser.INTERFACE, CSharp4Parser.INTERNAL, CSharp4Parser.IS, CSharp4Parser.LOCK, CSharp4Parser.LONG, CSharp4Parser.NAMESPACE, CSharp4Parser.NEW, CSharp4Parser.NULL, CSharp4Parser.OBJECT, CSharp4Parser.OPERATOR, CSharp4Parser.OUT, CSharp4Parser.OVERRIDE, CSharp4Parser.PARAMS, CSharp4Parser.PRIVATE, CSharp4Parser.PROTECTED, CSharp4Parser.PUBLIC, CSharp4Parser.READONLY, CSharp4Parser.REF, CSharp4Parser.RETURN, CSharp4Parser.SBYTE, CSharp4Parser.SEALED, CSharp4Parser.SHORT, CSharp4Parser.SIZEOF, CSharp4Parser.STACKALLOC, CSharp4Parser.STATIC, CSharp4Parser.STRING, CSharp4Parser.STRUCT, CSharp4Parser.SWITCH, CSharp4Parser.THIS, CSharp4Parser.THROW, CSharp4Parser.TRUE, CSharp4Parser.TRY, CSharp4Parser.TYPEOF, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.UNCHECKED, CSharp4Parser.UNSAFE, CSharp4Parser.USHORT, CSharp4Parser.USING, CSharp4Parser.VIRTUAL, CSharp4Parser.VOID, CSharp4Parser.VOLATILE, CSharp4Parser.WHILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3310
                self.keyword()
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3311
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.AttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_list" ):
                listener.enterAttribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_list" ):
                listener.exitAttribute_list(self)




    def attribute_list(self):

        localctx = CSharp4Parser.Attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_attribute_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314
            self.attribute()
            self.state = 3319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3315
                    self.match(CSharp4Parser.COMMA)
                    self.state = 3316
                    self.attribute() 
                self.state = 3321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_nameContext,0)


        def attribute_arguments(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_argumentsContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CSharp4Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            self.attribute_name()
            self.state = 3324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_PARENS:
                self.state = 3323
                self.attribute_arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_nameContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = CSharp4Parser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def positional_argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Positional_argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_arguments" ):
                listener.enterAttribute_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_arguments" ):
                listener.exitAttribute_arguments(self)




    def attribute_arguments(self):

        localctx = CSharp4Parser.Attribute_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_attribute_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3328
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (CSharp4Parser.ADD - 10)) | (1 << (CSharp4Parser.ALIAS - 10)) | (1 << (CSharp4Parser.ARGLIST - 10)) | (1 << (CSharp4Parser.ASCENDING - 10)) | (1 << (CSharp4Parser.BASE - 10)) | (1 << (CSharp4Parser.BOOL - 10)) | (1 << (CSharp4Parser.BY - 10)) | (1 << (CSharp4Parser.BYTE - 10)) | (1 << (CSharp4Parser.CHAR - 10)) | (1 << (CSharp4Parser.CHECKED - 10)) | (1 << (CSharp4Parser.DECIMAL - 10)) | (1 << (CSharp4Parser.DEFAULT - 10)) | (1 << (CSharp4Parser.DELEGATE - 10)) | (1 << (CSharp4Parser.DESCENDING - 10)) | (1 << (CSharp4Parser.DOUBLE - 10)) | (1 << (CSharp4Parser.DYNAMIC - 10)) | (1 << (CSharp4Parser.EQUALS - 10)) | (1 << (CSharp4Parser.FALSE - 10)) | (1 << (CSharp4Parser.FLOAT - 10)) | (1 << (CSharp4Parser.FROM - 10)) | (1 << (CSharp4Parser.GET - 10)) | (1 << (CSharp4Parser.GROUP - 10)) | (1 << (CSharp4Parser.INT - 10)) | (1 << (CSharp4Parser.INTO - 10)) | (1 << (CSharp4Parser.JOIN - 10)) | (1 << (CSharp4Parser.LET - 10)) | (1 << (CSharp4Parser.LONG - 10)) | (1 << (CSharp4Parser.NEW - 10)) | (1 << (CSharp4Parser.NULL - 10)) | (1 << (CSharp4Parser.OBJECT - 10)) | (1 << (CSharp4Parser.ON - 10)) | (1 << (CSharp4Parser.ORDERBY - 10)) | (1 << (CSharp4Parser.PARTIAL - 10)))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CSharp4Parser.REMOVE - 78)) | (1 << (CSharp4Parser.SBYTE - 78)) | (1 << (CSharp4Parser.SELECT - 78)) | (1 << (CSharp4Parser.SET - 78)) | (1 << (CSharp4Parser.SHORT - 78)) | (1 << (CSharp4Parser.SIZEOF - 78)) | (1 << (CSharp4Parser.STRING - 78)) | (1 << (CSharp4Parser.THIS - 78)) | (1 << (CSharp4Parser.TRUE - 78)) | (1 << (CSharp4Parser.TYPEOF - 78)) | (1 << (CSharp4Parser.UINT - 78)) | (1 << (CSharp4Parser.ULONG - 78)) | (1 << (CSharp4Parser.UNCHECKED - 78)) | (1 << (CSharp4Parser.USHORT - 78)) | (1 << (CSharp4Parser.WHERE - 78)) | (1 << (CSharp4Parser.YIELD - 78)) | (1 << (CSharp4Parser.IDENTIFIER - 78)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 78)) | (1 << (CSharp4Parser.REAL_LITERAL - 78)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 78)) | (1 << (CSharp4Parser.STRING_LITERAL - 78)) | (1 << (CSharp4Parser.OPEN_PARENS - 78)) | (1 << (CSharp4Parser.PLUS - 78)) | (1 << (CSharp4Parser.MINUS - 78)) | (1 << (CSharp4Parser.STAR - 78)) | (1 << (CSharp4Parser.AMP - 78)) | (1 << (CSharp4Parser.BANG - 78)) | (1 << (CSharp4Parser.TILDE - 78)) | (1 << (CSharp4Parser.OP_INC - 78)) | (1 << (CSharp4Parser.OP_DEC - 78)))) != 0):
                self.state = 3329
                self.positional_argument_list()


            self.state = 3332
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # Positional_argumentContext
            self.arg2 = None # Positional_argumentContext

        def positional_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Positional_argumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Positional_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_positional_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_argument_list" ):
                listener.enterPositional_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_argument_list" ):
                listener.exitPositional_argument_list(self)




    def positional_argument_list(self):

        localctx = CSharp4Parser.Positional_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_positional_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            localctx.arg = self.positional_argument()
            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3335
                self.match(CSharp4Parser.COMMA)
                self.state = 3336
                localctx.arg2 = self.positional_argument()
                self.state = 3341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_argument_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_argument_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_positional_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_argument" ):
                listener.enterPositional_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_argument" ):
                listener.exitPositional_argument(self)




    def positional_argument(self):

        localctx = CSharp4Parser.Positional_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_positional_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self.attribute_argument_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Named_argumentContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Named_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_named_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument_list" ):
                listener.enterNamed_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument_list" ):
                listener.exitNamed_argument_list(self)




    def named_argument_list(self):

        localctx = CSharp4Parser.Named_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_named_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3344
            self.named_argument()
            self.state = 3349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3345
                self.match(CSharp4Parser.COMMA)
                self.state = 3346
                self.named_argument()
                self.state = 3351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def attribute_argument_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Attribute_argument_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)




    def named_argument(self):

        localctx = CSharp4Parser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3352
            self.identifier()
            self.state = 3353
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 3354
            self.attribute_argument_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_argument_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_attribute_argument_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument_expression" ):
                listener.enterAttribute_argument_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument_expression" ):
                listener.exitAttribute_argument_expression(self)




    def attribute_argument_expression(self):

        localctx = CSharp4Parser.Attribute_argument_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_attribute_argument_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3356
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_modifier_unsafe" ):
                listener.enterClass_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_modifier_unsafe" ):
                listener.exitClass_modifier_unsafe(self)




    def class_modifier_unsafe(self):

        localctx = CSharp4Parser.Class_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_class_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3358
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_modifier_unsafe" ):
                listener.enterStruct_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_modifier_unsafe" ):
                listener.exitStruct_modifier_unsafe(self)




    def struct_modifier_unsafe(self):

        localctx = CSharp4Parser.Struct_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_struct_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_modifier_unsafe" ):
                listener.enterInterface_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_modifier_unsafe" ):
                listener.exitInterface_modifier_unsafe(self)




    def interface_modifier_unsafe(self):

        localctx = CSharp4Parser.Interface_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_interface_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3362
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_modifier_unsafe" ):
                listener.enterDelegate_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_modifier_unsafe" ):
                listener.exitDelegate_modifier_unsafe(self)




    def delegate_modifier_unsafe(self):

        localctx = CSharp4Parser.Delegate_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_delegate_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3364
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_field_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_modifier_unsafe" ):
                listener.enterField_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_modifier_unsafe" ):
                listener.exitField_modifier_unsafe(self)




    def field_modifier_unsafe(self):

        localctx = CSharp4Parser.Field_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_field_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_modifier_unsafe" ):
                listener.enterMethod_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_modifier_unsafe" ):
                listener.exitMethod_modifier_unsafe(self)




    def method_modifier_unsafe(self):

        localctx = CSharp4Parser.Method_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_method_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3368
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_modifier_unsafe" ):
                listener.enterProperty_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_modifier_unsafe" ):
                listener.exitProperty_modifier_unsafe(self)




    def property_modifier_unsafe(self):

        localctx = CSharp4Parser.Property_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_property_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_modifier_unsafe" ):
                listener.enterEvent_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_modifier_unsafe" ):
                listener.exitEvent_modifier_unsafe(self)




    def event_modifier_unsafe(self):

        localctx = CSharp4Parser.Event_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_event_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_modifier_unsafe" ):
                listener.enterIndexer_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_modifier_unsafe" ):
                listener.exitIndexer_modifier_unsafe(self)




    def indexer_modifier_unsafe(self):

        localctx = CSharp4Parser.Indexer_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_indexer_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_modifier_unsafe" ):
                listener.enterOperator_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_modifier_unsafe" ):
                listener.exitOperator_modifier_unsafe(self)




    def operator_modifier_unsafe(self):

        localctx = CSharp4Parser.Operator_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_operator_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_modifier_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_modifier_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_modifier_unsafe" ):
                listener.enterConstructor_modifier_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_modifier_unsafe" ):
                listener.exitConstructor_modifier_unsafe(self)




    def constructor_modifier_unsafe(self):

        localctx = CSharp4Parser.Constructor_modifier_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_constructor_modifier_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3378
            self.match(CSharp4Parser.UNSAFE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_declaration_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def destructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_bodyContext,0)


        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_declaration_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_declaration_unsafe" ):
                listener.enterDestructor_declaration_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_declaration_unsafe" ):
                listener.exitDestructor_declaration_unsafe(self)




    def destructor_declaration_unsafe(self):

        localctx = CSharp4Parser.Destructor_declaration_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_destructor_declaration_unsafe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3380
                self.attributes()


            self.state = 3391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 3384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.EXTERN:
                    self.state = 3383
                    self.match(CSharp4Parser.EXTERN)


                self.state = 3387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.UNSAFE:
                    self.state = 3386
                    self.match(CSharp4Parser.UNSAFE)


                pass

            elif la_ == 2:
                self.state = 3389
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3390
                self.match(CSharp4Parser.EXTERN)
                pass


            self.state = 3393
            self.match(CSharp4Parser.TILDE)
            self.state = 3394
            self.identifier()
            self.state = 3395
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3396
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3397
            self.destructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_constructor_modifiers_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_static_constructor_modifiers_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_constructor_modifiers_unsafe" ):
                listener.enterStatic_constructor_modifiers_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_constructor_modifiers_unsafe" ):
                listener.exitStatic_constructor_modifiers_unsafe(self)




    def static_constructor_modifiers_unsafe(self):

        localctx = CSharp4Parser.Static_constructor_modifiers_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_static_constructor_modifiers_unsafe)
        self._la = 0 # Token type
        try:
            self.state = 3423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CSharp4Parser.EXTERN or _la==CSharp4Parser.UNSAFE:
                    self.state = 3399
                    _la = self._input.LA(1)
                    if not(_la==CSharp4Parser.EXTERN or _la==CSharp4Parser.UNSAFE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3402
                self.match(CSharp4Parser.STATIC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3403
                self.match(CSharp4Parser.EXTERN)
                self.state = 3404
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3405
                self.match(CSharp4Parser.STATIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3406
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3407
                self.match(CSharp4Parser.EXTERN)
                self.state = 3408
                self.match(CSharp4Parser.STATIC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3409
                self.match(CSharp4Parser.EXTERN)
                self.state = 3410
                self.match(CSharp4Parser.STATIC)
                self.state = 3411
                self.match(CSharp4Parser.UNSAFE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3412
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3413
                self.match(CSharp4Parser.STATIC)
                self.state = 3414
                self.match(CSharp4Parser.EXTERN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3415
                self.match(CSharp4Parser.STATIC)
                self.state = 3416
                _la = self._input.LA(1)
                if not(_la==CSharp4Parser.EXTERN or _la==CSharp4Parser.UNSAFE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3417
                self.match(CSharp4Parser.STATIC)
                self.state = 3418
                self.match(CSharp4Parser.EXTERN)
                self.state = 3419
                self.match(CSharp4Parser.UNSAFE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3420
                self.match(CSharp4Parser.STATIC)
                self.state = 3421
                self.match(CSharp4Parser.UNSAFE)
                self.state = 3422
                self.match(CSharp4Parser.EXTERN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Embedded_statement_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafe_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Unsafe_statementContext,0)


        def fixed_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_embedded_statement_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbedded_statement_unsafe" ):
                listener.enterEmbedded_statement_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbedded_statement_unsafe" ):
                listener.exitEmbedded_statement_unsafe(self)




    def embedded_statement_unsafe(self):

        localctx = CSharp4Parser.Embedded_statement_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_embedded_statement_unsafe)
        try:
            self.state = 3427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.UNSAFE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3425
                self.unsafe_statement()
                pass
            elif token in [CSharp4Parser.FIXED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3426
                self.fixed_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unsafe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def block(self):
            return self.getTypedRuleContext(CSharp4Parser.BlockContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unsafe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafe_statement" ):
                listener.enterUnsafe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafe_statement" ):
                listener.exitUnsafe_statement(self)




    def unsafe_statement(self):

        localctx = CSharp4Parser.Unsafe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_unsafe_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3429
            self.match(CSharp4Parser.UNSAFE)
            self.state = 3430
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Pointer_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_type_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_unsafe" ):
                listener.enterType_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_unsafe" ):
                listener.exitType_unsafe(self)




    def type_unsafe(self):

        localctx = CSharp4Parser.Type_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_type_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3432
            self.pointer_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pointer_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Simple_typeContext,0)


        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def rank_specifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Rank_specifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Rank_specifierContext,i)


        def INTERR(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.INTERR)
            else:
                return self.getToken(CSharp4Parser.INTERR, i)

        def class_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_typeContext,0)


        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_pointer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_type" ):
                listener.enterPointer_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_type" ):
                listener.exitPointer_type(self)




    def pointer_type(self):

        localctx = CSharp4Parser.Pointer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_pointer_type)
        self._la = 0 # Token type
        try:
            self.state = 3456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.BOOL, CSharp4Parser.BYTE, CSharp4Parser.CHAR, CSharp4Parser.DECIMAL, CSharp4Parser.DOUBLE, CSharp4Parser.FLOAT, CSharp4Parser.INT, CSharp4Parser.LONG, CSharp4Parser.SBYTE, CSharp4Parser.SHORT, CSharp4Parser.UINT, CSharp4Parser.ULONG, CSharp4Parser.USHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3434
                self.simple_type()
                self.state = 3439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.OPEN_BRACKET or _la==CSharp4Parser.INTERR:
                    self.state = 3437
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 3435
                        self.rank_specifier()
                        pass
                    elif token in [CSharp4Parser.INTERR]:
                        self.state = 3436
                        self.match(CSharp4Parser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3442
                self.match(CSharp4Parser.STAR)
                pass
            elif token in [CSharp4Parser.ADD, CSharp4Parser.ALIAS, CSharp4Parser.ARGLIST, CSharp4Parser.ASCENDING, CSharp4Parser.BY, CSharp4Parser.DESCENDING, CSharp4Parser.DYNAMIC, CSharp4Parser.EQUALS, CSharp4Parser.FROM, CSharp4Parser.GET, CSharp4Parser.GROUP, CSharp4Parser.INTO, CSharp4Parser.JOIN, CSharp4Parser.LET, CSharp4Parser.OBJECT, CSharp4Parser.ON, CSharp4Parser.ORDERBY, CSharp4Parser.PARTIAL, CSharp4Parser.REMOVE, CSharp4Parser.SELECT, CSharp4Parser.SET, CSharp4Parser.STRING, CSharp4Parser.WHERE, CSharp4Parser.YIELD, CSharp4Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3444
                self.class_type()
                self.state = 3449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CSharp4Parser.OPEN_BRACKET or _la==CSharp4Parser.INTERR:
                    self.state = 3447
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CSharp4Parser.OPEN_BRACKET]:
                        self.state = 3445
                        self.rank_specifier()
                        pass
                    elif token in [CSharp4Parser.INTERR]:
                        self.state = 3446
                        self.match(CSharp4Parser.INTERR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3452
                self.match(CSharp4Parser.STAR)
                pass
            elif token in [CSharp4Parser.VOID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3454
                self.match(CSharp4Parser.VOID)
                self.state = 3455
                self.match(CSharp4Parser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unmanaged_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unmanaged_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnmanaged_type" ):
                listener.enterUnmanaged_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnmanaged_type" ):
                listener.exitUnmanaged_type(self)




    def unmanaged_type(self):

        localctx = CSharp4Parser.Unmanaged_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_unmanaged_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3458
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_no_array_creation_expression_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Primary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_primary_no_array_creation_expression_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_no_array_creation_expression_unsafe" ):
                listener.enterPrimary_no_array_creation_expression_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_no_array_creation_expression_unsafe" ):
                listener.exitPrimary_no_array_creation_expression_unsafe(self)




    def primary_no_array_creation_expression_unsafe(self):

        localctx = CSharp4Parser.Primary_no_array_creation_expression_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_primary_no_array_creation_expression_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3460
            self.primary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expression_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer_indirection_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Pointer_indirection_expressionContext,0)


        def addressof_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Addressof_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_unary_expression_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression_unsafe" ):
                listener.enterUnary_expression_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression_unsafe" ):
                listener.exitUnary_expression_unsafe(self)




    def unary_expression_unsafe(self):

        localctx = CSharp4Parser.Unary_expression_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_unary_expression_unsafe)
        try:
            self.state = 3464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3462
                self.pointer_indirection_expression()
                pass
            elif token in [CSharp4Parser.AMP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3463
                self.addressof_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pointer_indirection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(CSharp4Parser.STAR, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_pointer_indirection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer_indirection_expression" ):
                listener.enterPointer_indirection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer_indirection_expression" ):
                listener.exitPointer_indirection_expression(self)




    def pointer_indirection_expression(self):

        localctx = CSharp4Parser.Pointer_indirection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_pointer_indirection_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3466
            self.match(CSharp4Parser.STAR)
            self.state = 3467
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Addressof_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Unary_expressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_addressof_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddressof_expression" ):
                listener.enterAddressof_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddressof_expression" ):
                listener.exitAddressof_expression(self)




    def addressof_expression(self):

        localctx = CSharp4Parser.Addressof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_addressof_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3469
            self.match(CSharp4Parser.AMP)
            self.state = 3470
            self.unary_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sizeof_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZEOF(self):
            return self.getToken(CSharp4Parser.SIZEOF, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def unmanaged_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Unmanaged_typeContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_sizeof_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeof_expression" ):
                listener.enterSizeof_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeof_expression" ):
                listener.exitSizeof_expression(self)




    def sizeof_expression(self):

        localctx = CSharp4Parser.Sizeof_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_sizeof_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3472
            self.match(CSharp4Parser.SIZEOF)
            self.state = 3473
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3474
            self.unmanaged_type()
            self.state = 3475
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def pointer_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Pointer_typeContext,0)


        def fixed_pointer_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_pointer_declaratorsContext,0)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def embedded_statement(self):
            return self.getTypedRuleContext(CSharp4Parser.Embedded_statementContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_statement" ):
                listener.enterFixed_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_statement" ):
                listener.exitFixed_statement(self)




    def fixed_statement(self):

        localctx = CSharp4Parser.Fixed_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_fixed_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3477
            self.match(CSharp4Parser.FIXED)
            self.state = 3478
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3479
            self.pointer_type()
            self.state = 3480
            self.fixed_pointer_declarators()
            self.state = 3481
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3482
            self.embedded_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_pointer_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_pointer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_pointer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_pointer_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.COMMA)
            else:
                return self.getToken(CSharp4Parser.COMMA, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_pointer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarators" ):
                listener.enterFixed_pointer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarators" ):
                listener.exitFixed_pointer_declarators(self)




    def fixed_pointer_declarators(self):

        localctx = CSharp4Parser.Fixed_pointer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_fixed_pointer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3484
            self.fixed_pointer_declarator()
            self.state = 3489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CSharp4Parser.COMMA:
                self.state = 3485
                self.match(CSharp4Parser.COMMA)
                self.state = 3486
                self.fixed_pointer_declarator()
                self.state = 3491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_pointer_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def fixed_pointer_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_pointer_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_pointer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_declarator" ):
                listener.enterFixed_pointer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_declarator" ):
                listener.exitFixed_pointer_declarator(self)




    def fixed_pointer_declarator(self):

        localctx = CSharp4Parser.Fixed_pointer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_fixed_pointer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3492
            self.identifier()
            self.state = 3493
            self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 3494
            self.fixed_pointer_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_pointer_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMP(self):
            return self.getToken(CSharp4Parser.AMP, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_referenceContext,0)


        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_pointer_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pointer_initializer" ):
                listener.enterFixed_pointer_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pointer_initializer" ):
                listener.exitFixed_pointer_initializer(self)




    def fixed_pointer_initializer(self):

        localctx = CSharp4Parser.Fixed_pointer_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_fixed_pointer_initializer)
        try:
            self.state = 3499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3496
                self.match(CSharp4Parser.AMP)
                self.state = 3497
                self.variable_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3498
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declaration_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_size_buffer_declaration(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declarationContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_member_declaration_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_declaration_unsafe" ):
                listener.enterStruct_member_declaration_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_declaration_unsafe" ):
                listener.exitStruct_member_declaration_unsafe(self)




    def struct_member_declaration_unsafe(self):

        localctx = CSharp4Parser.Struct_member_declaration_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_struct_member_declaration_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3501
            self.fixed_size_buffer_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def buffer_element_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Buffer_element_typeContext,0)


        def fixed_size_buffer_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(CSharp4Parser.AttributesContext,0)


        def fixed_size_buffer_modifiers(self):
            return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_modifiersContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declaration" ):
                listener.enterFixed_size_buffer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declaration" ):
                listener.exitFixed_size_buffer_declaration(self)




    def fixed_size_buffer_declaration(self):

        localctx = CSharp4Parser.Fixed_size_buffer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_fixed_size_buffer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACKET:
                self.state = 3503
                self.attributes()


            self.state = 3507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0):
                self.state = 3506
                self.fixed_size_buffer_modifiers()


            self.state = 3509
            self.match(CSharp4Parser.FIXED)
            self.state = 3510
            self.buffer_element_type()
            self.state = 3511
            self.fixed_size_buffer_declarators()
            self.state = 3512
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_modifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_size_buffer_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_size_buffer_modifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_modifierContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_modifiers" ):
                listener.enterFixed_size_buffer_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_modifiers" ):
                listener.exitFixed_size_buffer_modifiers(self)




    def fixed_size_buffer_modifiers(self):

        localctx = CSharp4Parser.Fixed_size_buffer_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_fixed_size_buffer_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3515 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3514
                self.fixed_size_buffer_modifier()
                self.state = 3517 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_modifier" ):
                listener.enterFixed_size_buffer_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_modifier" ):
                listener.exitFixed_size_buffer_modifier(self)




    def fixed_size_buffer_modifier(self):

        localctx = CSharp4Parser.Fixed_size_buffer_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_fixed_size_buffer_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            _la = self._input.LA(1)
            if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CSharp4Parser.INTERNAL - 55)) | (1 << (CSharp4Parser.NEW - 55)) | (1 << (CSharp4Parser.PRIVATE - 55)) | (1 << (CSharp4Parser.PROTECTED - 55)) | (1 << (CSharp4Parser.PUBLIC - 55)) | (1 << (CSharp4Parser.UNSAFE - 55)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Buffer_element_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_buffer_element_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuffer_element_type" ):
                listener.enterBuffer_element_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuffer_element_type" ):
                listener.exitBuffer_element_type(self)




    def buffer_element_type(self):

        localctx = CSharp4Parser.Buffer_element_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_buffer_element_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            self.any_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_declaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixed_size_buffer_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Fixed_size_buffer_declaratorContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Fixed_size_buffer_declaratorContext,i)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarators" ):
                listener.enterFixed_size_buffer_declarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarators" ):
                listener.exitFixed_size_buffer_declarators(self)




    def fixed_size_buffer_declarators(self):

        localctx = CSharp4Parser.Fixed_size_buffer_declaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_fixed_size_buffer_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3523
                self.fixed_size_buffer_declarator()
                self.state = 3526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CSharp4Parser.ON - 66)) | (1 << (CSharp4Parser.ORDERBY - 66)) | (1 << (CSharp4Parser.PARTIAL - 66)) | (1 << (CSharp4Parser.REMOVE - 66)) | (1 << (CSharp4Parser.SELECT - 66)) | (1 << (CSharp4Parser.SET - 66)) | (1 << (CSharp4Parser.WHERE - 66)) | (1 << (CSharp4Parser.YIELD - 66)) | (1 << (CSharp4Parser.IDENTIFIER - 66)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fixed_size_buffer_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_expressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_fixed_size_buffer_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_size_buffer_declarator" ):
                listener.enterFixed_size_buffer_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_size_buffer_declarator" ):
                listener.exitFixed_size_buffer_declarator(self)




    def fixed_size_buffer_declarator(self):

        localctx = CSharp4Parser.Fixed_size_buffer_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_fixed_size_buffer_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3528
            self.identifier()
            self.state = 3529
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3530
            self.constant_expression()
            self.state = 3531
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Local_variable_initializer_unsafeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stackalloc_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Stackalloc_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_local_variable_initializer_unsafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable_initializer_unsafe" ):
                listener.enterLocal_variable_initializer_unsafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable_initializer_unsafe" ):
                listener.exitLocal_variable_initializer_unsafe(self)




    def local_variable_initializer_unsafe(self):

        localctx = CSharp4Parser.Local_variable_initializer_unsafeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_local_variable_initializer_unsafe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3533
            self.stackalloc_initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Stackalloc_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STACKALLOC(self):
            return self.getToken(CSharp4Parser.STACKALLOC, 0)

        def unmanaged_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Unmanaged_typeContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(CSharp4Parser.ExpressionContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_stackalloc_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStackalloc_initializer" ):
                listener.enterStackalloc_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStackalloc_initializer" ):
                listener.exitStackalloc_initializer(self)




    def stackalloc_initializer(self):

        localctx = CSharp4Parser.Stackalloc_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_stackalloc_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            self.match(CSharp4Parser.STACKALLOC)
            self.state = 3536
            self.unmanaged_type()
            self.state = 3537
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3538
            self.expression()
            self.state = 3539
            self.match(CSharp4Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CSharp4Parser.FROM, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_from_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_contextual_keyword" ):
                listener.enterFrom_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_contextual_keyword" ):
                listener.exitFrom_contextual_keyword(self)




    def from_contextual_keyword(self):

        localctx = CSharp4Parser.From_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_from_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3541
            self.match(CSharp4Parser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(CSharp4Parser.LET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_let_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_contextual_keyword" ):
                listener.enterLet_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_contextual_keyword" ):
                listener.exitLet_contextual_keyword(self)




    def let_contextual_keyword(self):

        localctx = CSharp4Parser.Let_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_let_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3543
            self.match(CSharp4Parser.LET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CSharp4Parser.WHERE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_where_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_contextual_keyword" ):
                listener.enterWhere_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_contextual_keyword" ):
                listener.exitWhere_contextual_keyword(self)




    def where_contextual_keyword(self):

        localctx = CSharp4Parser.Where_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_where_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3545
            self.match(CSharp4Parser.WHERE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(CSharp4Parser.JOIN, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_join_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_contextual_keyword" ):
                listener.enterJoin_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_contextual_keyword" ):
                listener.exitJoin_contextual_keyword(self)




    def join_contextual_keyword(self):

        localctx = CSharp4Parser.Join_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_join_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3547
            self.match(CSharp4Parser.JOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CSharp4Parser.ON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_on_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_contextual_keyword" ):
                listener.enterOn_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_contextual_keyword" ):
                listener.exitOn_contextual_keyword(self)




    def on_contextual_keyword(self):

        localctx = CSharp4Parser.On_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_on_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            self.match(CSharp4Parser.ON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equals_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(CSharp4Parser.EQUALS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_equals_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquals_contextual_keyword" ):
                listener.enterEquals_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquals_contextual_keyword" ):
                listener.exitEquals_contextual_keyword(self)




    def equals_contextual_keyword(self):

        localctx = CSharp4Parser.Equals_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_equals_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551
            self.match(CSharp4Parser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CSharp4Parser.INTO, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_into_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_contextual_keyword" ):
                listener.enterInto_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_contextual_keyword" ):
                listener.exitInto_contextual_keyword(self)




    def into_contextual_keyword(self):

        localctx = CSharp4Parser.Into_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_into_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3553
            self.match(CSharp4Parser.INTO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDERBY(self):
            return self.getToken(CSharp4Parser.ORDERBY, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_orderby_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_contextual_keyword" ):
                listener.enterOrderby_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_contextual_keyword" ):
                listener.exitOrderby_contextual_keyword(self)




    def orderby_contextual_keyword(self):

        localctx = CSharp4Parser.Orderby_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_orderby_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            self.match(CSharp4Parser.ORDERBY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ascending_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(CSharp4Parser.ASCENDING, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_ascending_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAscending_contextual_keyword" ):
                listener.enterAscending_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAscending_contextual_keyword" ):
                listener.exitAscending_contextual_keyword(self)




    def ascending_contextual_keyword(self):

        localctx = CSharp4Parser.Ascending_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_ascending_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(CSharp4Parser.ASCENDING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Descending_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCENDING(self):
            return self.getToken(CSharp4Parser.DESCENDING, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_descending_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescending_contextual_keyword" ):
                listener.enterDescending_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescending_contextual_keyword" ):
                listener.exitDescending_contextual_keyword(self)




    def descending_contextual_keyword(self):

        localctx = CSharp4Parser.Descending_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_descending_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3559
            self.match(CSharp4Parser.DESCENDING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CSharp4Parser.SELECT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_select_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_contextual_keyword" ):
                listener.enterSelect_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_contextual_keyword" ):
                listener.exitSelect_contextual_keyword(self)




    def select_contextual_keyword(self):

        localctx = CSharp4Parser.Select_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_select_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.match(CSharp4Parser.SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(CSharp4Parser.GROUP, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_group_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_contextual_keyword" ):
                listener.enterGroup_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_contextual_keyword" ):
                listener.exitGroup_contextual_keyword(self)




    def group_contextual_keyword(self):

        localctx = CSharp4Parser.Group_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_group_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3563
            self.match(CSharp4Parser.GROUP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class By_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(CSharp4Parser.BY, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_by_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBy_contextual_keyword" ):
                listener.enterBy_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBy_contextual_keyword" ):
                listener.exitBy_contextual_keyword(self)




    def by_contextual_keyword(self):

        localctx = CSharp4Parser.By_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_by_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3565
            self.match(CSharp4Parser.BY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partial_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTIAL(self):
            return self.getToken(CSharp4Parser.PARTIAL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_partial_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartial_contextual_keyword" ):
                listener.enterPartial_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartial_contextual_keyword" ):
                listener.exitPartial_contextual_keyword(self)




    def partial_contextual_keyword(self):

        localctx = CSharp4Parser.Partial_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_partial_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3567
            self.match(CSharp4Parser.PARTIAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(CSharp4Parser.ALIAS, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_alias_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_contextual_keyword" ):
                listener.enterAlias_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_contextual_keyword" ):
                listener.exitAlias_contextual_keyword(self)




    def alias_contextual_keyword(self):

        localctx = CSharp4Parser.Alias_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_alias_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.match(CSharp4Parser.ALIAS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(CSharp4Parser.YIELD, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_yield_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_contextual_keyword" ):
                listener.enterYield_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_contextual_keyword" ):
                listener.exitYield_contextual_keyword(self)




    def yield_contextual_keyword(self):

        localctx = CSharp4Parser.Yield_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_yield_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3571
            self.match(CSharp4Parser.YIELD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Get_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(CSharp4Parser.GET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_get_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_contextual_keyword" ):
                listener.enterGet_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_contextual_keyword" ):
                listener.exitGet_contextual_keyword(self)




    def get_contextual_keyword(self):

        localctx = CSharp4Parser.Get_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_get_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3573
            self.match(CSharp4Parser.GET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CSharp4Parser.SET, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_set_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_contextual_keyword" ):
                listener.enterSet_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_contextual_keyword" ):
                listener.exitSet_contextual_keyword(self)




    def set_contextual_keyword(self):

        localctx = CSharp4Parser.Set_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_set_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575
            self.match(CSharp4Parser.SET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Add_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CSharp4Parser.ADD, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_add_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_contextual_keyword" ):
                listener.enterAdd_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_contextual_keyword" ):
                listener.exitAdd_contextual_keyword(self)




    def add_contextual_keyword(self):

        localctx = CSharp4Parser.Add_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_add_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.match(CSharp4Parser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remove_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CSharp4Parser.REMOVE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_remove_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_contextual_keyword" ):
                listener.enterRemove_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_contextual_keyword" ):
                listener.exitRemove_contextual_keyword(self)




    def remove_contextual_keyword(self):

        localctx = CSharp4Parser.Remove_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_remove_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.match(CSharp4Parser.REMOVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dynamic_contextual_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DYNAMIC(self):
            return self.getToken(CSharp4Parser.DYNAMIC, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_dynamic_contextual_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_contextual_keyword" ):
                listener.enterDynamic_contextual_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_contextual_keyword" ):
                listener.exitDynamic_contextual_keyword(self)




    def dynamic_contextual_keyword(self):

        localctx = CSharp4Parser.Dynamic_contextual_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_dynamic_contextual_keyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3581
            self.match(CSharp4Parser.DYNAMIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGLIST(self):
            return self.getToken(CSharp4Parser.ARGLIST, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)




    def arglist(self):

        localctx = CSharp4Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_arglist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3583
            self.match(CSharp4Parser.ARGLIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_arrowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def ASSIGNMENT(self):
            return self.getToken(CSharp4Parser.ASSIGNMENT, 0)

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_right_arrow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_arrow" ):
                listener.enterRight_arrow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_arrow" ):
                listener.exitRight_arrow(self)




    def right_arrow(self):

        localctx = CSharp4Parser.Right_arrowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_right_arrow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3585
            localctx.first = self.match(CSharp4Parser.ASSIGNMENT)
            self.state = 3586
            localctx.second = self.match(CSharp4Parser.GT)
            self.state = 3587
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_shiftContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.GT)
            else:
                return self.getToken(CSharp4Parser.GT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_right_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift" ):
                listener.enterRight_shift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift" ):
                listener.exitRight_shift(self)




    def right_shift(self):

        localctx = CSharp4Parser.Right_shiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_right_shift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3589
            localctx.first = self.match(CSharp4Parser.GT)
            self.state = 3590
            localctx.second = self.match(CSharp4Parser.GT)
            self.state = 3591
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Right_shift_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.first = None # Token
            self.second = None # Token

        def GT(self):
            return self.getToken(CSharp4Parser.GT, 0)

        def OP_GE(self):
            return self.getToken(CSharp4Parser.OP_GE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_right_shift_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight_shift_assignment" ):
                listener.enterRight_shift_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight_shift_assignment" ):
                listener.exitRight_shift_assignment(self)




    def right_shift_assignment(self):

        localctx = CSharp4Parser.Right_shift_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_right_shift_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3593
            localctx.first = self.match(CSharp4Parser.GT)
            self.state = 3594
            localctx.second = self.match(CSharp4Parser.OP_GE)
            self.state = 3595
            if not (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "$first.index + 1 == $second.index")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(CSharp4Parser.Boolean_literalContext,0)


        def INTEGER_LITERAL(self):
            return self.getToken(CSharp4Parser.INTEGER_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(CSharp4Parser.REAL_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(CSharp4Parser.CHARACTER_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(CSharp4Parser.STRING_LITERAL, 0)

        def NULL(self):
            return self.getToken(CSharp4Parser.NULL, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CSharp4Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_literal)
        try:
            self.state = 3603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CSharp4Parser.FALSE, CSharp4Parser.TRUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3597
                self.boolean_literal()
                pass
            elif token in [CSharp4Parser.INTEGER_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3598
                self.match(CSharp4Parser.INTEGER_LITERAL)
                pass
            elif token in [CSharp4Parser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3599
                self.match(CSharp4Parser.REAL_LITERAL)
                pass
            elif token in [CSharp4Parser.CHARACTER_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3600
                self.match(CSharp4Parser.CHARACTER_LITERAL)
                pass
            elif token in [CSharp4Parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3601
                self.match(CSharp4Parser.STRING_LITERAL)
                pass
            elif token in [CSharp4Parser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3602
                self.match(CSharp4Parser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = CSharp4Parser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3605
            _la = self._input.LA(1)
            if not(_la==CSharp4Parser.FALSE or _la==CSharp4Parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(CSharp4Parser.ABSTRACT, 0)

        def AS(self):
            return self.getToken(CSharp4Parser.AS, 0)

        def BASE(self):
            return self.getToken(CSharp4Parser.BASE, 0)

        def BOOL(self):
            return self.getToken(CSharp4Parser.BOOL, 0)

        def BREAK(self):
            return self.getToken(CSharp4Parser.BREAK, 0)

        def BYTE(self):
            return self.getToken(CSharp4Parser.BYTE, 0)

        def CASE(self):
            return self.getToken(CSharp4Parser.CASE, 0)

        def CATCH(self):
            return self.getToken(CSharp4Parser.CATCH, 0)

        def CHAR(self):
            return self.getToken(CSharp4Parser.CHAR, 0)

        def CHECKED(self):
            return self.getToken(CSharp4Parser.CHECKED, 0)

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def CONTINUE(self):
            return self.getToken(CSharp4Parser.CONTINUE, 0)

        def DECIMAL(self):
            return self.getToken(CSharp4Parser.DECIMAL, 0)

        def DEFAULT(self):
            return self.getToken(CSharp4Parser.DEFAULT, 0)

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def DO(self):
            return self.getToken(CSharp4Parser.DO, 0)

        def DOUBLE(self):
            return self.getToken(CSharp4Parser.DOUBLE, 0)

        def ELSE(self):
            return self.getToken(CSharp4Parser.ELSE, 0)

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def EXPLICIT(self):
            return self.getToken(CSharp4Parser.EXPLICIT, 0)

        def EXTERN(self):
            return self.getToken(CSharp4Parser.EXTERN, 0)

        def FALSE(self):
            return self.getToken(CSharp4Parser.FALSE, 0)

        def FINALLY(self):
            return self.getToken(CSharp4Parser.FINALLY, 0)

        def FIXED(self):
            return self.getToken(CSharp4Parser.FIXED, 0)

        def FLOAT(self):
            return self.getToken(CSharp4Parser.FLOAT, 0)

        def FOR(self):
            return self.getToken(CSharp4Parser.FOR, 0)

        def FOREACH(self):
            return self.getToken(CSharp4Parser.FOREACH, 0)

        def GOTO(self):
            return self.getToken(CSharp4Parser.GOTO, 0)

        def IF(self):
            return self.getToken(CSharp4Parser.IF, 0)

        def IMPLICIT(self):
            return self.getToken(CSharp4Parser.IMPLICIT, 0)

        def IN(self):
            return self.getToken(CSharp4Parser.IN, 0)

        def INT(self):
            return self.getToken(CSharp4Parser.INT, 0)

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def INTERNAL(self):
            return self.getToken(CSharp4Parser.INTERNAL, 0)

        def IS(self):
            return self.getToken(CSharp4Parser.IS, 0)

        def LOCK(self):
            return self.getToken(CSharp4Parser.LOCK, 0)

        def LONG(self):
            return self.getToken(CSharp4Parser.LONG, 0)

        def NAMESPACE(self):
            return self.getToken(CSharp4Parser.NAMESPACE, 0)

        def NEW(self):
            return self.getToken(CSharp4Parser.NEW, 0)

        def NULL(self):
            return self.getToken(CSharp4Parser.NULL, 0)

        def OBJECT(self):
            return self.getToken(CSharp4Parser.OBJECT, 0)

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(CSharp4Parser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(CSharp4Parser.OVERRIDE, 0)

        def PARAMS(self):
            return self.getToken(CSharp4Parser.PARAMS, 0)

        def PRIVATE(self):
            return self.getToken(CSharp4Parser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(CSharp4Parser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(CSharp4Parser.PUBLIC, 0)

        def READONLY(self):
            return self.getToken(CSharp4Parser.READONLY, 0)

        def REF(self):
            return self.getToken(CSharp4Parser.REF, 0)

        def RETURN(self):
            return self.getToken(CSharp4Parser.RETURN, 0)

        def SBYTE(self):
            return self.getToken(CSharp4Parser.SBYTE, 0)

        def SEALED(self):
            return self.getToken(CSharp4Parser.SEALED, 0)

        def SHORT(self):
            return self.getToken(CSharp4Parser.SHORT, 0)

        def SIZEOF(self):
            return self.getToken(CSharp4Parser.SIZEOF, 0)

        def STACKALLOC(self):
            return self.getToken(CSharp4Parser.STACKALLOC, 0)

        def STATIC(self):
            return self.getToken(CSharp4Parser.STATIC, 0)

        def STRING(self):
            return self.getToken(CSharp4Parser.STRING, 0)

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def SWITCH(self):
            return self.getToken(CSharp4Parser.SWITCH, 0)

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def THROW(self):
            return self.getToken(CSharp4Parser.THROW, 0)

        def TRUE(self):
            return self.getToken(CSharp4Parser.TRUE, 0)

        def TRY(self):
            return self.getToken(CSharp4Parser.TRY, 0)

        def TYPEOF(self):
            return self.getToken(CSharp4Parser.TYPEOF, 0)

        def UINT(self):
            return self.getToken(CSharp4Parser.UINT, 0)

        def ULONG(self):
            return self.getToken(CSharp4Parser.ULONG, 0)

        def UNCHECKED(self):
            return self.getToken(CSharp4Parser.UNCHECKED, 0)

        def UNSAFE(self):
            return self.getToken(CSharp4Parser.UNSAFE, 0)

        def USHORT(self):
            return self.getToken(CSharp4Parser.USHORT, 0)

        def USING(self):
            return self.getToken(CSharp4Parser.USING, 0)

        def VIRTUAL(self):
            return self.getToken(CSharp4Parser.VIRTUAL, 0)

        def VOID(self):
            return self.getToken(CSharp4Parser.VOID, 0)

        def VOLATILE(self):
            return self.getToken(CSharp4Parser.VOLATILE, 0)

        def WHILE(self):
            return self.getToken(CSharp4Parser.WHILE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = CSharp4Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ABSTRACT) | (1 << CSharp4Parser.AS) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BREAK) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CASE) | (1 << CSharp4Parser.CATCH) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.CLASS) | (1 << CSharp4Parser.CONST) | (1 << CSharp4Parser.CONTINUE) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DO) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.ELSE) | (1 << CSharp4Parser.ENUM) | (1 << CSharp4Parser.EVENT) | (1 << CSharp4Parser.EXPLICIT) | (1 << CSharp4Parser.EXTERN) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FINALLY) | (1 << CSharp4Parser.FIXED) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FOR) | (1 << CSharp4Parser.FOREACH) | (1 << CSharp4Parser.GOTO) | (1 << CSharp4Parser.IF) | (1 << CSharp4Parser.IMPLICIT) | (1 << CSharp4Parser.IN) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTERFACE) | (1 << CSharp4Parser.INTERNAL) | (1 << CSharp4Parser.IS) | (1 << CSharp4Parser.LOCK) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NAMESPACE) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.OPERATOR - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.OVERRIDE - 64)) | (1 << (CSharp4Parser.PARAMS - 64)) | (1 << (CSharp4Parser.PRIVATE - 64)) | (1 << (CSharp4Parser.PROTECTED - 64)) | (1 << (CSharp4Parser.PUBLIC - 64)) | (1 << (CSharp4Parser.READONLY - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.RETURN - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SEALED - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STACKALLOC - 64)) | (1 << (CSharp4Parser.STATIC - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.STRUCT - 64)) | (1 << (CSharp4Parser.SWITCH - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.THROW - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TRY - 64)) | (1 << (CSharp4Parser.TYPEOF - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.UNSAFE - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.USING - 64)) | (1 << (CSharp4Parser.VIRTUAL - 64)) | (1 << (CSharp4Parser.VOID - 64)) | (1 << (CSharp4Parser.VOLATILE - 64)) | (1 << (CSharp4Parser.WHILE - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CSharp4Parser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def class_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def class_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Class_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_class_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_definition" ):
                listener.enterClass_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_definition" ):
                listener.exitClass_definition(self)




    def class_definition(self):

        localctx = CSharp4Parser.Class_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_class_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3609
            self.match(CSharp4Parser.CLASS)
            self.state = 3610
            self.identifier()
            self.state = 3612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3611
                self.type_parameter_list()


            self.state = 3615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3614
                self.class_base()


            self.state = 3618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3617
                self.type_parameter_constraints_clauses()


            self.state = 3620
            self.class_body()
            self.state = 3622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3621
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(CSharp4Parser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def struct_interfaces(self):
            return self.getTypedRuleContext(CSharp4Parser.Struct_interfacesContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_struct_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_definition" ):
                listener.enterStruct_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_definition" ):
                listener.exitStruct_definition(self)




    def struct_definition(self):

        localctx = CSharp4Parser.Struct_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_struct_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3624
            self.match(CSharp4Parser.STRUCT)
            self.state = 3625
            self.identifier()
            self.state = 3627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3626
                self.type_parameter_list()


            self.state = 3630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3629
                self.struct_interfaces()


            self.state = 3633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3632
                self.type_parameter_constraints_clauses()


            self.state = 3635
            self.struct_body()
            self.state = 3637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3636
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(CSharp4Parser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def interface_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_bodyContext,0)


        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type_parameter_listContext,0)


        def interface_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_baseContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_definition" ):
                listener.enterInterface_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_definition" ):
                listener.exitInterface_definition(self)




    def interface_definition(self):

        localctx = CSharp4Parser.Interface_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_interface_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3639
            self.match(CSharp4Parser.INTERFACE)
            self.state = 3640
            self.identifier()
            self.state = 3642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3641
                self.variant_type_parameter_list()


            self.state = 3645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3644
                self.interface_base()


            self.state = 3648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3647
                self.type_parameter_constraints_clauses()


            self.state = 3650
            self.interface_body()
            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3651
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(CSharp4Parser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def enum_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_bodyContext,0)


        def enum_base(self):
            return self.getTypedRuleContext(CSharp4Parser.Enum_baseContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_enum_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_definition" ):
                listener.enterEnum_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_definition" ):
                listener.exitEnum_definition(self)




    def enum_definition(self):

        localctx = CSharp4Parser.Enum_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_enum_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3654
            self.match(CSharp4Parser.ENUM)
            self.state = 3655
            self.identifier()
            self.state = 3657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3656
                self.enum_base()


            self.state = 3659
            self.enum_body()
            self.state = 3661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.SEMICOLON:
                self.state = 3660
                self.match(CSharp4Parser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delegate_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELEGATE(self):
            return self.getToken(CSharp4Parser.DELEGATE, 0)

        def return_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Return_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def variant_type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Variant_type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_delegate_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegate_definition" ):
                listener.enterDelegate_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegate_definition" ):
                listener.exitDelegate_definition(self)




    def delegate_definition(self):

        localctx = CSharp4Parser.Delegate_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_delegate_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3663
            self.match(CSharp4Parser.DELEGATE)
            self.state = 3664
            self.return_type()
            self.state = 3665
            self.identifier()
            self.state = 3667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3666
                self.variant_type_parameter_list()


            self.state = 3669
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3670
                self.formal_parameter_list()


            self.state = 3673
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3674
                self.type_parameter_constraints_clauses()


            self.state = 3677
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def event_accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Event_accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_event_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration2" ):
                listener.enterEvent_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration2" ):
                listener.exitEvent_declaration2(self)




    def event_declaration2(self):

        localctx = CSharp4Parser.Event_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_event_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3679
            self.match(CSharp4Parser.EVENT)
            self.state = 3680
            self.any_type()
            self.state = 3689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3681
                self.variable_declarators()
                self.state = 3682
                self.match(CSharp4Parser.SEMICOLON)
                pass

            elif la_ == 2:
                self.state = 3684
                self.member_name()
                self.state = 3685
                self.match(CSharp4Parser.OPEN_BRACE)
                self.state = 3686
                self.event_accessor_declarations()
                self.state = 3687
                self.match(CSharp4Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Variable_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_field_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration2" ):
                listener.enterField_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration2" ):
                listener.exitField_declaration2(self)




    def field_declaration2(self):

        localctx = CSharp4Parser.Field_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_field_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3691
            self.variable_declarators()
            self.state = 3692
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Property_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Member_nameContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_property_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty_declaration2" ):
                listener.enterProperty_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty_declaration2" ):
                listener.exitProperty_declaration2(self)




    def property_declaration2(self):

        localctx = CSharp4Parser.Property_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_property_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3694
            self.member_name()
            self.state = 3695
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3696
            self.accessor_declarations()
            self.state = 3697
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(CSharp4Parser.CONST, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def constant_declarators(self):
            return self.getTypedRuleContext(CSharp4Parser.Constant_declaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_constant_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration2" ):
                listener.enterConstant_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration2" ):
                listener.exitConstant_declaration2(self)




    def constant_declaration2(self):

        localctx = CSharp4Parser.Constant_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_constant_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3699
            self.match(CSharp4Parser.CONST)
            self.state = 3700
            self.any_type()
            self.state = 3701
            self.constant_declarators()
            self.state = 3702
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexer_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def accessor_declarations(self):
            return self.getTypedRuleContext(CSharp4Parser.Accessor_declarationsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_indexer_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexer_declaration2" ):
                listener.enterIndexer_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexer_declaration2" ):
                listener.exitIndexer_declaration2(self)




    def indexer_declaration2(self):

        localctx = CSharp4Parser.Indexer_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_indexer_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3704
            self.match(CSharp4Parser.THIS)
            self.state = 3705
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3706
            self.formal_parameter_list()
            self.state = 3707
            self.match(CSharp4Parser.CLOSE_BRACKET)
            self.state = 3708
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3709
            self.accessor_declarations()
            self.state = 3710
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Destructor_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(CSharp4Parser.TILDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def destructor_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Destructor_bodyContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_destructor_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestructor_definition" ):
                listener.enterDestructor_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestructor_definition" ):
                listener.exitDestructor_definition(self)




    def destructor_definition(self):

        localctx = CSharp4Parser.Destructor_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_destructor_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3712
            self.match(CSharp4Parser.TILDE)
            self.state = 3713
            self.identifier()
            self.state = 3714
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3715
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3716
            self.destructor_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def body(self):
            return self.getTypedRuleContext(CSharp4Parser.BodyContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def constructor_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Constructor_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_constructor_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration2" ):
                listener.enterConstructor_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration2" ):
                listener.exitConstructor_declaration2(self)




    def constructor_declaration2(self):

        localctx = CSharp4Parser.Constructor_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_constructor_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3718
            self.identifier()
            self.state = 3719
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3720
                self.formal_parameter_list()


            self.state = 3723
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COLON:
                self.state = 3724
                self.constructor_initializer()


            self.state = 3727
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_member_nameContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def method_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_bodyContext,0)


        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration2" ):
                listener.enterMethod_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration2" ):
                listener.exitMethod_declaration2(self)




    def method_declaration2(self):

        localctx = CSharp4Parser.Method_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_method_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3729
            self.method_member_name()
            self.state = 3731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3730
                self.type_parameter_list()


            self.state = 3733
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3734
                self.formal_parameter_list()


            self.state = 3737
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3738
                self.type_parameter_constraints_clauses()


            self.state = 3741
            self.method_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_member_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_member_name2(self):
            return self.getTypedRuleContext(CSharp4Parser.Method_member_name2Context,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name" ):
                listener.enterMethod_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name" ):
                listener.exitMethod_member_name(self)




    def method_member_name(self):

        localctx = CSharp4Parser.Method_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_method_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3743
            self.method_member_name2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_member_name2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def DOUBLE_COLON(self):
            return self.getToken(CSharp4Parser.DOUBLE_COLON, 0)

        def type_argument_list_opt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Type_argument_list_optContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Type_argument_list_optContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CSharp4Parser.DOT)
            else:
                return self.getToken(CSharp4Parser.DOT, i)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_member_name2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_member_name2" ):
                listener.enterMethod_member_name2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_member_name2" ):
                listener.exitMethod_member_name2(self)




    def method_member_name2(self):

        localctx = CSharp4Parser.Method_member_name2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_method_member_name2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.state = 3745
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3746
                self.identifier()
                self.state = 3747
                self.match(CSharp4Parser.DOUBLE_COLON)
                self.state = 3748
                self.identifier()
                pass


            self.state = 3758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,402,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3752
                    self.type_argument_list_opt()
                    self.state = 3753
                    self.match(CSharp4Parser.DOT)
                    self.state = 3754
                    self.identifier() 
                self.state = 3760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,402,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Operator_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(CSharp4Parser.OPERATOR, 0)

        def overloadable_operator(self):
            return self.getTypedRuleContext(CSharp4Parser.Overloadable_operatorContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def any_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.Any_typeContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,i)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CSharp4Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,i)


        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def operator_body(self):
            return self.getTypedRuleContext(CSharp4Parser.Operator_bodyContext,0)


        def COMMA(self):
            return self.getToken(CSharp4Parser.COMMA, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_operator_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration2" ):
                listener.enterOperator_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration2" ):
                listener.exitOperator_declaration2(self)




    def operator_declaration2(self):

        localctx = CSharp4Parser.Operator_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_operator_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(CSharp4Parser.OPERATOR)
            self.state = 3762
            self.overloadable_operator()
            self.state = 3763
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3764
            self.any_type()
            self.state = 3765
            self.identifier()
            self.state = 3770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.COMMA:
                self.state = 3766
                self.match(CSharp4Parser.COMMA)
                self.state = 3767
                self.any_type()
                self.state = 3768
                self.identifier()


            self.state = 3772
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3773
            self.operator_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_method_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def type_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_listContext,0)


        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def type_parameter_constraints_clauses(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_parameter_constraints_clausesContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_method_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_method_declaration2" ):
                listener.enterInterface_method_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_method_declaration2" ):
                listener.exitInterface_method_declaration2(self)




    def interface_method_declaration2(self):

        localctx = CSharp4Parser.Interface_method_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_interface_method_declaration2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3775
            self.identifier()
            self.state = 3777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.LT:
                self.state = 3776
                self.type_parameter_list()


            self.state = 3779
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CSharp4Parser.OBJECT - 65)) | (1 << (CSharp4Parser.ON - 65)) | (1 << (CSharp4Parser.ORDERBY - 65)) | (1 << (CSharp4Parser.OUT - 65)) | (1 << (CSharp4Parser.PARAMS - 65)) | (1 << (CSharp4Parser.PARTIAL - 65)) | (1 << (CSharp4Parser.REF - 65)) | (1 << (CSharp4Parser.REMOVE - 65)) | (1 << (CSharp4Parser.SBYTE - 65)) | (1 << (CSharp4Parser.SELECT - 65)) | (1 << (CSharp4Parser.SET - 65)) | (1 << (CSharp4Parser.SHORT - 65)) | (1 << (CSharp4Parser.STRING - 65)) | (1 << (CSharp4Parser.THIS - 65)) | (1 << (CSharp4Parser.UINT - 65)) | (1 << (CSharp4Parser.ULONG - 65)) | (1 << (CSharp4Parser.USHORT - 65)) | (1 << (CSharp4Parser.VOID - 65)) | (1 << (CSharp4Parser.WHERE - 65)) | (1 << (CSharp4Parser.YIELD - 65)) | (1 << (CSharp4Parser.IDENTIFIER - 65)) | (1 << (CSharp4Parser.OPEN_BRACKET - 65)))) != 0):
                self.state = 3780
                self.formal_parameter_list()


            self.state = 3783
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.WHERE:
                self.state = 3784
                self.type_parameter_constraints_clauses()


            self.state = 3787
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_property_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_property_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_property_declaration2" ):
                listener.enterInterface_property_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_property_declaration2" ):
                listener.exitInterface_property_declaration2(self)




    def interface_property_declaration2(self):

        localctx = CSharp4Parser.Interface_property_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_interface_property_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3789
            self.identifier()
            self.state = 3790
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3791
            self.interface_accessors()
            self.state = 3792
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_event_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(CSharp4Parser.EVENT, 0)

        def any_type(self):
            return self.getTypedRuleContext(CSharp4Parser.Any_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(CSharp4Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_event_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_event_declaration2" ):
                listener.enterInterface_event_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_event_declaration2" ):
                listener.exitInterface_event_declaration2(self)




    def interface_event_declaration2(self):

        localctx = CSharp4Parser.Interface_event_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_interface_event_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3794
            self.match(CSharp4Parser.EVENT)
            self.state = 3795
            self.any_type()
            self.state = 3796
            self.identifier()
            self.state = 3797
            self.match(CSharp4Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interface_indexer_declaration2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(CSharp4Parser.THIS, 0)

        def OPEN_BRACKET(self):
            return self.getToken(CSharp4Parser.OPEN_BRACKET, 0)

        def formal_parameter_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Formal_parameter_listContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(CSharp4Parser.OPEN_BRACE, 0)

        def interface_accessors(self):
            return self.getTypedRuleContext(CSharp4Parser.Interface_accessorsContext,0)


        def CLOSE_BRACE(self):
            return self.getToken(CSharp4Parser.CLOSE_BRACE, 0)

        def getRuleIndex(self):
            return CSharp4Parser.RULE_interface_indexer_declaration2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_indexer_declaration2" ):
                listener.enterInterface_indexer_declaration2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_indexer_declaration2" ):
                listener.exitInterface_indexer_declaration2(self)




    def interface_indexer_declaration2(self):

        localctx = CSharp4Parser.Interface_indexer_declaration2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_interface_indexer_declaration2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3799
            self.match(CSharp4Parser.THIS)
            self.state = 3800
            self.match(CSharp4Parser.OPEN_BRACKET)
            self.state = 3801
            self.formal_parameter_list()
            self.state = 3802
            self.match(CSharp4Parser.CLOSE_BRACKET)
            self.state = 3803
            self.match(CSharp4Parser.OPEN_BRACE)
            self.state = 3804
            self.interface_accessors()
            self.state = 3805
            self.match(CSharp4Parser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Member_access2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(CSharp4Parser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CSharp4Parser.IdentifierContext,0)


        def type_argument_list_opt(self):
            return self.getTypedRuleContext(CSharp4Parser.Type_argument_list_optContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_member_access2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_access2" ):
                listener.enterMember_access2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_access2" ):
                listener.exitMember_access2(self)




    def member_access2(self):

        localctx = CSharp4Parser.Member_access2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_member_access2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3807
            self.match(CSharp4Parser.DOT)
            self.state = 3808
            self.identifier()
            self.state = 3809
            self.type_argument_list_opt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_invocation2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_method_invocation2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation2" ):
                listener.enterMethod_invocation2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation2" ):
                listener.exitMethod_invocation2(self)




    def method_invocation2(self):

        localctx = CSharp4Parser.Method_invocation2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_method_invocation2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3811
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TYPEOF - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 3812
                self.argument_list()


            self.state = 3815
            self.match(CSharp4Parser.CLOSE_PARENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_creation_expression2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PARENS(self):
            return self.getToken(CSharp4Parser.OPEN_PARENS, 0)

        def CLOSE_PARENS(self):
            return self.getToken(CSharp4Parser.CLOSE_PARENS, 0)

        def argument_list(self):
            return self.getTypedRuleContext(CSharp4Parser.Argument_listContext,0)


        def object_or_collection_initializer(self):
            return self.getTypedRuleContext(CSharp4Parser.Object_or_collection_initializerContext,0)


        def getRuleIndex(self):
            return CSharp4Parser.RULE_object_creation_expression2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_creation_expression2" ):
                listener.enterObject_creation_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_creation_expression2" ):
                listener.exitObject_creation_expression2(self)




    def object_creation_expression2(self):

        localctx = CSharp4Parser.Object_creation_expression2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_object_creation_expression2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3817
            self.match(CSharp4Parser.OPEN_PARENS)
            self.state = 3819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CSharp4Parser.ADD) | (1 << CSharp4Parser.ALIAS) | (1 << CSharp4Parser.ARGLIST) | (1 << CSharp4Parser.ASCENDING) | (1 << CSharp4Parser.BASE) | (1 << CSharp4Parser.BOOL) | (1 << CSharp4Parser.BY) | (1 << CSharp4Parser.BYTE) | (1 << CSharp4Parser.CHAR) | (1 << CSharp4Parser.CHECKED) | (1 << CSharp4Parser.DECIMAL) | (1 << CSharp4Parser.DEFAULT) | (1 << CSharp4Parser.DELEGATE) | (1 << CSharp4Parser.DESCENDING) | (1 << CSharp4Parser.DOUBLE) | (1 << CSharp4Parser.DYNAMIC) | (1 << CSharp4Parser.EQUALS) | (1 << CSharp4Parser.FALSE) | (1 << CSharp4Parser.FLOAT) | (1 << CSharp4Parser.FROM) | (1 << CSharp4Parser.GET) | (1 << CSharp4Parser.GROUP) | (1 << CSharp4Parser.INT) | (1 << CSharp4Parser.INTO) | (1 << CSharp4Parser.JOIN) | (1 << CSharp4Parser.LET) | (1 << CSharp4Parser.LONG) | (1 << CSharp4Parser.NEW))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CSharp4Parser.NULL - 64)) | (1 << (CSharp4Parser.OBJECT - 64)) | (1 << (CSharp4Parser.ON - 64)) | (1 << (CSharp4Parser.ORDERBY - 64)) | (1 << (CSharp4Parser.OUT - 64)) | (1 << (CSharp4Parser.PARTIAL - 64)) | (1 << (CSharp4Parser.REF - 64)) | (1 << (CSharp4Parser.REMOVE - 64)) | (1 << (CSharp4Parser.SBYTE - 64)) | (1 << (CSharp4Parser.SELECT - 64)) | (1 << (CSharp4Parser.SET - 64)) | (1 << (CSharp4Parser.SHORT - 64)) | (1 << (CSharp4Parser.SIZEOF - 64)) | (1 << (CSharp4Parser.STRING - 64)) | (1 << (CSharp4Parser.THIS - 64)) | (1 << (CSharp4Parser.TRUE - 64)) | (1 << (CSharp4Parser.TYPEOF - 64)) | (1 << (CSharp4Parser.UINT - 64)) | (1 << (CSharp4Parser.ULONG - 64)) | (1 << (CSharp4Parser.UNCHECKED - 64)) | (1 << (CSharp4Parser.USHORT - 64)) | (1 << (CSharp4Parser.WHERE - 64)) | (1 << (CSharp4Parser.YIELD - 64)) | (1 << (CSharp4Parser.IDENTIFIER - 64)) | (1 << (CSharp4Parser.INTEGER_LITERAL - 64)) | (1 << (CSharp4Parser.REAL_LITERAL - 64)) | (1 << (CSharp4Parser.CHARACTER_LITERAL - 64)) | (1 << (CSharp4Parser.STRING_LITERAL - 64)) | (1 << (CSharp4Parser.OPEN_PARENS - 64)) | (1 << (CSharp4Parser.PLUS - 64)) | (1 << (CSharp4Parser.MINUS - 64)) | (1 << (CSharp4Parser.STAR - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CSharp4Parser.AMP - 129)) | (1 << (CSharp4Parser.BANG - 129)) | (1 << (CSharp4Parser.TILDE - 129)) | (1 << (CSharp4Parser.OP_INC - 129)) | (1 << (CSharp4Parser.OP_DEC - 129)))) != 0):
                self.state = 3818
                self.argument_list()


            self.state = 3821
            self.match(CSharp4Parser.CLOSE_PARENS)
            self.state = 3823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CSharp4Parser.OPEN_BRACE:
                self.state = 3822
                self.object_or_collection_initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[377] = self.right_arrow_sempred
        self._predicates[378] = self.right_shift_sempred
        self._predicates[379] = self.right_shift_assignment_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def right_arrow_sempred(self, localctx:Right_arrowContext, predIndex:int):
            if predIndex == 0:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_sempred(self, localctx:Right_shiftContext, predIndex:int):
            if predIndex == 1:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         

    def right_shift_assignment_sempred(self, localctx:Right_shift_assignmentContext, predIndex:int):
            if predIndex == 2:
                return (0 if localctx.first is None else localctx.first.tokenIndex) + 1 == (0 if localctx.second is None else localctx.second.tokenIndex)
         




