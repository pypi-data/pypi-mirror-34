Metadata-Version: 2.1
Name: gameanalysis
Version: 8.0.3
Summary: A python module for analyzing sparse and empirical games
Home-page: https://github.com/egtaonline/gameanalysis.git
Author: Strategic Reasoning Group
Author-email: strategic.reasoning.group@umich.edu
License: Apache 2.0
Platform: UNKNOWN
Provides-Extra: nn
Provides-Extra: dev
Requires-Dist: numpy (~=1.13)
Requires-Dist: scipy (~=1.0)
Requires-Dist: scikit-learn (~=0.18)
Provides-Extra: dev
Requires-Dist: autograd (~=1.2); extra == 'dev'
Requires-Dist: ipython (~=6.1); extra == 'dev'
Requires-Dist: mock (~=2.0); extra == 'dev'
Requires-Dist: pylint-quotes (~=0.1); extra == 'dev'
Requires-Dist: pylint (~=1.8); extra == 'dev'
Requires-Dist: pytest-cov (~=2.5); extra == 'dev'
Requires-Dist: pytest-xdist (~=1.18); extra == 'dev'
Requires-Dist: pytest (~=3.2); extra == 'dev'
Requires-Dist: sphinx (~=1.6); extra == 'dev'
Requires-Dist: tabulate (~=0.8); extra == 'dev'
Requires-Dist: twine (~=1.9); extra == 'dev'
Requires-Dist: wheel (~=0.29); extra == 'dev'
Provides-Extra: nn
Requires-Dist: Keras (~=2.0); extra == 'nn'
Requires-Dist: tensorflow (~=1.3); extra == 'nn'

Game Analysis
=============

[![Build Status](https://img.shields.io/travis/egtaonline/gameanalysis/master.svg?style=flat-square)](https://travis-ci.org/egtaonline/gameanalysis)
[![Coverage Status](https://img.shields.io/coveralls/github/egtaonline/gameanalysis/master.svg?style=flat-square)](https://coveralls.io/github/egtaonline/gameanalysis?branch=master)

This is a collection of python libraries and scripts that manipulate empirical game data.


Usage Setup
-----------

This package is hosted on pypi. Install it with `pip install gameanalysis`.

The entry point from the command line is `ga`. `ga --help` will document all
available options.

The entry point for python is `gameanalysis`. See the documentation for what is
available from the python interface.


Developing
==========

After cloning this repository, the included `Makefile` includes all the relevant actions to facilitate development.
Typing `make` without targets will print out the various actions to help development.
Type `make setup` to configure a virtual environment for development.


Requirements
------------

1. Python 3 & venv
2. BLAS/LAPACK
3. A fortran compiler


Testing
-------

All of the tests can be run with `make test`.
Running `make check` will search for style compliance, and `make format` will try to fix some in places.
`make docs` will make the documentation.


