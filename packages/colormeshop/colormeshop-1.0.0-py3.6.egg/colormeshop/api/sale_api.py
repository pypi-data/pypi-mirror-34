# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from colormeshop.api_client import ApiClient


class SaleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_sale(self, sale_id, **kwargs):  # noqa: E501
        """受注のキャンセル  # noqa: E501

        受注をキャンセルすると、以下のことが起こります。  - 該当受注の商品購入数が0になる - 該当受注の合計金額が0になる - 該当受注の`canceled`が`true`になる - 該当受注に使用されたショップポイント・GMOポイントがキャンセルされる - 該当受注の決済がAmazon Pay、または楽天ペイ（オンライン決済）である場合は、決済金額が自動的に購入者へ返金される - カラメル等の販売手数料が0になる   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_sale(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :param object unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancel_sale_with_http_info(sale_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_sale_with_http_info(sale_id, **kwargs)  # noqa: E501
            return data

    def cancel_sale_with_http_info(self, sale_id, **kwargs):  # noqa: E501
        """受注のキャンセル  # noqa: E501

        受注をキャンセルすると、以下のことが起こります。  - 該当受注の商品購入数が0になる - 該当受注の合計金額が0になる - 該当受注の`canceled`が`true`になる - 該当受注に使用されたショップポイント・GMOポイントがキャンセルされる - 該当受注の決済がAmazon Pay、または楽天ペイ（オンライン決済）である場合は、決済金額が自動的に購入者へ返金される - カラメル等の販売手数料が0になる   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_sale_with_http_info(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :param object unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sale_id', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_sale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sale_id' is set
        if ('sale_id' not in params or
                params['sale_id'] is None):
            raise ValueError("Missing the required parameter `sale_id` when calling `cancel_sale`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sale_id' in params:
            path_params['saleId'] = params['sale_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sales/{saleId}/cancel.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sale(self, sale_id, **kwargs):  # noqa: E501
        """受注データの取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sale(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_sale_with_http_info(sale_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sale_with_http_info(sale_id, **kwargs)  # noqa: E501
            return data

    def get_sale_with_http_info(self, sale_id, **kwargs):  # noqa: E501
        """受注データの取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sale_with_http_info(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sale_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sale_id' is set
        if ('sale_id' not in params or
                params['sale_id'] is None):
            raise ValueError("Missing the required parameter `sale_id` when calling `get_sale`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sale_id' in params:
            path_params['saleId'] = params['sale_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sales/{saleId}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sales(self, **kwargs):  # noqa: E501
        """受注データのリストを取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sales(async=True)
        >>> result = thread.get()

        :param async bool
        :param str ids: 受注IDで検索。カンマ区切りで複数指定可能
        :param str after: 指定日時以降の受注から検索
        :param str before: 指定日時以前の受注から検索
        :param str make_date_min: `after`と同義
        :param str make_date_max: `before`と同義
        :param str update_date_min: 指定日時以降に更新された受注から検索
        :param str update_date_max: 指定日時以降に更新された受注から検索
        :param str customer_ids: 購入した顧客IDで検索。カンマ区切りにすることで複数検索が可能
        :param str customer_name: 購入した顧客名で部分一致検索
        :param str customer_furigana: 購入した顧客フリガナがで部分一致検索
        :param str customer_mail: 購入した顧客メールアドレスで部分一致検索
        :param int accepted_mail_state: 受注メールの送信状態で検索  - `0`: 未送信 - `1`: 送信済み - `2`: 送信しない 
        :param int paid_mail_state: 入金メールの送信状態で検索  - `0`: 未送信 - `1`: 送信済み - `2`: 送信しない 
        :param int delivered_mail_state: 配送メールの送信状態で検索  - `0`: 未送信 - `1`: 送信済み - `2`: 送信しない 
        :param bool mobile: `true`なら携帯からの受注のみ取得
        :param bool paid: `true`なら入金済みの受注のみ取得
        :param bool delivered: `true`なら配送済みの受注のみ取得
        :param str payment_ids: 使用された決済のIDで検索。カンマ区切りで複数指定可能
        :param str fields: レスポンスJSONのキーをカンマ区切りで指定
        :param int limit: レスポンスの件数を指定。指定がない場合は10。最大50
        :param int offset: 指定した数値+1件目以降のデータを返す
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_sales_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sales_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sales_with_http_info(self, **kwargs):  # noqa: E501
        """受注データのリストを取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sales_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str ids: 受注IDで検索。カンマ区切りで複数指定可能
        :param str after: 指定日時以降の受注から検索
        :param str before: 指定日時以前の受注から検索
        :param str make_date_min: `after`と同義
        :param str make_date_max: `before`と同義
        :param str update_date_min: 指定日時以降に更新された受注から検索
        :param str update_date_max: 指定日時以降に更新された受注から検索
        :param str customer_ids: 購入した顧客IDで検索。カンマ区切りにすることで複数検索が可能
        :param str customer_name: 購入した顧客名で部分一致検索
        :param str customer_furigana: 購入した顧客フリガナがで部分一致検索
        :param str customer_mail: 購入した顧客メールアドレスで部分一致検索
        :param int accepted_mail_state: 受注メールの送信状態で検索  - `0`: 未送信 - `1`: 送信済み - `2`: 送信しない 
        :param int paid_mail_state: 入金メールの送信状態で検索  - `0`: 未送信 - `1`: 送信済み - `2`: 送信しない 
        :param int delivered_mail_state: 配送メールの送信状態で検索  - `0`: 未送信 - `1`: 送信済み - `2`: 送信しない 
        :param bool mobile: `true`なら携帯からの受注のみ取得
        :param bool paid: `true`なら入金済みの受注のみ取得
        :param bool delivered: `true`なら配送済みの受注のみ取得
        :param str payment_ids: 使用された決済のIDで検索。カンマ区切りで複数指定可能
        :param str fields: レスポンスJSONのキーをカンマ区切りで指定
        :param int limit: レスポンスの件数を指定。指定がない場合は10。最大50
        :param int offset: 指定した数値+1件目以降のデータを返す
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'after', 'before', 'make_date_min', 'make_date_max', 'update_date_min', 'update_date_max', 'customer_ids', 'customer_name', 'customer_furigana', 'customer_mail', 'accepted_mail_state', 'paid_mail_state', 'delivered_mail_state', 'mobile', 'paid', 'delivered', 'payment_ids', 'fields', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sales" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'make_date_min' in params:
            query_params.append(('make_date_min', params['make_date_min']))  # noqa: E501
        if 'make_date_max' in params:
            query_params.append(('make_date_max', params['make_date_max']))  # noqa: E501
        if 'update_date_min' in params:
            query_params.append(('update_date_min', params['update_date_min']))  # noqa: E501
        if 'update_date_max' in params:
            query_params.append(('update_date_max', params['update_date_max']))  # noqa: E501
        if 'customer_ids' in params:
            query_params.append(('customer_ids', params['customer_ids']))  # noqa: E501
        if 'customer_name' in params:
            query_params.append(('customer_name', params['customer_name']))  # noqa: E501
        if 'customer_furigana' in params:
            query_params.append(('customer_furigana', params['customer_furigana']))  # noqa: E501
        if 'customer_mail' in params:
            query_params.append(('customer_mail', params['customer_mail']))  # noqa: E501
        if 'accepted_mail_state' in params:
            query_params.append(('accepted_mail_state', params['accepted_mail_state']))  # noqa: E501
        if 'paid_mail_state' in params:
            query_params.append(('paid_mail_state', params['paid_mail_state']))  # noqa: E501
        if 'delivered_mail_state' in params:
            query_params.append(('delivered_mail_state', params['delivered_mail_state']))  # noqa: E501
        if 'mobile' in params:
            query_params.append(('mobile', params['mobile']))  # noqa: E501
        if 'paid' in params:
            query_params.append(('paid', params['paid']))  # noqa: E501
        if 'delivered' in params:
            query_params.append(('delivered', params['delivered']))  # noqa: E501
        if 'payment_ids' in params:
            query_params.append(('payment_ids', params['payment_ids']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sales.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_sales_mail(self, sale_id, **kwargs):  # noqa: E501
        """メールの送信  # noqa: E501

        受注・入金確認・商品発送メールを送ることができます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_sales_mail(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :param object unknown_base_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.send_sales_mail_with_http_info(sale_id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_sales_mail_with_http_info(sale_id, **kwargs)  # noqa: E501
            return data

    def send_sales_mail_with_http_info(self, sale_id, **kwargs):  # noqa: E501
        """メールの送信  # noqa: E501

        受注・入金確認・商品発送メールを送ることができます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_sales_mail_with_http_info(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :param object unknown_base_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sale_id', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_sales_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sale_id' is set
        if ('sale_id' not in params or
                params['sale_id'] is None):
            raise ValueError("Missing the required parameter `sale_id` when calling `send_sales_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sale_id' in params:
            path_params['saleId'] = params['sale_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sales/{saleId}/mails.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stat_sale(self, **kwargs):  # noqa: E501
        """売上集計の取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stat_sale(async=True)
        >>> result = thread.get()

        :param async bool
        :param str make_date: 集計対象とする売上の作成日。形式は\"2017-04-12\"、\"2017/04/12\"など。指定しない場合は今日の日付が使われる
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stat_sale_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stat_sale_with_http_info(**kwargs)  # noqa: E501
            return data

    def stat_sale_with_http_info(self, **kwargs):  # noqa: E501
        """売上集計の取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stat_sale_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str make_date: 集計対象とする売上の作成日。形式は\"2017-04-12\"、\"2017/04/12\"など。指定しない場合は今日の日付が使われる
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['make_date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stat_sale" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'make_date' in params:
            query_params.append(('make_date', params['make_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sales/stat.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sale(self, sale_id, **kwargs):  # noqa: E501
        """受注データの更新  # noqa: E501

        該当受注の決済がAmazon Pay、または楽天ペイ（オンライン決済）である場合は、熨斗・メッセージカード・ラッピングの手数料を更新すると、決済金額が自動的に購入者に請求もしくは返金されます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_sale(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :param object unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_sale_with_http_info(sale_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sale_with_http_info(sale_id, **kwargs)  # noqa: E501
            return data

    def update_sale_with_http_info(self, sale_id, **kwargs):  # noqa: E501
        """受注データの更新  # noqa: E501

        該当受注の決済がAmazon Pay、または楽天ペイ（オンライン決済）である場合は、熨斗・メッセージカード・ラッピングの手数料を更新すると、決済金額が自動的に購入者に請求もしくは返金されます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_sale_with_http_info(sale_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int sale_id: (required)
        :param object unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sale_id', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sale_id' is set
        if ('sale_id' not in params or
                params['sale_id'] is None):
            raise ValueError("Missing the required parameter `sale_id` when calling `update_sale`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sale_id' in params:
            path_params['saleId'] = params['sale_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sales/{saleId}.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
