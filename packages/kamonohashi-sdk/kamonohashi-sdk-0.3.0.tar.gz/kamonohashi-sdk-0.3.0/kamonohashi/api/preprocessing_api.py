# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v1
    Contact: kamonohashi-support@jp.nssol.nssmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
import six

from kamonohashi.api_client import ApiClient


class PreprocessingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_preprocessing(self, **kwargs):  # noqa: E501
        """新規に前処理を登録する  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_preprocessing(async=True)
        >>> result = thread.get()

        :param async bool
        :param PreprocessingApiModelsCreateInputModel model:
        :return: PreprocessingApiModelsIndexOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_preprocessing_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_preprocessing_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_preprocessing_with_http_info(self, **kwargs):  # noqa: E501
        """新規に前処理を登録する  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_preprocessing_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param PreprocessingApiModelsCreateInputModel model:
        :return: PreprocessingApiModelsIndexOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_preprocessing" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/preprocessings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreprocessingApiModelsIndexOutputModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_preprocessing(self, id, **kwargs):  # noqa: E501
        """前処理を削除する。  # noqa: E501

        一度でも前処理が実行されていた場合、削除不可  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_preprocessing(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 前処理ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_preprocessing_with_http_info(self, id, **kwargs):  # noqa: E501
        """前処理を削除する。  # noqa: E501

        一度でも前処理が実行されていた場合、削除不可  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_preprocessing_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 前処理ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_preprocessing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_preprocessing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/preprocessings/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_preprocessing(self, id, **kwargs):  # noqa: E501
        """指定されたIDの前処理の詳細情報を取得。  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_preprocessing(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 前処理ID (required)
        :return: PreprocessingApiModelsDetailsOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_preprocessing_with_http_info(self, id, **kwargs):  # noqa: E501
        """指定されたIDの前処理の詳細情報を取得。  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_preprocessing_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 前処理ID (required)
        :return: PreprocessingApiModelsDetailsOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preprocessing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_preprocessing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/preprocessings/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreprocessingApiModelsDetailsOutputModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_preprocessings(self, **kwargs):  # noqa: E501
        """指定された条件でページングされた状態で、全前処理を取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_preprocessings(async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: IDの検索条件。  比較文字列＋数値の形式。
        :param str name: 名前
        :param str created_at: 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \"2018/01/01\" → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \"＞2018/01/01\" → 2018/01/01 00:00:00 以降  \"＜2018/01/01\" → 2018/01/01 00:00:00 以前
        :param str memo: メモ
        :param int per_page: 表示件数。指定がない場合は全件。
        :param int page: ページ番号。デフォルトは1。
        :param bool with_total: 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
        :return: list[PreprocessingApiModelsIndexOutputModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_preprocessings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_preprocessings_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_preprocessings_with_http_info(self, **kwargs):  # noqa: E501
        """指定された条件でページングされた状態で、全前処理を取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_preprocessings_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: IDの検索条件。  比較文字列＋数値の形式。
        :param str name: 名前
        :param str created_at: 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \"2018/01/01\" → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \"＞2018/01/01\" → 2018/01/01 00:00:00 以降  \"＜2018/01/01\" → 2018/01/01 00:00:00 以前
        :param str memo: メモ
        :param int per_page: 表示件数。指定がない場合は全件。
        :param int page: ページ番号。デフォルトは1。
        :param bool with_total: 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
        :return: list[PreprocessingApiModelsIndexOutputModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'created_at', 'memo', 'per_page', 'page', 'with_total']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_preprocessings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('Id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'created_at' in params:
            query_params.append(('CreatedAt', params['created_at']))  # noqa: E501
        if 'memo' in params:
            query_params.append(('Memo', params['memo']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'with_total' in params:
            query_params.append(('withTotal', params['with_total']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/preprocessings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PreprocessingApiModelsIndexOutputModel]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_preprocessing(self, id, **kwargs):  # noqa: E501
        """前処理の編集  # noqa: E501

        前処理が実行済みの場合でも編集可能な項目のみ扱う  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_preprocessing(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 変更対象の前処理ID (required)
        :param PreprocessingApiModelsEditInputModel model: 変更内容
        :return: PreprocessingApiModelsIndexOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.patch_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def patch_preprocessing_with_http_info(self, id, **kwargs):  # noqa: E501
        """前処理の編集  # noqa: E501

        前処理が実行済みの場合でも編集可能な項目のみ扱う  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_preprocessing_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 変更対象の前処理ID (required)
        :param PreprocessingApiModelsEditInputModel model: 変更内容
        :return: PreprocessingApiModelsIndexOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_preprocessing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_preprocessing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/preprocessings/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreprocessingApiModelsIndexOutputModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_preprocessing(self, id, **kwargs):  # noqa: E501
        """前処理の詳細情報編集  # noqa: E501

        全ての項目が対象だが、一度でも前処理が実行されていた場合、編集不可  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_preprocessing(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 変更対象の前処理ID (required)
        :param PreprocessingApiModelsCreateInputModel model: 変更内容
        :return: PreprocessingApiModelsDetailsOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_preprocessing_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_preprocessing_with_http_info(self, id, **kwargs):  # noqa: E501
        """前処理の詳細情報編集  # noqa: E501

        全ての項目が対象だが、一度でも前処理が実行されていた場合、編集不可  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_preprocessing_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: 変更対象の前処理ID (required)
        :param PreprocessingApiModelsCreateInputModel model: 変更内容
        :return: PreprocessingApiModelsDetailsOutputModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_preprocessing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_preprocessing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/preprocessings/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreprocessingApiModelsDetailsOutputModel',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
