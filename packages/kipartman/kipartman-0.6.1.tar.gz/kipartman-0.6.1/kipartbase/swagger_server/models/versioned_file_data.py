# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class VersionedFileData(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, source_path=None, storage_path=None, md5=None, version=None, state=None, updated=None, content=None, category=None, metadata=None):
        """
        VersionedFileData - a model defined in Swagger

        :param source_path: The source_path of this VersionedFileData.
        :type source_path: str
        :param storage_path: The storage_path of this VersionedFileData.
        :type storage_path: str
        :param md5: The md5 of this VersionedFileData.
        :type md5: str
        :param version: The version of this VersionedFileData.
        :type version: int
        :param state: The state of this VersionedFileData.
        :type state: str
        :param updated: The updated of this VersionedFileData.
        :type updated: datetime
        :param content: The content of this VersionedFileData.
        :type content: str
        :param category: The category of this VersionedFileData.
        :type category: str
        :param metadata: The metadata of this VersionedFileData.
        :type metadata: str
        """
        self.swagger_types = {
            'source_path': str,
            'storage_path': str,
            'md5': str,
            'version': int,
            'state': str,
            'updated': datetime,
            'content': str,
            'category': str,
            'metadata': str
        }

        self.attribute_map = {
            'source_path': 'source_path',
            'storage_path': 'storage_path',
            'md5': 'md5',
            'version': 'version',
            'state': 'state',
            'updated': 'updated',
            'content': 'content',
            'category': 'category',
            'metadata': 'metadata'
        }

        self._source_path = source_path
        self._storage_path = storage_path
        self._md5 = md5
        self._version = version
        self._state = state
        self._updated = updated
        self._content = content
        self._category = category
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VersionedFileData of this VersionedFileData.
        :rtype: VersionedFileData
        """
        return deserialize_model(dikt, cls)

    @property
    def source_path(self):
        """
        Gets the source_path of this VersionedFileData.

        :return: The source_path of this VersionedFileData.
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """
        Sets the source_path of this VersionedFileData.

        :param source_path: The source_path of this VersionedFileData.
        :type source_path: str
        """

        self._source_path = source_path

    @property
    def storage_path(self):
        """
        Gets the storage_path of this VersionedFileData.

        :return: The storage_path of this VersionedFileData.
        :rtype: str
        """
        return self._storage_path

    @storage_path.setter
    def storage_path(self, storage_path):
        """
        Sets the storage_path of this VersionedFileData.

        :param storage_path: The storage_path of this VersionedFileData.
        :type storage_path: str
        """

        self._storage_path = storage_path

    @property
    def md5(self):
        """
        Gets the md5 of this VersionedFileData.

        :return: The md5 of this VersionedFileData.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """
        Sets the md5 of this VersionedFileData.

        :param md5: The md5 of this VersionedFileData.
        :type md5: str
        """

        self._md5 = md5

    @property
    def version(self):
        """
        Gets the version of this VersionedFileData.

        :return: The version of this VersionedFileData.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this VersionedFileData.

        :param version: The version of this VersionedFileData.
        :type version: int
        """

        self._version = version

    @property
    def state(self):
        """
        Gets the state of this VersionedFileData.

        :return: The state of this VersionedFileData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this VersionedFileData.

        :param state: The state of this VersionedFileData.
        :type state: str
        """

        self._state = state

    @property
    def updated(self):
        """
        Gets the updated of this VersionedFileData.

        :return: The updated of this VersionedFileData.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this VersionedFileData.

        :param updated: The updated of this VersionedFileData.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def content(self):
        """
        Gets the content of this VersionedFileData.

        :return: The content of this VersionedFileData.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this VersionedFileData.

        :param content: The content of this VersionedFileData.
        :type content: str
        """

        self._content = content

    @property
    def category(self):
        """
        Gets the category of this VersionedFileData.

        :return: The category of this VersionedFileData.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this VersionedFileData.

        :param category: The category of this VersionedFileData.
        :type category: str
        """

        self._category = category

    @property
    def metadata(self):
        """
        Gets the metadata of this VersionedFileData.

        :return: The metadata of this VersionedFileData.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this VersionedFileData.

        :param metadata: The metadata of this VersionedFileData.
        :type metadata: str
        """

        self._metadata = metadata

