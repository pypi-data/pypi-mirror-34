Metadata-Version: 2.1
Name: nanopq
Version: 0.1.0
Summary: Product quantization for nearest neighbor search in a single python file
Home-page: https://github.com/matsui528/nanopq
Author: Yusuke Matsui
Author-email: matsui528@gmail.com
License: MIT License

Copyright (c) 2018 Yusuke Matsui

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description: # nanopq
        
        [![Documentation Status](https://readthedocs.org/projects/nanopq/badge/?version=latest)](https://nanopq.readthedocs.io/en/latest/?badge=latest)
        
        Nano Product Quantization (nanopq): product quantization for nearest neighbor search in a single python file.
        
        This package contains a vanilla implementation of Product Quantization (PQ) and Optimized Product Quantization (OPQ) written in pure python without any third party dependencies.
        
        
        ## Installing
        You can install the package via pip. This library works with Python 3.6+ on linux.
        ```
        pip install nanopq
        ```
        
        ## [Documentation](https://nanopq.readthedocs.io/en/latest/index.html)
        - [Tutorial](https://nanopq.readthedocs.io/en/latest/tutorial.html)
        - [API](https://nanopq.readthedocs.io/en/latest/api.html)
        
        ## Example
        
        ```python
        import nanopq
        import numpy as np
        
        X = np.random.random((10000, 128))
        query = np.random.random((128,))
        
        # Instantiate with M=8 sub-spaces
        pq = nanopq.PQ(M=8)
        
        # Train with the top 1000 vectors
        pq.fit(X[:1000])
        
        # Encode to pq-codes
        X_code = pq.encode(X)  # (10000, 8) with dtype=np.uint8
        
        # Results
        dtable = pq.dtable(query)  # Compute a distance table online
        dists = pq.adist(dtable, X_code)  # Asymmetric distance
        ```
        
        ## Author
        - [Yusuke Matsui](http://yusukematsui.me)
        
        
        ## Reference
        - [H. Jegou, M. Douze, and C. Schmid, "Product Quantization for Nearest Neighbor Search", IEEE TPAMI 2011](https://ieeexplore.ieee.org/document/5432202/) (the original paper of PQ)
        - [T. Ge, K. He, Q. Ke, and J. Sun, "Optimized Product Quantization", IEEE TPAMI 2014](https://ieeexplore.ieee.org/document/6678503/) (the original paper of OPQ)
        - [Y. Matsui, Y. Uchida, H. Jegou, and S. Satoh, "A Survey of Product Quantization", ITE MTA 2018](https://www.jstage.jst.go.jp/article/mta/6/1/6_2/_pdf/) (a survey paper of PQ) 
        - [PQ in faiss](https://github.com/facebookresearch/faiss/wiki/Faiss-building-blocks:-clustering,-PCA,-quantization#pq-encoding--decoding) (Faiss contains an optimized implementation of PQ. [See the difference to ours here](https://nanopq.readthedocs.io/en/latest/tutorial.html#difference-from-pq-in-faiss))
        - [Rayuela.jl](https://github.com/una-dinosauria/Rayuela.jl) (Julia implementation of several encoding algorithms including PQ and OPQ)
        - [PQk-means](https://github.com/DwangoMediaVillage/pqkmeans) (clustering on PQ-codes. The implementation of nanopq is compatible to [that of PQk-means](https://github.com/DwangoMediaVillage/pqkmeans/blob/master/tutorial/1_pqkmeans.ipynb))
Platform: UNKNOWN
