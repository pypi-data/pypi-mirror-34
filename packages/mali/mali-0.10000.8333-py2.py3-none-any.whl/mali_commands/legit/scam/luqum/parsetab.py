
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOR_OPleftAND_OPnonassocMINUSnonassocPLUSnonassocAPPROXnonassocBOOSTnonassocLPARENRPARENnonassocLBRACKETTORBRACKETnonassocPHRASEnonassocTERMAND_OP APPROX BOOST COLUMN LBRACKET LPAREN MINUS NOT OR_OP PHRASE PLUS RBRACKET RPAREN SEPARATOR TERM TOexpression : expression OR_OP expressionexpression : expression AND_OP expressionexpression : expression expressionunary_expression : PLUS unary_expressionunary_expression : MINUS unary_expressionunary_expression : NOT unary_expressionexpression : unary_expressionunary_expression : LPAREN expression RPARENunary_expression : LBRACKET phrase_or_term TO phrase_or_term RBRACKETunary_expression : TERM COLUMN unary_expressionunary_expression : PHRASEunary_expression : PHRASE APPROXexpression : expression BOOSTunary_expression : TERMunary_expression : TERM APPROXunary_expression : TOphrase_or_term : TERM\n                      | PHRASE'
    
_lr_action_items = {'AND_OP':([1,4,7,8,10,11,13,15,16,17,21,23,24,25,26,28,29,31,],[12,-11,-16,-14,-7,12,-13,-4,-5,-12,-6,-15,12,-2,12,-10,-8,-9,]),'COLUMN':([8,],[22,]),'$end':([1,4,7,8,10,11,13,15,16,17,21,23,25,26,28,29,31,],[0,-11,-16,-14,-7,-3,-13,-4,-5,-12,-6,-15,-2,-1,-10,-8,-9,]),'PLUS':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,28,29,31,],[2,2,2,2,-11,2,-16,-14,2,-7,2,2,-13,2,-4,-5,-12,-6,2,-15,2,2,2,-10,-8,-9,]),'BOOST':([1,4,7,8,10,11,13,15,16,17,21,23,24,25,26,28,29,31,],[13,-11,-16,-14,-7,13,-13,-4,-5,-12,-6,-15,13,13,13,-10,-8,-9,]),'APPROX':([4,8,],[17,23,]),'MINUS':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,28,29,31,],[3,3,3,3,-11,3,-16,-14,3,-7,3,3,-13,3,-4,-5,-12,-6,3,-15,3,3,3,-10,-8,-9,]),'PHRASE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,27,28,29,31,],[4,4,4,4,-11,20,4,-16,-14,4,-7,4,4,-13,4,-4,-5,-12,-6,4,-15,4,4,4,20,-10,-8,-9,]),'LBRACKET':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,28,29,31,],[5,5,5,5,-11,5,-16,-14,5,-7,5,5,-13,5,-4,-5,-12,-6,5,-15,5,5,5,-10,-8,-9,]),'NOT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,28,29,31,],[6,6,6,6,-11,6,-16,-14,6,-7,6,6,-13,6,-4,-5,-12,-6,6,-15,6,-2,-1,-10,-8,-9,]),'TO':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,],[7,7,7,7,-11,7,-16,-14,7,-7,7,7,-13,7,-4,-5,-12,-17,27,-18,-6,7,-15,7,7,7,-10,-8,-9,]),'OR_OP':([1,4,7,8,10,11,13,15,16,17,21,23,24,25,26,28,29,31,],[14,-11,-16,-14,-7,14,-13,-4,-5,-12,-6,-15,14,-2,-1,-10,-8,-9,]),'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,27,28,29,31,],[8,8,8,8,-11,18,8,-16,-14,8,-7,8,8,-13,8,-4,-5,-12,-6,8,-15,8,8,8,18,-10,-8,-9,]),'LPAREN':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,24,25,26,28,29,31,],[9,9,9,9,-11,9,-16,-14,9,-7,9,9,-13,9,-4,-5,-12,-6,9,-15,9,9,9,-10,-8,-9,]),'RPAREN':([4,7,8,10,11,13,15,16,17,21,23,24,25,26,28,29,31,],[-11,-16,-14,-7,-3,-13,-4,-5,-12,-6,-15,29,-2,-1,-10,-8,-9,]),'RBRACKET':([18,20,30,],[-17,-18,31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,9,11,12,14,24,25,26,],[1,11,24,11,25,26,11,11,11,]),'phrase_or_term':([5,27,],[19,30,]),'unary_expression':([0,1,2,3,6,9,11,12,14,22,24,25,26,],[10,10,15,16,21,10,10,10,10,28,10,10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OR_OP expression','expression',3,'p_expression_or','parser.py',153),
  ('expression -> expression AND_OP expression','expression',3,'p_expression_and','parser.py',158),
  ('expression -> expression expression','expression',2,'p_expression_implicit','parser.py',163),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',168),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',173),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_expression_not','parser.py',178),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',183),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',188),
  ('unary_expression -> LBRACKET phrase_or_term TO phrase_or_term RBRACKET','unary_expression',5,'p_range','parser.py',193),
  ('unary_expression -> TERM COLUMN unary_expression','unary_expression',3,'p_field_search','parser.py',200),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',208),
  ('unary_expression -> PHRASE APPROX','unary_expression',2,'p_proximity','parser.py',213),
  ('expression -> expression BOOST','expression',2,'p_boosting','parser.py',218),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',223),
  ('unary_expression -> TERM APPROX','unary_expression',2,'p_fuzzy','parser.py',228),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',234),
  ('phrase_or_term -> TERM','phrase_or_term',1,'p_phrase_or_term','parser.py',239),
  ('phrase_or_term -> PHRASE','phrase_or_term',1,'p_phrase_or_term','parser.py',240),
]
