FROM {{ PIPELINE_IMAGE_REGISTRY_URL }}/{{ PIPELINE_IMAGE_REGISTRY_REPO }}/{{ PIPELINE_IMAGE_REGISTRY_NAMESPACE }}-{{ PIPELINE_CHIP }}:{{ PIPELINE_IMAGE_REGISTRY_BASE_TAG }}

LABEL PIPELINE_IMAGE_REGISTRY_URL={{ PIPELINE_IMAGE_REGISTRY_URL }}
LABEL PIPELINE_IMAGE_REGISTRY_REPO={{ PIPELINE_IMAGE_REGISTRY_REPO }}
LABEL PIPELINE_IMAGE_REGISTRY_NAMESPACE={{ PIPELINE_IMAGE_REGISTRY_NAMESPACE }}
LABEL PIPELINE_IMAGE_REGISTRY_BASE_TAG={{ PIPELINE_IMAGE_REGISTRY_BASE_TAG }}
LABEL PIPELINE_RESOURCE_NAME={{ PIPELINE_RESOURCE_NAME }}
LABEL PIPELINE_RESOURCE_SUBTYPE={{ PIPELINE_RESOURCE_SUBTYPE }}
LABEL PIPELINE_CHIP={{ PIPELINE_CHIP }}

# Note:  PIPELINE_RESOURCE_TAG and PIPELINE_RUNTIME have moved to the bottom due to build-performance reasons

ENV \
  PIPELINE_RESOURCE_NAME={{ PIPELINE_RESOURCE_NAME }}

ENV \
  PIPELINE_RESOURCE_SUBTYPE={{ PIPELINE_RESOURCE_SUBTYPE }}

ENV \
  PIPELINE_CHIP={{ PIPELINE_CHIP }}
# Note:  PIPELINE_RESOURCE_TAG has been moved to the bottom of the Dockerfile


# Note:  This are defined here (versus Kubernetes yaml) since these can be used outside of Kubernetes
#        We default to `/opt/ml` for out-of-box SageMaker compatibility but can be overridden by Kubernetes yaml
#        Changes to these paths must be sync'd to templates/yaml/train-cluster.yaml, train-cluster-gpu.yaml, and cli_pipeline.py
ENV \
  PIPELINE_RESOURCE_PATH=/opt/ml/model
ENV \
  PIPELINE_INPUT_PATH=/opt/ml/input
ENV \
  PIPELINE_OUTPUT_PATH=/opt/ml/output
#ENV \
#  PIPELINE_TRAINING_RUNS_HOME=/root/pipelineai/training_runs

# We have tensorboard here because this Dockerfile can be used outside of a cluster
# TODO: Sync this with guild PIPELINE_TRAINING_RUNS_HOME
ENV \
  TENSORBOARD_LOGDIR_PATH=$PIPELINE_OUTPUT_PATH

RUN \
  mkdir -p $TENSORBOARD_LOGDIR_PATH

RUN \
  echo "PIPELINE_RESOURCE_PATH=$PIPELINE_RESOURCE_PATH"

ENV \
  PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME=pipeline-{{ PIPELINE_IMAGE_REGISTRY_NAMESPACE }}

RUN \
  echo $PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME \
  && echo ""

RUN \
  conda create --name $PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME \
  && echo "source activate $PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME" >> ~/.bashrc 

COPY ./pipeline_setup.sh $PIPELINE_RESOURCE_PATH/pipeline_setup.sh

RUN \
  chmod a+x $PIPELINE_RESOURCE_PATH/pipeline_setup.sh \
  && mkdir -p /opt/conda/envs/$PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME/etc/conda/activate.d/ \
  && cd /opt/conda/envs/$PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME/etc/conda/activate.d/ \
  && ln -s $PIPELINE_RESOURCE_PATH/pipeline_setup.sh \
  && echo "" \
  && ls /opt/conda/envs/$PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME/etc/conda/activate.d/ \
  && echo "" \
  && cat /opt/conda/envs/$PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME/etc/conda/activate.d/pipeline_setup.sh \
  && echo "" \
  && echo "Installing 'pipeline_setup.sh' into conda environment '$PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME'..." \
  && echo "" \
  && echo "...Conda Environment Updated!" \
  && echo "";

{% if PIPELINE_RUNTIME not in ['jvm'] %}
# This is intentionally split out to prevent dependencies from being re-initialized on every build
#  (Even if the dependencies haven't changed.)
COPY ./pipeline_conda_environment.yaml $PIPELINE_RESOURCE_PATH/pipeline_conda_environment.yaml
COPY ./pipeline_condarc .condarc

RUN \
  if [ -f "$PIPELINE_RESOURCE_PATH/pipeline_conda_environment.yaml" ]; then \
    ls $PIPELINE_RESOURCE_PATH/pipeline_conda_environment.yaml \
    && echo "" \
    && echo "Updating Conda Environment '$PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME' with '$PIPELINE_RESOURCE_PATH/pipeline_conda_environment.yaml'..." \
    && echo "" \
    && conda env update --name $PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME --file $PIPELINE_RESOURCE_PATH/pipeline_conda_environment.yaml \
    && echo "" \
    && echo "...Conda Environment Updated!" \
    && echo ""; \
  fi
{% endif %}

COPY . $PIPELINE_RESOURCE_PATH

#############
# Moved these to the bottom to avoid re-doing everything above when they change
LABEL PIPELINE_RESOURCE_TAG={{ PIPELINE_RESOURCE_TAG }}
ENV \
  PIPELINE_RESOURCE_TAG={{ PIPELINE_RESOURCE_TAG }}

LABEL PIPELINE_RUNTIME={{ PIPELINE_RUNTIME }}
ENV \
  PIPELINE_RUNTIME={{ PIPELINE_RUNTIME }}
#############

RUN \
  source activate $PIPELINE_RESOURCE_TRAIN_CONDA_ENV_NAME \
  && conda list \
  && export
