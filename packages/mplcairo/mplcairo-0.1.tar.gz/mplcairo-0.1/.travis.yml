env:
  global:
  - secure: "m5AX9v7zyKF85utnssq5mavfll00UGcmZiKDCcsoM+CdfjOb/jZVA0+a3jI8yeEmCTg6kPsefJCepW9b2HBK7EGQU1uFpUSXmMYyV49JgpLLbWURaRNQ4CtG9g5G4DhlRNzV3OrboS1fje12UrF7i4o1Bdyh7tSrpJHKUhO5btmVooL039RTnuIoBvlj3K6vaR41OVJYeAOl0LfQ+OX3UA/0iYL/64rKGrLC/LYcYzRuq6nwWxXhlbIOTEjwoiRgdLF/BGeT1ZEWNrx2diyWLFI/mChNZLJwKwfk3FwKtFxckmI4DJB1u4ZtXFTmUr19nxIHrIPiKh0YA2/f29zbdMiSJIjq/NbBEvvGUyvG8IlIuRRXxDl8QK/cwFWhc9pUw+El6NFIapr6UCKe9+XOgS+PRtGN5/aHbPqY0kUOVfU4nFrBeZBaoZXhMhUL50hL9LiNKcUuNeL3hOVz7/7VlbzHaleVzn5T+ja05D0ua5IR+3jZT7ijnJ64dzyOum5n/2tLpoeGFHEhIXLWpzBwvC0UWgYCL/1YvFAFIeBjqMhuZKmlzezA8PWIWORoXguRWLNCnUgUYfVPcQTefchXt7oAWPQKg+VSr4W8EdezhTLIg6wCsR0iCcbcQ9vBCbd20XHEjRPHlUK1phNy75j8pyZVDhofrh31RJMDmFRJ/Ys="
  - secure: "ceJZXaAt9Tjon/AOAgQPyVm+Cm2lIX7ybpOPTaNyAGy/CDKKW2BG4/PkTBYSyIfecV6byutm17mIoG/xBQl37JH8UHuJp8b0lGUeR5RjJhZ32EeVQ0rEk4pI1Sg1BU+Jv2mDEdshZreW0mf6c+pyuN3NPI+o/TjqSOkBLpr4dvdcil9ECl2tfBIkRKbwyFcXtPhV/zu8NYRotuQtG6V0RrkqhDlBTZACaGmtcjiX5a4L9jX1wbcixqY8xTC8ln8Y7fgGzuxhIXw95MjaZBMWEzGAtBWyU0HiP0gdzIHIYnXWGKYIjmgEb5tZzvlJeTT/ambVkER1HWnJF8wHtlpUHJ8+61y4Up2eWPtHRd9uBoEZiE5OB4wW67S7YCEXwqgTj4btOAkCQ+37R5EsbMPakYrLYycNTzlmTPvtgVriR53ALTovtQOkml82zJOJEt2MU968R9Z26r/iGqjbl+ZxbUYAk0TVOpScovYnZdBxx7Hga8cjWwo6CqXjHeTqTSjtNTYr28wHp8knp0S/IuGD21PDd9dOTKXuyr0sOBacG4AWCE8tbh30VvfPJ4Qw3fAfYzlZvUOMx1hYkkt5g5/4aIFaPcuGBjpKknPzJngeJQcJHG+cWIMl3rUpXE5ovdIGtnoR12Tg8lNQB9f+AVsHQsWRAmFX45ZpTjrgEFiOelQ="
  - secure: "Cpz5LqMP0Bd5Qk+/FA3zawXxGtKus8OUkDl8vZlF2n7DTUEibRqFU5RSMwA+9+mtwqmYNHjTlSoM4oakGCpRy2ZGy/29sf3sFsdlQX6E0D3gXmbweTj5hGGKYVrPTReoIHyqcnx5yFrBKQ/ucwE/8ydPwOt0LLHRVQ0q/zPDMvxhTq96FyIgAsKwLjzqUvp/bP1keF+ttx36JxaoCwWyAYC1OpWbCJa3vWZJ0ijx/bbMGD30oFn7e1d9eu+P3+XwUIyVhaeMSfgyEnVbBMG7RXm42f3vtGtlT8JYMioSM41xNzgEHh01+Q1dgHJptQ5viWBrM2NSY7GkPGoean84ZlR+oHt8wTF5hvKcHb9HEKc1DqF9MFT7kiXOGzR6LhGpdltNkqcklhDYJem6neUc6AFsHtH7hhWDvqfJA/PerWmDSuIOhgJkVV/zAx4Va0jr8l0al3bxP7drBMrLHIg7N2XiM7C3MErXcsZEMetFt3IpADcGp+HhqZZpojpd42oi3y7l/Zq88TPlEe+IjHMApAgU1MbYSibn9tGkIUczqPvkwuqAq6IRaEcHusJDYQtIuKnMKGw15obXAciH/ALQi+zHHVDgJkw7o8d1JHD0IRoJO+u1kgL/asD628B+iSYzAj839NIevTDjrreDzA+mraUFKlc2IPhLrt2N39RrgqA="

addons:
  apt:
    packages:
    - sshpass

cache:
- directories:
  - "$HOME/Library/Caches/Homebrew"
- ccache
- pip

matrix:
  include:
  - dist: trusty
    sudo: false
    language: python
    python: '3.6'
  - os: osx
    language: generic
    env:
    - PATH="/usr/local/opt/python/libexec/bin:$PATH"
    - PIP_CACHE_DIR="$HOME/.cache/pip"

install: |
  # begin-syntax: sh
  case "$TRAVIS_OS_NAME" in
  linux)
    sudo tools/build-manylinux.sh &&
      pip install dist/*-manylinux*.whl
    ;;
  osx)
    brew update >/dev/null &&
      brew upgrade python &&
      brew install ccache llvm &&
      brew install cairo &&
      pip install delocate &&
      (
        export PATH="/usr/local/opt/llvm/bin:$PATH"
        export CPPFLAGS=-L/usr/local/opt/llvm/include
        export LDFLAGS='-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib'
        export CC='ccache clang'
        export CXX='ccache clang'  # Due to weird manipulations by distutils.
        pip install . &&
          pip uninstall -y mplcairo &&  # Just get the dependencies.
          python setup.py bdist_wheel &&
          delocate-wheel -v dist/*
      ) &&
      pip install dist/*.whl
    ;;
  esac
  # sphinx is needed to make test_tinypages pass on mpl 2.2.2.
  pip install -U pytest sphinx
  # Install test data.
  (
    cd "$(mktemp -d)"
    mplver="$(python -c 'import matplotlib as mpl; print(mpl.__version__)')"
    curl -L https://github.com/matplotlib/matplotlib/archive/v"$mplver".tar.gz |
      tar -xz
    cd *
    for package in matplotlib mpl_toolkits; do
      cp -r "lib/$package/tests" \
        "$(python -c "import $package; print(list($package.__path__)[0])")"
    done
  )
  # end-syntax: sh

script: |
  # begin-syntax: sh
  case "$TRAVIS_OS_NAME" in
  linux)
    ./run-mpl-test-suite.py --tolerance=50
    ;;
  osx)
    MPLBACKEND=module://mplcairo.base python - <<EOF
  import sys
  import mplcairo  # Apparently needed to get the correct libc++.
  from pylab import *
  gca()
  savefig("/dev/null", format="png")
  EOF
    ;;
  esac
  # end-syntax: sh

after_success: |
  # begin-syntax: sh
  if [[ "$TRAVIS_OS_NAME" = osx ]]; then
    brew install \
      https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb
  fi
  echo "$KNOWN_HOST" >>~/.ssh/known_hosts
  sshpass -e scp -rq dist $DEPLOY:wheels || echo 'Failed to deploy wheels.'
  # end-syntax: sh
