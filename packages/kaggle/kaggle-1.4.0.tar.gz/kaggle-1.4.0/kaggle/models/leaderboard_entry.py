#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/python
#
# Copyright 2018 Kaggle Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LeaderboardEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'team_name': 'str',
        'submission_date': 'datetime',
        'score': 'str'
    }

    attribute_map = {
        'team_id': 'teamId',
        'team_name': 'teamName',
        'submission_date': 'submissionDate',
        'score': 'score'
    }

    def __init__(self, team_id=None, team_name=None, submission_date=None, score=None):  # noqa: E501
        """LeaderboardEntry - a model defined in Swagger"""  # noqa: E501

        self._team_id = None
        self._team_name = None
        self._submission_date = None
        self._score = None
        self.discriminator = None

        self.team_id = team_id
        self.team_name = team_name
        if submission_date is not None:
            self.submission_date = submission_date
        self.score = score

    @property
    def team_id(self):
        """Gets the team_id of this LeaderboardEntry.  # noqa: E501

        The ID of the submitting team.  # noqa: E501

        :return: The team_id of this LeaderboardEntry.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this LeaderboardEntry.

        The ID of the submitting team.  # noqa: E501

        :param team_id: The team_id of this LeaderboardEntry.  # noqa: E501
        :type: int
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this LeaderboardEntry.  # noqa: E501

        The name of the submitting team.  # noqa: E501

        :return: The team_name of this LeaderboardEntry.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this LeaderboardEntry.

        The name of the submitting team.  # noqa: E501

        :param team_name: The team_name of this LeaderboardEntry.  # noqa: E501
        :type: str
        """
        if team_name is None:
            raise ValueError("Invalid value for `team_name`, must not be `None`")  # noqa: E501

        self._team_name = team_name

    @property
    def submission_date(self):
        """Gets the submission_date of this LeaderboardEntry.  # noqa: E501

        When the submission was made.  # noqa: E501

        :return: The submission_date of this LeaderboardEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._submission_date

    @submission_date.setter
    def submission_date(self, submission_date):
        """Sets the submission_date of this LeaderboardEntry.

        When the submission was made.  # noqa: E501

        :param submission_date: The submission_date of this LeaderboardEntry.  # noqa: E501
        :type: datetime
        """

        self._submission_date = submission_date

    @property
    def score(self):
        """Gets the score of this LeaderboardEntry.  # noqa: E501

        The submission's score.  # noqa: E501

        :return: The score of this LeaderboardEntry.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this LeaderboardEntry.

        The submission's score.  # noqa: E501

        :param score: The score of this LeaderboardEntry.  # noqa: E501
        :type: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeaderboardEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
