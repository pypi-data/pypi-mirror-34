Metadata-Version: 2.1
Name: sentry-sdk
Version: 0.1.0rc5
Summary: Python client for Sentry (https://getsentry.com)
Home-page: https://github.com/getsentry/sentry-sdk
Author: Sentry Team and Contributors
Author-email: hello@getsentry.com
License: BSD
Description: # sentry-python - Sentry SDK for Python[![Build Status](https://travis-ci.com/getsentry/sentry-python.svg?branch=master)](https://travis-ci.com/getsentry/sentry-python)***Sentry-Python is an experimental SDK for Sentry.*** For a stable one, use[raven](https://github.com/getsentry/raven-python).## Getting started with the new Sentry SDK for PythonInstall this package with ``pip install sentry-sdk``. Then, in your code:    import sentry_sdk    sentry_sdk.init(dsn="https://foo@sentry.io/123")After initialization, you can capture exceptions like this:    sentry_sdk.capture_exception(ValueError())    try:        raise ValueError()    except Exception:        sentry_sdk.capture_exception()...or send messages:    sentry_sdk.capture_message("Hi Sentry!")## Scopes (contexts, tags)You can create a scope to attach data to all events happening inside of it:    with sentry_sdk.get_current_hub().push_scope():        with sentry_sdk.configure_scope() as scope:            scope.transaction = "my_view_name"            scope.set_tag("key", "value")            scope.user = {"id": 123}        # ValueError event will have all that data attached        capture_exception(ValueError())    # This one not since it is outside of the context manager    capture_exception(ValueError())Scopes can be nested. If you call ``push_scope`` inside of the``with``-statement again, that scope will be pushed onto a stack. It will alsoinherit all data from the outer scope.### Scopes in unconfigured environmentsIf you never call ``init``, no data will ever get sent to any server. In suchsituations, code like this is essentially deadweight:    with sentry_sdk.configure_scope() as scope:        scope.user = _get_user_data()Sentry-Python supports an alternative syntax for configuring a scope thatsolves this problem:    @sentry_sdk.configure_scope    def _(scope):        scope.user = _get_user_data()Your function will just not be executed if there is no client configured.In your testing and development environment you still might want to run thatcode without sending any events. In that case, simply call ``init`` without aDSN:    sentry_sdk.init()### BreadcrumbsBreadcrumbs also live on the stack. By default any (non-debug) log messageanywhere in your system ends up as a breadcrumb, see [the loggingdocs](./docs/logging.md) for more information. You can, however, also createbreadcrumbs manually:    sentry_sdk.add_breadcrumb({        # "ty": "log",        # "level": "debug",        # "category": "myapp.models",        "message": "hi"    })## Concurrency* Sentry-Python currently does not support gevent-based setups.* On ``init``, Sentry-Python spawns a thread on its own. That means if you use  ``uwsgi``, you currently need to enable threads.* On Python 3.7, Sentry-Python supports and automatically uses ``ContextVars``.  This should effectively enable Sentry-Python to work with ``asyncio`` under  that Python version.## PIICurrently Sentry-Python does not send any personally-identifiable user datawith events by default. You need to explicitly enable this behavior with the``send_default_pii`` option passed to ``init``:    init(..., send_default_pii=True)## IntegrationsHead over to [the other pages](./docs/) to check out integrations, which usethese low-level APIs so you don't have to.
Platform: UNKNOWN
Description-Content-Type: text/markdown
Provides-Extra: flask
