%% compute the matrix of linear combination coefficients of NURBS refinement in 1D
function [D,knot_vector,new_w_vector] = nrbkntins_coeffs(nurbs,iknots)
knot_vector = nurbs.knots;
if ~iscell(knot_vector) % curve
%    w_vector = nurbs.coefs(4,:);
%    D = eye(nurbs.number);
%    for i=1:length(iknots)
%        [Di,knot_vector,w_vector] = nrbkntins_coeffs_1(nurbs.order-1,knot_vector,w_vector,iknots(i));
%        D = D*Di;
%    end

    % firstly compute the refinement matrix for B-spline refinement
    [Db,new_knot_vector] = bspkntins_coeffs(nurbs,iknots);

    % secondly compute the new weight vector
    w_vector = nurbs.coefs(4,:);
    new_w_vector = Db'*w_vector';

    % thirdly compute the coefficient matrix
    D = Db;
    for i = 1:size(D,1)
        for j = 1:size(D,2)
            D(i,j) = D(i,j)*w_vector(i)/new_w_vector(j);
        end
    end
else
    if size(knot_vector,2) == 2 % surface
        
        % compute refinement matrix on the u direction
        
        % compute refinement matrix on the v direction
    elseif size(knot_vector,2) == 3 % volume
    else
        error('Invalid size of inserted knot vector');
    end
end

function [C,new_knot_vector,new_w_vector] = nrbkntins_coeffs_1(p,knot_vector,w_vector,k)
% compute number of basis function
n = length(knot_vector)-p-1;

% find the span of the knot
s = findspan(n-1,p,k,knot_vector)+1;

% form the new knot
new_knot_vector= [knot_vector(1:s) k knot_vector(s+1:end)];

% initialize and compute new weight vector
new_w_vector = zeros(1,n+1);
for i = 1:s-p
    new_w_vector(i) = w_vector(i);
end
for i = s-p+1:s
    a = (k-knot_vector(i)) / (knot_vector(i+p)-knot_vector(i));
    new_w_vector(i) = (1-a)*w_vector(i-1) + a*w_vector(i);
end
for i = s+1:n+1
    new_w_vector(i) = w_vector(i-1);
end

% initialize and compute matrix C
C = zeros(n,n+1);
for i = 1:s-p-1
    C(i,i) = 1.0;
end
for i = s-p:s
    C(i,i) = (k-new_knot_vector(i))/(new_knot_vector(i+p+1)-new_knot_vector(i)) * w_vector(i) / new_w_vector(i);
    C(i,i+1) = (new_knot_vector(i+p+2)-k)/(new_knot_vector(i+p+2)-new_knot_vector(i+1)) * w_vector(i) / new_w_vector(i+1);
end
for i = s+1:n
    C(i,i+1) = 1.0;
end

