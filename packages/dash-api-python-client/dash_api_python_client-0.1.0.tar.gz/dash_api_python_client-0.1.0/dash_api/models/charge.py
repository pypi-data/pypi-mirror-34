# coding: utf-8

"""
    Dash API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dash_api.models.organisation import Organisation  # noqa: F401,E501


class Charge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'surname': 'str',
        'unique_identifier': 'str',
        'gender': 'str',
        'date_of_birth': 'datetime',
        'organisations': 'list[Organisation]',
        'primary_organisation': 'Organisation'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'surname': 'surname',
        'unique_identifier': 'uniqueIdentifier',
        'gender': 'gender',
        'date_of_birth': 'dateOfBirth',
        'organisations': 'organisations',
        'primary_organisation': 'primaryOrganisation'
    }

    def __init__(self, id=None, first_name=None, surname=None, unique_identifier=None, gender=None, date_of_birth=None, organisations=None, primary_organisation=None):  # noqa: E501
        """Charge - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._first_name = None
        self._surname = None
        self._unique_identifier = None
        self._gender = None
        self._date_of_birth = None
        self._organisations = None
        self._primary_organisation = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.first_name = first_name
        self.surname = surname
        self.unique_identifier = unique_identifier
        if gender is not None:
            self.gender = gender
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if organisations is not None:
            self.organisations = organisations
        if primary_organisation is not None:
            self.primary_organisation = primary_organisation

    @property
    def id(self):
        """Gets the id of this Charge.  # noqa: E501


        :return: The id of this Charge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Charge.


        :param id: The id of this Charge.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Charge.  # noqa: E501


        :return: The first_name of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Charge.


        :param first_name: The first_name of this Charge.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def surname(self):
        """Gets the surname of this Charge.  # noqa: E501


        :return: The surname of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Charge.


        :param surname: The surname of this Charge.  # noqa: E501
        :type: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")  # noqa: E501

        self._surname = surname

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this Charge.  # noqa: E501


        :return: The unique_identifier of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this Charge.


        :param unique_identifier: The unique_identifier of this Charge.  # noqa: E501
        :type: str
        """
        if unique_identifier is None:
            raise ValueError("Invalid value for `unique_identifier`, must not be `None`")  # noqa: E501

        self._unique_identifier = unique_identifier

    @property
    def gender(self):
        """Gets the gender of this Charge.  # noqa: E501


        :return: The gender of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Charge.


        :param gender: The gender of this Charge.  # noqa: E501
        :type: str
        """
        allowed_values = ["Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Charge.  # noqa: E501


        :return: The date_of_birth of this Charge.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Charge.


        :param date_of_birth: The date_of_birth of this Charge.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def organisations(self):
        """Gets the organisations of this Charge.  # noqa: E501


        :return: The organisations of this Charge.  # noqa: E501
        :rtype: list[Organisation]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """Sets the organisations of this Charge.


        :param organisations: The organisations of this Charge.  # noqa: E501
        :type: list[Organisation]
        """

        self._organisations = organisations

    @property
    def primary_organisation(self):
        """Gets the primary_organisation of this Charge.  # noqa: E501


        :return: The primary_organisation of this Charge.  # noqa: E501
        :rtype: Organisation
        """
        return self._primary_organisation

    @primary_organisation.setter
    def primary_organisation(self, primary_organisation):
        """Sets the primary_organisation of this Charge.


        :param primary_organisation: The primary_organisation of this Charge.  # noqa: E501
        :type: Organisation
        """

        self._primary_organisation = primary_organisation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Charge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
