#!/usr/bin/env python3
#
# (c) 2018 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

import sys, os
sys.path.insert(1, os.path.join(os.path.dirname(__file__), '../pfdicom_tagSub'))

import  pfdicom_tagSub
from    argparse            import RawTextHelpFormatter
from    argparse            import ArgumentParser
import  pudb

import  pfmisc
from    pfmisc._colors      import Colors
from    pfmisc              import other

str_version = "1.0.0"
str_desc = Colors.CYAN + """



        __ _     _                      _              _____       _     
       / _(_)   | |                    | |            /  ___|     | |    
 _ __ | |_ _  __| | ___ ___  _ __ ___  | |_ __ _  __ _\ `--. _   _| |__  
| '_ \|  _| |/ _` |/ __/ _ \| '_ ` _ \ | __/ _` |/ _` |`--. \ | | | '_ \ 
| |_) | | | | (_| | (_| (_) | | | | | || || (_| | (_| /\__/ / |_| | |_) |
| .__/|_| |_|\__,_|\___\___/|_| |_| |_| \__\__,_|\__, \____/ \__,_|_.__/ 
| |                                 ______        __/ |                  
|_|                                |______|      |___/                   



                        Path-File DICOM tag substiution

        Recursively walk down a directory tree and process DICOM tags,
        saving each source DICOM in an output tree that  preserves the
        input directory structure.

        Basically a DICOM anonymizer.

                             -- version """ + \
             Colors.YELLOW + str_version + Colors.CYAN + """ --

        'pfdicom_tagSub' is a customizable and friendly DICOM tag substitutor. 
        As part of the "pf*" suite of applications, it is geared to IO as 
        directories. Input DICOM trees are reconstructed in an output
        directory, preserving directory structure. Each node tree contains
        a copy of the original DICOM with a user-specified tag list changed
        in the output.
        

""" + Colors.NO_COLOUR

def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    NAME

	    %s - process DICOM file header information down a file system tree.

    SYNOPSIS

            %s                                       \\
                    -I|--inputDir <inputDir>                \\
                        [-i|--inputFile <inputFile>]        \\
                        [-e|--extension <DICOMextension>]   \\
                        [-F|--tagFile <JSONtagFile>] |      \\
                        [-T|--tagStruct <JSONtagStruct>] |  \\
                    [-O|--outputDir <outputDir>]            \\
                    [-o|--output <outputFileStem>]          \\
                    [-x|--man]                              \\
                    [-y|--synopsis]

    BRIEF EXAMPLE


    ''' % (scriptName, scriptName, scriptName)

    description =  '''
    DESCRIPTION

        `%s` replaces a set of <tag, value> pairs in a DICOM header with 
        values passed in a JSON structure.

        The script accepts an <inputDir>, and then from this point an os.walk
        is performed to extract all the subdirs. Each subdir is examined for
        DICOM files (in the simplest sense by a file extension mapping) are 
        passed to a processing method that reads and replaces specified 
        DICOM tags, saving the result in a corresponding directory and filename
        in the output tree.

    ARGS

        -I|--inputDir <inputDir>
        Input DICOM directory to examine. By default, the first file in this
        directory is examined for its tag information. There is an implicit
        assumption that each <inputDir> contains a single DICOM series.

        -i|--inputFile <inputFile>
        An optional <inputFile> specified relative to the <inputDir>. If 
        specified, then do not perform a directory walk, but convert only 
        this file.

        -e|--extension <DICOMextension>
        An optional extension to filter the DICOM files of interest from the 
        <inputDir>.

        [-O|--outputDir <outputDir>]
        The directory to contain all output files.

        -F|--tagFile <JSONtagFile>
        Parse the tags and their "subs" from a JSON formatted <JSONtagFile>.

        -T|--tagStruct <JSONtagStructure>
        Parse the tags and their "subs" from a JSON formatted <JSONtagStucture>
        passed directly in the command line.

        -o|--outputFileStem <outputFileStem>
        The output file stem to store data. This should *not* have a file
        extension, or rather, any "." in the name are considered part of 
        the stem and are *not* considered extensions.

        [-x|--man]
        Show full help.

        [-y|--synopsis]
        Show brief help.

        -v|--verbosity <level>
        Set the app verbosity level. 

             -1: No internal output.
              0: All internal output.

    EXAMPLES

    ''' % (scriptName)
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description



parser  = ArgumentParser(description = str_desc, formatter_class = RawTextHelpFormatter)

parser.add_argument("-I", "--inputDir",
                    help    = "input dir",
                    dest    = 'inputDir')
parser.add_argument("-i", "--inputFile",
                    help    = "input file",
                    dest    = 'inputFile',
                    default = '')
parser.add_argument("-e", "--extension",
                    help    = "DICOM file extension",
                    dest    = 'extension',
                    default = '')
parser.add_argument("-F", "--tagFile",
                    help    = "JSON formatted file containing tags to sub",
                    dest    = 'tagFile',
                    default = '')
parser.add_argument("-T", "--tagStruct",
                    help    = "JSON formatted tag sub struct",
                    dest    = 'tagStruct',
                    default = '')
parser.add_argument("-o", "--outputFileStem",
                    help    = "output file",
                    default = "",
                    dest    = 'outputFileStem')
parser.add_argument("-O", "--outputDir",
                    help    = "output image directory",
                    dest    = 'outputDir',
                    default = '.')
parser.add_argument("--printElapsedTime",
                    help    = "print program run time",
                    dest    = 'printElapsedTime',
                    action  = 'store_true',
                    default = False)
parser.add_argument("-x", "--man",
                    help    = "man",
                    dest    = 'man',
                    action  = 'store_true',
                    default = False)
parser.add_argument("-y", "--synopsis",
                    help    = "short synopsis",
                    dest    = 'synopsis',
                    action  = 'store_true',
                    default = False)
parser.add_argument("-v", "--verbosity",
                    help    = "verbosity level for app",
                    dest    = 'verbosity',
                    default = "0")
parser.add_argument('--version',
                    help    = 'if specified, print version number',
                    dest    = 'b_version',
                    action  = 'store_true',
                    default = False)

args = parser.parse_args()

if args.man or args.synopsis:
    print(str_desc)
    if args.man:
        str_help     = synopsis(False)
    else:
        str_help     = synopsis(True)
    print(str_help)
    sys.exit(1)

if args.b_version:
    print("Version: %s" % str_version)
    sys.exit(1)

pudb.set_trace()

pf_dicom_tagSub = pfdicom_tagSub.pfdicom_tagSub(
                        inputDir            = args.inputDir,
                        inputFile           = args.inputFile,
                        extension           = args.extension,
                        outputDir           = args.outputDir,
                        outputFileStem      = args.outputFileStem,
                        tagFile             = args.tagFile,
                        tagStruct           = args.tagStruct,
                        verbosity           = args.verbosity
                    )

# And now run it!
other.tic()
pf_dicom_tagSub.run()
if args.printElapsedTime: pf_dicom_tagSub.dp.qprint("Elapsed time = %f seconds" % other.toc())
sys.exit(0)
