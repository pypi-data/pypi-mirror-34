# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.assetic3_integration_representations_custom_address import Assetic3IntegrationRepresentationsCustomAddress  # noqa: F401,E501
##from assetic.models.system_data_entity_spatial_db_geography import SystemDataEntitySpatialDbGeography  # noqa: F401,E501
##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsWorkOrderDefectLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_order_id': 'str',
        'address_id': 'str',
        'address': 'Assetic3IntegrationRepresentationsCustomAddress',
        'other_location': 'str',
        'where_location': 'str',
        'point': 'SystemDataEntitySpatialDbGeography',
        'point_string': 'str',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'work_order_id': 'WorkOrderId',
        'address_id': 'AddressId',
        'address': 'Address',
        'other_location': 'OtherLocation',
        'where_location': 'WhereLocation',
        'point': 'Point',
        'point_string': 'PointString',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, work_order_id=None, address_id=None, address=None, other_location=None, where_location=None, point=None, point_string=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsWorkOrderDefectLocation - a model defined in Swagger"""  # noqa: E501

        self._work_order_id = None
        self._address_id = None
        self._address = None
        self._other_location = None
        self._where_location = None
        self._point = None
        self._point_string = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if work_order_id is not None:
            self.work_order_id = work_order_id
        if address_id is not None:
            self.address_id = address_id
        if address is not None:
            self.address = address
        if other_location is not None:
            self.other_location = other_location
        if where_location is not None:
            self.where_location = where_location
        if point is not None:
            self.point = point
        if point_string is not None:
            self.point_string = point_string
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def work_order_id(self):
        """Gets the work_order_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The work_order_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: str
        """
        return self._work_order_id

    @work_order_id.setter
    def work_order_id(self, work_order_id):
        """Sets the work_order_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param work_order_id: The work_order_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: str
        """

        self._work_order_id = work_order_id

    @property
    def address_id(self):
        """Gets the address_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The address_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param address_id: The address_id of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: str
        """

        self._address_id = address_id

    @property
    def address(self):
        """Gets the address of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The address of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: Assetic3IntegrationRepresentationsCustomAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param address: The address of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: Assetic3IntegrationRepresentationsCustomAddress
        """

        self._address = address

    @property
    def other_location(self):
        """Gets the other_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The other_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: str
        """
        return self._other_location

    @other_location.setter
    def other_location(self, other_location):
        """Sets the other_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param other_location: The other_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: str
        """

        self._other_location = other_location

    @property
    def where_location(self):
        """Gets the where_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The where_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: str
        """
        return self._where_location

    @where_location.setter
    def where_location(self, where_location):
        """Sets the where_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param where_location: The where_location of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: str
        """

        self._where_location = where_location

    @property
    def point(self):
        """Gets the point of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The point of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: SystemDataEntitySpatialDbGeography
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param point: The point of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: SystemDataEntitySpatialDbGeography
        """

        self._point = point

    @property
    def point_string(self):
        """Gets the point_string of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The point_string of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: str
        """
        return self._point_string

    @point_string.setter
    def point_string(self, point_string):
        """Sets the point_string of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param point_string: The point_string of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: str
        """

        self._point_string = point_string

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param links: The links of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsWorkOrderDefectLocation.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsWorkOrderDefectLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
