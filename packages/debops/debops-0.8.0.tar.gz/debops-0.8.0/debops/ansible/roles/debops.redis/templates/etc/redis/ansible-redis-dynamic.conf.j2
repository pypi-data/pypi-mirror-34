#!/bin/bash

# {{ ansible_managed }}

# Configure certain Redis server parameters dynamically.


set -o nounset -o pipefail -o errexit

# A workaround to have Jinja template in a shell script
readarray -t redis_dynamic_config_map << EOF
{% set redis__tpl_version = (redis__register_server_version.stdout if redis__register_server_version|d() else '0.0.0') %}
{% macro print_config(configuration) %}
{%   if configuration is mapping %}
{%     for config_key in configuration.keys() %}
{%       if (config_key not in redis__server_static_options and (config_key not in redis__server_version_config_map or (redis__tpl_version is version_compare(redis__server_version_config_map[config_key], '>=')))) %}
{%         if configuration[config_key] is string and not configuration[config_key] | bool %}
{%           if configuration[config_key]|d() %}
{{ config_key }}={{ configuration[config_key] }}
{%           endif %}
{%         elif configuration[config_key] | bool and configuration[config_key] is not iterable %}
{%           if configuration[config_key] | string == '1' %}
{{ config_key }}={{ configuration[config_key] }}
{%           else %}
{{ config_key }}=yes
{%           endif %}
{%         elif not configuration[config_key] | bool and configuration[config_key] is not iterable %}
{%           if configuration[config_key] is not none %}
{%             if configuration[config_key] | int %}
{{ config_key }}={{ configuration[config_key] }}
{%             else %}
{%               if configuration[config_key] | string == '0' %}
{{ config_key }}={{ configuration[config_key] }}
{%               else %}
{{ config_key }}=no
{%               endif %}
{%             endif %}
{%           endif %}
{%         elif configuration[config_key] is iterable and configuration[config_key] is not string and configuration[config_key] is not mapping %}
{%           if configuration[config_key]|d() %}
{%             if config_key == 'save' and redis__server_save_enabled|bool %}
{{ config_key }}={{ configuration[config_key] | join(' ') }}
{%             elif config_key == 'save' and not redis__server_save_enabled|bool %}
{{ config_key }}=""
{%             else %}
{{ config_key }}={{ configuration[config_key] | join(' ') }}
{%             endif %}
{%           endif %}
{%         endif %}
{%       endif %}
{%     endfor %}
{%   elif configuration is iterable and configuration is not string and configuration is not mapping %}
{%     for element in configuration %}
{{ print_config(element) -}}
{%     endfor %}
{%   endif %}
{% endmacro %}
{{ print_config(redis__server_combined_configuration) -}}
EOF

declare -A dynamic_config

if [[ "${redis_dynamic_config_map[*]}" ]] ; then
    for line in "${redis_dynamic_config_map[@]}" ; do
        key=${line%%=*}
        value=${line#*=}
        dynamic_config["${key}"]="${value}"
    done
fi

subcommand="${1:-config}"

redis_host="localhost"

redis_conf_port="$(grep --no-filename -E '^port\s+' /etc/redis/redis.conf /etc/redis/ansible-redis-static.conf || true)"
redis_conf_password="$(grep --no-filename -E '^requirepass\s+' /etc/redis/redis.conf /etc/redis/ansible-redis-static.conf || true)"
redis_conf_pidfile="$(grep --no-filename -E '^pidfile\s+' /etc/redis/redis.conf /etc/redis/ansible-redis-static.conf || true)"

redis_port="$(echo "${redis_conf_port}" | tail -n 1 | awk '{print $2}')"
redis_password="$(echo "${redis_conf_password}" | tail -n 1 | awk '{print $2}' | sed -e 's/^"//'  -e 's/"$//')"
redis_pidfile="$(echo "${redis_conf_pidfile}" | tail -n 1 | awk '{print $2}' | sed -e 's/^"//'  -e 's/"$//')"

redis_options=(-h "${redis_host}" -p "${redis_port}")

if [ -n "${redis_password}" ] ; then
    redis_options+=(-a "${redis_password}")
fi

if [ -f "${redis_pidfile}" ] ; then
    if kill -0 "$(<"${redis_pidfile}")" > /dev/null 2>&1 ; then

        if [ "${subcommand}" = "config" ]  ; then
            for index in "${!dynamic_config[@]}" ; do
                redis-cli "${redis_options[@]}" CONFIG SET "${index}" "${dynamic_config[${index}]}"
            done
        fi

        if [ "${subcommand}" = "config" ] || [ "${subcommand}" = "rewrite" ] ; then
            redis-cli "${redis_options[@]}" config rewrite
        fi

    fi
fi
