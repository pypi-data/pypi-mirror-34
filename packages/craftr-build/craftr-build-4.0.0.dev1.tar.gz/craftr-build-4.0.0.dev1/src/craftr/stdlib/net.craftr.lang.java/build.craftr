# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
This module implements functions to build Java applications, libraries and
modules. It also supports referencing artifacts from Maven repositories.
"""


import copy
import shlex
import sys
import maven from './tools/maven'
import platform_commands from './tools/platform-commands'

from nr.stream import stream

project(module.name, '1.0-0')

options('onejar', str, path.join(module.directory, "tools", "one-jar-boot-0.97.jar"))
options('javac', str, 'javac')
options('javacJar', str, 'jar')
options('compilerFlags', str, '')

AUGJAR_TOOL = path.join(path.dir(__file__), 'tools', 'augjar.py')
DOWNLOAD_TOOL = path.join(path.dir(__file__), 'tools', 'download.py')


class ArtifactResolver:
  """
  Helper structure to resolve Maven Artifacts.
  """

  def __init__(self):
    self.poms = {}
    self.repos = []

    repo_config = session.options.get('java', {}).get('repos', {})
    if 'default' not in repo_config:
      self.repos.append(maven.MavenRepository('default', 'http://repo1.maven.org/maven2/'))
    for key, value in repo_config.items():
      self.repos.append(maven.MavenRepository(key, value))

  def resolve(self, artifacts):
    """
    Resolves all artifacts in the *artifacts* list (which must be strings or
    #maven.Artifacts objects). Returns a list of (Artifact, MavenRepository)
    objects.
    """

    artifacts = [maven.Artifact.from_id(x) if isinstance(x, str) else x
                 for x in artifacts]
    queue = [(0, x, None) for x in reversed(artifacts)]

    while queue:
      depth, artifact, parent_deps = queue.pop()
      if isinstance(artifact, str):
        artifact = maven.Artifact.from_id(artifact)
      if artifact.scope != 'compile' or artifact.type != 'jar':
        continue

      indent = '| ' * depth

      # For now, we use this to avoid downloading the same dependency in
      # different versions, instead only the first version that we find.
      artifact_id = '{}:{}'.format(artifact.group, artifact.artifact)
      if artifact_id in self.poms:
        if parent_deps is not None:
          parent_deps.append(artifact_id)
        print('  {}{} (CACHED)'.format('| ' * depth, artifact))
        continue

      # Try to find a POM manifest for the artifact.
      for repo in self.repos:
        # If the artifact has no version, that version may be filled in by
        # the repository, but we only want to use that filled in version if
        # we can get a POM.
        artifact_clone = copy.copy(artifact)
        pom = repo.download_pom(artifact_clone)
        if pom:
          artifact = artifact_clone
          break
      else:
        if not artifact.optional:
          raise RuntimeError('could not find artifact: {}'.format(artifact))
        print(indent[:-2] + '    SKIP (Optional)')
        continue

      # Cache the POM and add its dependencies so we can "recursively"
      # resolve them.
      if parent_deps is not None:
        parent_deps.append(artifact_id)
      deps = []
      self.poms[artifact_id] = (artifact, pom, repo, deps)
      queue.extend([(depth+1, x, deps) for x in reversed(maven.pom_eval_deps(pom))])

      # Print dependency info.
      print('  {}{} ({})'.format('| ' * depth, artifact, repo.name))

    seen = set()
    result = []
    def recurse_add(artifact_id):
      if artifact_id in seen:
        return
      seen.add(artifact_id)
      artifact, pom, repo, deps = self.poms[artifact_id]
      result.append((artifact, repo))
      for artifact_id in deps:
        recurse_add(artifact_id)
    for a in artifacts:
      artifact_id = '{}:{}'.format(a.group, a.artifact)
      recurse_add(artifact_id)

    return result


def partition_sources(sources, src_roots, parent):
  """
  Partitions a set of files in *sources* to the appropriate parent directory
  in *src_roots*. If a file is found that is not located in one of the
  *src_roots*, a #ValueError is raised.

  A relative path in *sources* and *src_roots* will be automatically converted
  to an absolute path using the *parent*, which defaults to the currently
  executed module's directory.
  """

  result = {}
  for source in [path.canonical(x, parent) for x in sources]:
    root = find_src_root(source, src_roots, parent)
    if not root:
      raise ValueError('could not find relative path for {!r} given the '
        'specified root dirs:\n  '.format(source) + '\n  '.join(src_roots))
    rel_root, rel_source = root
    result.setdefault(rel_root, []).append(rel_source)
  return result


def find_src_root(src, roots, parent, allow_curdir=False):
  """
  Finds the source root that *src* is inside and returns it as a tuple of
  (root, rel_path) or #None if the *src* file is not inside any of the
  specified *roots*.
  """

  abs_roots = (path.canonical(x, parent) for x in roots)
  for root, rel_root in zip(abs_roots, roots):
    rel = path.rel(src, root, par=True)
    if allow_curdir and rel == path.curdir or path.issub(rel):
      return rel_root, rel

  return None


def _init_properties():
  from craftr.api.proplib import PathList, StringList, Dict, String, Path, Bool

  props = session.target_props
  props.add('java.srcs', PathList, options={'inherit': True})
  props.add('java.srcRoots', StringList, options={'inherit': True})
  props.add('java.compilerFlags', StringList, options={'inherit': True})
  props.add('java.jmod', Dict[String, String])  # A dictionary that maps module names to the module base directories.
  props.add('java.jarName', String)
  props.add('java.mainClass', String)
  props.add('java.bundleType', String)  # The bundle type for applications, can be `none`, `onejar` or `merge`.
  props.add('java.binaryJars', PathList, options={'inherit': True})
  props.add('java.artifacts', StringList, options={'inherit': True})
  props.add('java.runArgsPrefix', StringList)
  props.add('java.runArgs', StringList)
  props.add('java.jlinkModules', StringList, options={'inherit': True})  # List of modules to include in the runtime
  props.add('java.jlinkName', String)  # Directory output name
  props.add('java.jlinkLaunchers', Dict[String, String])  # A dictionary that maps command names to class identifiers in the form "package/class"
  props.add('java.jlinkModulePath', PathList, options={'inherit': True})
  props.add('java.jlinkFlags', StringList, options={'inherit': True})
  props.add('java.jlinkOutputDirectory', Path)  # Output directory, defaults to a path in the target's build dir
  props.add('java.outLibraries', PathList)

  props = session.dependency_props
  props.add('java.bundle', Bool())


_init_properties()
_artifacts = ArtifactResolver()
_artifact_operators = {}  # Cache to avoid producing the same action multiple times.
_artifacts_target = target('artifacts')


def build():
  """
  This is function should be called after a target's `java.` properties have
  been set up.
  """

  scope = current_scope()
  target = current_target()
  depends(_artifacts_target)

  src_dir = path.abs(scope.directory)
  build_dir = target.build_directory
  cache_dir = path.join(session.build_directory, module.scope.name, 'artifacts')

  data = target.get_props('java.', as_object=True)

  nobundleBinaryJars = []
  bundleBinaryJars = data.binaryJars

  # Add actions that download the artifacts.
  artifactActions = []
  if data.artifacts:
    print('[{}] Resolving JARs...'.format(target.name))
    for artifact, repo in _artifacts.resolve(data.artifacts):
      binary_jar = path.join(cache_dir, artifact.to_local_path('jar'))
      if binary_jar in _artifact_operators:
        artifactActions.append(_artifact_operators[binary_jar])
      else:
        # TODO: We could theortically model this with a single action
        #       and multiple build sets.
        command = [sys.executable, DOWNLOAD_TOOL]
        command += [binary_jar]
        command += [repo.get_artifact_uri(artifact, 'jar')]
        op = operator(
          name = str(artifact).replace(':', '_'),
          commands = [command],
          target = _artifacts_target
        )
        build_set({}, {'out': binary_jar}, description='Downloading {} ...'.format(artifact.to_local_path('jar')))
        _artifact_operators[binary_jar] = op
        artifactActions.append(op)
        properties(_artifacts_target, {'@java.outLibraries+': [binary_jar]})
      data.binaryJars.append(binary_jar)
      bundleBinaryJars.append(binary_jar)

  input_lib_actions = []
  jar_action = None
  javac_actions = []
  jmod_actions = []
  bundle_action = None
  jlink_action = None
  run_action = None
  run_bundle_action = None

  classDir = path.join(build_dir, 'cls')
  jarFilename = None
  bundleFilename = None
  jmodFilenames = {}
  jmodDir = path.join(build_dir, 'jmods')

  # Determine all the information necessary to build a java library,
  # and optionally a bundle.
  if data.srcs:
    if not data.srcRoots:
      data.srcRoots = ['src', 'java', 'javatest']
    if not data.jarName and not data.jmod:
      data.jarName = (target.name + '-' + target.scope.version)

    # Construct the path to the output JAR file.
    if data.jarName:
      jarFilename = path.join(build_dir, data.jarName + '.jar')

    # Construct the bundle filename.
    bundleFilename = None
    if data.bundleType and jarFilename:
      assert data.bundleType in ('onejar', 'merge')
      bundleFilename = path.join(build_dir, data.jarName + '-' + data.bundleType + '.jar')

    # Create a list of all the Java Class files generated by the compiler.
    classFiles = {}
    for root, sources in partition_sources(data.srcs, data.srcRoots, src_dir).items():
      classFiles[root] = []
      for src in sources:
        clsfile = path.join(classDir, root, path.setsuffix(src, '.class'))
        classFiles[root].append(clsfile)

    # Add to the binaryJars the Java libraries from dependencies.
    additionalInputFiles = []
    for dep in target.transitive_dependencies():
      files = dep.target['java.outLibraries']
      additionalInputFiles += files
      data.binaryJars += files
      if dep.properties['java.bundle']:
        bundleBinaryJars += files
      else:
        nobundleBinaryJars += files
    data.binaryJars = list(stream.unique(data.binaryJars))

  if data.srcs and classFiles:
    output_files = []
    for root, files in classFiles.items():
      # Generate the action to compile the Java source files.
      command = [options.javac]
      if data.binaryJars:
        command += ['-cp', path.pathsep.join(map(path.abs, data.binaryJars))]
      command += ['-d', path.join(classDir, root)]
      command += ['$<in']
      command += shlex.split(options.compilerFlags) + data.compilerFlags

      op = operator(name='java.javac-' + root, commands=[command])
      #action = target.add_action('java.javac-' + root, commands=[command],
      #  input=True, deps=artifactActions + input_lib_actions)
      build_set({'in': data.srcs, 'additional': additionalInputFiles}, {'out': files})
      output_files += files

    operator('java.javac', commands=[])
    build_set({'in': output_files}, {})

  if jarFilename:
    assert output_files

    # Generate the action to produce the JAR file.
    flags = 'cvf'
    if data.mainClass:
      flags += 'e'
    command = [options.javacJar, flags, '$@out']
    if data.mainClass:
      command += [data.mainClass]
    for root in classFiles.keys():
      command += ['-C', path.join(classDir, root), '.']

    operator('java.jar', commands=[command])
    build_set({'in': output_files}, {'out': jarFilename})
    properties({'@java.outLibraries+': [jarFilename]})

  # Generate actions to build Java modules.
  if data.jmod:

    for mod_name, mod_dir in data.jmod.items():
      mod_dir = path.canonical(mod_dir, src_dir)
      data.jmod[mod_name] = mod_dir

      mod_filename = path.join(jmodDir, mod_name + '.jar')
      jmodFilenames[mod_name] = mod_filename

      # TODO: Determine the class actions that produce the mentioned class
      #       files so we can add them as dependencies -- allowing the build
      #       backend to determine when the rule needs to be rebuilt.

      mod_filename = jmodFilenames[mod_name]
      commands = []
      commands.append(platform_commands.rm(mod_filename, force=True))
      commands.append(['javac', '-d', classDir, '--module-source-path', mod_dir, '--module', mod_name])
      # TODO: mainCLass per module
      commands.append(['jar', '-c', '--file=$@out', '--main-class=' + data.mainClass, '-C', path.join(classDir, mod_name), '.'])
      operator('java.jmod-' + mod_name, commands=commands)
      build_set({'in': glob('**/*.java', parent=mod_dir)}, {'out': mod_filename})

    operator('java.jmod', commands=[])
    build_set({'in': jmodFilenames.values()}, {})

  # Generate the action to produce a merge of all dependent JARs if
  # so specified in the target.
  if data.bundleType and bundleFilename:
    command = [sys.executable, AUGJAR_TOOL, '-o', '$@out']
    inputs = [jarFilename] + bundleBinaryJars
    if data.bundleType == 'merge':
      command += [inputs[0], '-s', 'Main-Class=' + data.mainClass]
      for infile in inputs[1:]:
        command += ['-m', infile]
    elif data.bundleType == 'onejar':
      command += [options.onejar, '-s', 'One-Jar-Main-Class=' + data.mainClass]
      for infile in inputs:
        command += ['-f', 'lib/' + path.base(infile) + '=' + infile]
      inputs += [options.onejar]
    else:
      raise ValueError('invalid bundleType: {!r}'.format(data.bundleType))
    operator('java.bundle', commands=[command])
    build_set({'in': inputs}, {'out': bundleFilename}, description='$@out')

  if data.jlinkModules:
    data.jlinkModulePath = list(data.jlinkModulePath)
    data.jlinkModulePath.append(jmodDir)  # TODO: Append jmodDir of all dependencies

    # TODO: Collect actions that produce the modules -- possibly from
    # dependent targets and not just this target (thus, just jmod_actions
    # may not be sufficient).

    if not data.jlinkName:
      data.jlinkName = target.name + '-' + target.scope.version + '-runtime'
    if not path.isabs(data.jlinkName):
      data.jlinkOutputDirectory = data.jlinkOutputDirectory or build_dir
      data.jlinkName = path.join(data.jlinkOutputDirectory, data.jlinkName)

    commands = []
    # Make sure the previous directory does not exist.
    commands.append(platform_commands.rm(data.jlinkName, recursive=True, force=True))
    # Generate the jlink command/
    commands.append(['jlink'])
    commands[-1] += ['--module-path', jmodDir]
    commands[-1] += ['--add-modules'] + data.jlinkModules
    commands[-1] += ['--output', data.jlinkName]
    for command, mod_name in data.jlinkLaunchers.items():
      commands[-1] += ['--launcher', '{}={}'.format(command, mod_name)]
    commands[-1] += data.jlinkFlags

    operator('java.jlink', commands=commands, explicit=True, syncio=True)
    build_set({'in': jmodFilenames.values()}, {},
      description='Creating Java Runtime "{}" ...'.format(data.jlinkName))
    # TODO: Determine input/output files?

  if (len(data.jmod) == 1 or jarFilename) and data.mainClass:
    # An action to execute the library JAR (with the proper classpath).
    if jarFilename:
      command = list(data.runArgsPrefix or ['java'])
      classpath = data.binaryJars + [jarFilename]
      command += ['-cp', path.pathsep.join(classpath)]
      command += [data.mainClass] + data.runArgs
      running = data.mainClass
      description = jarFilename
      input_files = [jarFilename]
    else:
      command = list(data.runArgsPrefix or ['java'])
      command += ['-p', jmodDir]  # TODO: Additional JMOD dirs?
      if data.binaryJars:
        command += ['-cp', path.pathsep.join(data.binaryJars)]
      mod_name = next(iter(data.jmod)) + '/' + data.mainClass
      command += ['-m', mod_name] + data.runArgs
      running = '{}/{}'.format(mod_name, data.mainClass)
      description = mod_name
      input_files = jmodFilenames.values()

    operator('java.run', commands=[command], explicit=True, syncio=True)
    build_set({'in': input_files}, {}, description=description)

  if bundleFilename and data.mainClass:
    # An action to execute the bundled JAR.
    command = list(data.runArgsPrefix or ['java'])
    if not nobundleBinaryJars:
      command += ['-jar', bundleFilename]
    else:
      classpath = nobundleBinaryJars + [bundleFilename]
      command += ['-cp', path.pathsep.join(classpath)]
      command += ['com.simontuffs.onejar.Boot' if data.bundleType == 'onejar' else data.mainClass]
    command += data.runArgs
    operator('java.runBundle', commands=[command], explicit=True, syncio=True)
    build_set({'in': bundleFilename}, {}, description=bundleFilename)
