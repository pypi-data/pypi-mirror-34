# coding: utf-8

"""
    Dyspatch API

    # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.   # noqa: E501

    OpenAPI spec version: 2018.02
    Contact: support@dyspatch.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.language_id import LanguageId  # noqa: F401,E501
from swagger_client.models.localization_draft_url import LocalizationDraftUrl  # noqa: F401,E501
from swagger_client.models.localization_id import LocalizationId  # noqa: F401,E501
from swagger_client.models.localization_name import LocalizationName  # noqa: F401,E501
from swagger_client.models.template_draft_id import TemplateDraftId  # noqa: F401,E501


class LocalizationDraftMetaRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'localization': 'LocalizationId',
        'draft': 'TemplateDraftId',
        'language': 'LanguageId',
        'name': 'LocalizationName',
        'url': 'LocalizationDraftUrl'
    }

    attribute_map = {
        'localization': 'localization',
        'draft': 'draft',
        'language': 'language',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, localization=None, draft=None, language=None, name=None, url=None):  # noqa: E501
        """LocalizationDraftMetaRead - a model defined in Swagger"""  # noqa: E501

        self._localization = None
        self._draft = None
        self._language = None
        self._name = None
        self._url = None
        self.discriminator = None

        if localization is not None:
            self.localization = localization
        if draft is not None:
            self.draft = draft
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url

    @property
    def localization(self):
        """Gets the localization of this LocalizationDraftMetaRead.  # noqa: E501


        :return: The localization of this LocalizationDraftMetaRead.  # noqa: E501
        :rtype: LocalizationId
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this LocalizationDraftMetaRead.


        :param localization: The localization of this LocalizationDraftMetaRead.  # noqa: E501
        :type: LocalizationId
        """

        self._localization = localization

    @property
    def draft(self):
        """Gets the draft of this LocalizationDraftMetaRead.  # noqa: E501


        :return: The draft of this LocalizationDraftMetaRead.  # noqa: E501
        :rtype: TemplateDraftId
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this LocalizationDraftMetaRead.


        :param draft: The draft of this LocalizationDraftMetaRead.  # noqa: E501
        :type: TemplateDraftId
        """

        self._draft = draft

    @property
    def language(self):
        """Gets the language of this LocalizationDraftMetaRead.  # noqa: E501


        :return: The language of this LocalizationDraftMetaRead.  # noqa: E501
        :rtype: LanguageId
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LocalizationDraftMetaRead.


        :param language: The language of this LocalizationDraftMetaRead.  # noqa: E501
        :type: LanguageId
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this LocalizationDraftMetaRead.  # noqa: E501


        :return: The name of this LocalizationDraftMetaRead.  # noqa: E501
        :rtype: LocalizationName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocalizationDraftMetaRead.


        :param name: The name of this LocalizationDraftMetaRead.  # noqa: E501
        :type: LocalizationName
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this LocalizationDraftMetaRead.  # noqa: E501


        :return: The url of this LocalizationDraftMetaRead.  # noqa: E501
        :rtype: LocalizationDraftUrl
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LocalizationDraftMetaRead.


        :param url: The url of this LocalizationDraftMetaRead.  # noqa: E501
        :type: LocalizationDraftUrl
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalizationDraftMetaRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
