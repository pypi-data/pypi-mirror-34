"""
Runs commands from the Starlink Figaro package.

Autogenerated from the starlink .hlp and .ifl files,
by starlink-pywrapper/helperscripts/generate_functions.py.

Starlink version: 2018A
b6ca36bf8884802759017298539489d11795861e (2018-07-06 09:36:39)
"""

from . import wrapper


def abconv(spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/abconv .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to convert to AB magnitudes

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ABCONV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/abconv", "abconv", spectrum, output, **kwargs)


def abline(spectrum, contin, sig, itn, deg, width, contout, **kwargs):
    """


    Runs the command: $FIG_DIR/abline .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum with lines to be fitted

    contin : str,filename
        (COntin) File containing precomputed continuum

    sig : float
        (SIG) Multiple of sigma for continuum point rejection

    itn : float
        (ITN) Number of iterations for continuum point rejection

    deg : float
        (DEG) Degree of polynomial for continuum fit

    width : float
        (WIdth) Wavelength range to display at one time

    contout : str,filename
        (CONTout) Output continuum file name


    Keyword Arguments
    -----------------
    cmd : str
        123.4,Sig,Deg,Itn,(No)Limit,Width,Cont,Fit,Recont,Quit,Help

    comment : str
        Comment for hardcopy

    hard : str
         [ ]

    hardcopy : bool
        Produce hardcopy plot

    limit : bool
        (LImit) Set line limits at indicated points?

    linename : str
        Name of this line

    newcont : bool
        (NEWcont) Output continuum to file?

    oldcont : bool
        (OLDcont) Use precomputed continuum?

    soft : str
         [ ]


    Returns
    -------
    high : float

    low : float

    tvcolor : float

    tvfile : str

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float

    xend : float

    xstart : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ABLINE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/abline", "abline", spectrum, contin, sig, itn, deg, width, contout, **kwargs)


def adjoin(spectrum, spectrum1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/adjoin .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) First of the two spectra to be adjoined

    spectrum1 : str,filename
        (SPECTRUM1) 2nd of the two spectra to be adjoined

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ADJOIN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/adjoin", "adjoin", spectrum, spectrum1, output, **kwargs)


def alasin(alasfile, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/alasin .

    Arguments
    ---------
    alasfile : str
        (ALASfile)  Name of input ALAS format file

    spectrum : str,filename
        (SPECtrum) Figaro format output spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ALASIN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/alasin", "alasin", alasfile, spectrum, **kwargs)


def alasout(spectrum, xstart, xend, alasfile, **kwargs):
    """


    Runs the command: $FIG_DIR/alasout .

    Arguments
    ---------
    spectrum : str,filename
        (SPECtrum)  Spectrum to be converted to ALAS format

    xstart : float
        (XSTart) First X value to be converted

    xend : float
        (XEnd) Last X value to be converted

    alasfile : str
        (ALASfile) Name of output ALAS format file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ALASOUT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/alasout", "alasout", spectrum, xstart, xend, alasfile, **kwargs)


def aperture(output, image, opt, low, high, radius, **kwargs):
    """


    Runs the command: $FIG_DIR/aperture .

    Arguments
    ---------
    output : str
        (OUTPUT) Name of output file

    image : str,filename
        (IMAGE) Name of input frame

    opt : str
        (OPT) Type option

    low : float
        (LOW) Low data value for 2-d plot

    high : float
        (HIGH) High data value for 2-d plot

    radius : float
        (RADIUS) Radius of circle


    Keyword Arguments
    -----------------
    idev : str
         [ ]

    ok : bool
        Hit <return> to restore 2-d plot


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_APERTURE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/aperture", "aperture", output, image, opt, low, high, radius, **kwargs)


def arc(spectrum, arctype, sigma, order, arfile, output, **kwargs):
    """


    Runs the command: $FIG_DIR/arc .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Arc spectrum to be fitted

    arctype : str
        (ARctype) Type of arc

    sigma : float
        (SIgma) Arc line half width in pixels

    order : float
        (ORder) Polynomial order for 1st fit

    arfile : str
        (ARFile) Name of file giving previous fit

    output : str,filename
        (OUtput) Resulting arc file with wavelength fit


    Keyword Arguments
    -----------------
    chfact : float
        New value for CHFACT

    cmd : str
        Fit,Order,Disp,Help,Edit,Reselect,Quit,Print,Auto,Xauto,Modify

    disnchan : float
        Length of displayed sections

    hard : str
         [ ]

    hardarc : bool
        Do a hard plot of the arc

    hardisp : bool
        Do a hard plot of the dispersion curve

    lineno : float
        Edit which line, zero to end edit

    lineok : bool
        Correct?

    movetox : float
        X-value

    previous : bool
        (PREvious) Use arc lines from previous fit?

    quitsel : bool
        Quit line selection

    resolve : str
        How is double ID to be resolved (N/O/S)

    sigfact : float
        New value for SIGFACT

    soft : str
         [ ]

    wavelen : str
        Wavelength, blank to cancel line

    writearc : bool
        Create and output file using this fit

    xcorr : bool
        (XCorr) Determine relative shift & redetermine centers?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARC
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arc", "arc", spectrum, arctype, sigma, order, arfile, output, **kwargs)


def arc2d(image, arc_opts, ystart, yend, yblock, iteration, order, maxlines, clfile, **kwargs):
    """


    Runs the command: $FIG_DIR/arc2d .

    Arguments
    ---------
    image : str
        Name of image for input

    arc_opts : str
        Enter arc fit option

    ystart : int
        analysis lower limit

    yend : int
        analysis upper limit

    yblock : int
        Enter analysis x-sect width

    iteration : int
        New value of iteration

    order : int
        order for polynomial fitting

    maxlines : int
        Maximum number of lines to allow room for

    clfile : str
        Name of image for cloning from


    Keyword Arguments
    -----------------
    tols : str
        For use in batch only [dyn.]

    keep_itt : bool
        keep itteration files [dyn.]

    prfits : bool
        Print out details of fitting [dyn.]

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARC2D
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arc2d", "arc2d", image, arc_opts, ystart, yend, yblock, iteration, order, maxlines, clfile, **kwargs)


def arcdisp(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/arcdisp .

    Arguments
    ---------
    `in_` : str,filename
        The input NDF


    Keyword Arguments
    -----------------
    order : , 1- 7
        Polynomial order for dispersion curve [2]

    device : GRAPHICS
        Graphics device

    dialog : str
        Allow extensive graphical interaction ['G']

    fdb : str,filename
        Feature data base NDF

    wrange : List[float]
        Laboratory value range for this row


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARCDISP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arcdisp", "arcdisp", in_, **kwargs)


def arcgendb(in_, fdb, **kwargs):
    """


    Runs the command: $FIG_DIR/arcgendb .

    Arguments
    ---------
    `in_` : str,filename
        Input file with ASCII line list

    fdb : str,filename
        Output NDF for feature data base


    Keyword Arguments
    -----------------
    info : bool
        Issue informational messages [YES]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARCGENDB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arcgendb", "arcgendb", in_, fdb, **kwargs)


def arcident(in_, out, fdb, **kwargs):
    """


    Runs the command: $FIG_DIR/arcident .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output NDF

    fdb : str,filename
        Feature data base NDF


    Keyword Arguments
    -----------------
    drange : List[float]
        Safe dispersion interval [dyn.]

    echelle : bool
        Split WRANGE, assuming orders of echellogram [dyn.]

    info : bool
        Issue informational messages [YES]

    maxloc : int
        Maximum number of features used for identification [30]

    minids : int
        Minimum number of feature identifications to accept solution [9]

    neighb : List[int]
        Start and maximum number of neighbours considered [3,6]

    strength : , 1.- 1E30
        Maximum strength ratio [50.0]

    thresh : , 0.01- 0.2
        Distance ratio match tolerance [0.03]

    wrange : List[float]
        Approximate lab value range


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARCIDENT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arcident", "arcident", in_, out, fdb, **kwargs)


def arclocat(in_, fwhm, thresh, **kwargs):
    """


    Runs the command: $FIG_DIR/arclocat .

    Arguments
    ---------
    `in_` : str,filename
        The input NDF

    fwhm : , 2.- 1E30
        Feature width

    thresh : , 1E-30- 1E30
        Minimum feature strength


    Keyword Arguments
    -----------------
    device : GRAPHICS
        Graphics device

    dialog : str
        Allow extensive graphical interaction ['G']

    info : bool
        Issue informational messages [YES]

    mode : str
        Gauss or triangle features ['Gauss']

    rownum : int
        Number of row to work on next


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARCLOCAT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arclocat", "arclocat", in_, fwhm, thresh, **kwargs)


def arcsdi(image, clfile, arc_opts, output, ystart, yend, yblock, iteration, order, maxlines, **kwargs):
    """


    Runs the command: $FIG_DIR/arcsdi .

    Arguments
    ---------
    image : str
        Name of image for input

    clfile : str
        Name of image for cloning from

    arc_opts : str
        Enter arc fit option

    output : str
        Name of output file

    ystart : int
        analysis lower limit

    yend : int
        analysis upper limit

    yblock : int
        Enter analysis x-sect width

    iteration : int
        New value of iteration

    order : int
        order for polynomial fitting

    maxlines : int
        Maximum number of lines to allow room for


    Keyword Arguments
    -----------------
    tols : str
        For use in batch only [dyn.]

    keep_itt : bool
        keep itteration files [dyn.]

    prfits : bool
        Print out details of fitting [dyn.]

    plotcorr : bool
        Plot correction?

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ARCSDI
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/arcsdi", "arcsdi", image, clfile, arc_opts, output, ystart, yend, yblock, iteration, order, maxlines, **kwargs)


def ascin(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/ascin .

    Arguments
    ---------
    `in_` : str,filename
        ASCII input file


    Keyword Arguments
    -----------------
    lines : List[int]
        Line number range [1,9999]

    bad : float
        Bad value as used in table [-999999.]

    colaxes : List[int]
        Columns to read axis data from [1,2]

    coldata : List[int]
        Columns to read data and errors from [3,0]

    colwidth : int
        Column to read pixel width from [0]

    end : List[float]
        Data end values

    info : bool
        Issue informational messages [YES]

    out : str,filename
        Output NDF

    start : List[float]
        Data start values

    step : List[float]
        Pixel step values

    tol : , 0.- .5
        Table/pixel coordinate mismatch tolerance [0.2]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ASCIN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ascin", "ascin", in_, **kwargs)


def ascout(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/ascout .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output ASCII file


    Keyword Arguments
    -----------------
    bad : float
        Table value to replace bad values [-999999.0]

    width : bool
        Write also the pixel widths [NO]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ASCOUT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ascout", "ascout", in_, out, **kwargs)


def bbody(temp, **kwargs):
    """


    Runs the command: $FIG_DIR/bbody .

    Arguments
    ---------
    temp : , 1E-35- 1E+35
        Black body temperature in K


    Keyword Arguments
    -----------------
    errtemp : , 1E-35- 1E+35
        Error on the Black body temperature in K [dyn.]

    `in_` : str,filename
        Input NDF [!]

    logar : bool
        Write logarithms of intensity [NO]

    out : str,filename
        Output NDF

    xend : float
        Spectroscopic axis end value

    xlabel : str
        Label for spectroscopic axis [wavelength]

    xstart : float
        Spectroscopic axis start value

    xstep : float
        Spectroscopic axis increment

    xunit : str
        Unit for spectroscopic axis


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_BBODY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/bbody", "bbody", temp, **kwargs)


def bclean(image, nbrows, brows, crsig, crfact, crminv, crsharpness, brfact, brpass, degfix, output, **kwargs):
    """


    Runs the command: $FIG_DIR/bclean .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be cleaned

    nbrows : float
        (NBRows) Number of bad rows to be cleaned

    brows : float
        (BRows) Bad rows

    crsig : float
        (CRSig) Cosmic ray sigma cutoff

    crfact : float
        (CRFact) Cosmic ray fractional cutoff

    crminv : float
        (CRMinv) Cosmic ray minimum excess value

    crsharpness : float
        (CRSharpness) Cosmic ray minimum sharpness value

    brfact : float
        (BRFact) Bad row fractional cutoff

    brpass : float
        (BRPass) Number of passes in bad row search

    degfix : float
        (DEGfix) Polynomial degree for interpolation

    output : str,filename
        (OUTput) Name of cleaned image


    Keyword Arguments
    -----------------
    autorow : bool
        (AUTOrow) Perform automatic search for bad lines?

    direction : float
        (DIRECTion) Interp. direction (-1=rows, 1=columns, 0=best)

    fix : bool
        (FIx) Fix up the bad lines and cosmic rays?

    sharpness : bool
        (SHarpness) Perform sharpness test on cosmic rays?

    textfile : bool
        (TExtfile) Produce a text file of cosmic ray results?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_BCLEAN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/bclean", "bclean", image, nbrows, brows, crsig, crfact, crminv, crsharpness, brfact, brpass, degfix, output, **kwargs)


def bfft(cdata, output, **kwargs):
    """


    Runs the command: $FIG_DIR/bfft .

    Arguments
    ---------
    cdata : str,filename
        (CData) Data to be Fourier transformed

    output : str,filename
        (OUtput) Resulting transformed data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_BFFT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/bfft", "bfft", cdata, output, **kwargs)


def bsmult(spectrum, bstar, output, **kwargs):
    """


    Runs the command: $FIG_DIR/bsmult .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be B-star calibrated

    bstar : str,filename
        (BStar) B-star calibration spectrum

    output : str,filename
        (OUTput) Resulting spectrum


    Keyword Arguments
    -----------------
    beta : float
        (BEta) Power to which airmass ratio is raised


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_BSMULT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/bsmult", "bsmult", spectrum, bstar, output, **kwargs)


def cadd(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cadd .

    Arguments
    ---------
    image : str
        Name of image for input

    output : str
        OUTput Name of output file


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cadd", "cadd", image, output, **kwargs)


def caldiv(standard, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/caldiv .

    Arguments
    ---------
    standard : str,filename
        (STAndard) Absolute continuum standard spectrum

    spectrum : str,filename
        (SPEctrum) Observed spectrum of standard

    output : str,filename
        (OUTput) Output instrumental response spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CALDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/caldiv", "caldiv", standard, spectrum, output, **kwargs)


def ccdlin(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ccdlin .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be corrected

    output : str,filename
        (OUTput) Name of resulting image


    Keyword Arguments
    -----------------
    alpha : float
        (ALpha) Linearity constant

    cbias : float
        (CBias) Bias value to be used


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CCDLIN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ccdlin", "ccdlin", image, output, **kwargs)


def ccur(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/ccur .

    Keyword Arguments
    -----------------
    screen : bool
        (Screen) Use screen formatting for terminal? [dyn.]

    soft : str
         [ ]

    tvfile : str
         [ ]

    tvhigh : float
         [0.]

    tvlow : float
         [0.]

    tvxen : float
         [0.]

    tvxst : float
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CCUR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ccur", "ccur", *args, **kwargs)


def cdist(image, ystart, yend, output, maxdegy, **kwargs):
    """


    Runs the command: $FIG_DIR/cdist .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be corrected for S-distortion

    ystart : float
        (YStart) First Y value in range to be corrected

    yend : float
        (YEnd) Last Y value in range to be corrected

    output : str,filename
        (OUTput) Name of resulting image

    maxdegy : float
        (MAXdegy) Maximum degree polynomial to be used


    Keyword Arguments
    -----------------
    rotate : bool
        (ROTate) Try to minimise paging by prior rotation? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CDIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cdist", "cdist", image, ystart, yend, output, maxdegy, **kwargs)


def centers(image, aperture, xoff, yoff, **kwargs):
    """


    Runs the command: $FIG_DIR/centers .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of Image data

    aperture : float
        (APerture) Size of aperture for centroiding

    xoff : float
        (Xoff) Offset in X to add to positions

    yoff : float
        (Yoff) Offset in Y to add to positions


    Keyword Arguments
    -----------------
    chgprof : bool
        Change profile display parameters

    disprof : bool
        Display radial profile

    npixels : float
         [0.]

    pfile : bool
        (PFile) Record radial profiles in a listing file?

    profbox : float
        Size of profile "box"

    profmax : float
        Maximum displayed value

    profmin : float
        Minimum displayed value

    soft : str
         [ ]

    xpixels : float
         [0.]

    ypixels : float
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CENTERS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/centers", "centers", image, aperture, xoff, yoff, **kwargs)


def cfit(output, **kwargs):
    """


    Runs the command: $FIG_DIR/cfit .

    Arguments
    ---------
    output : str,filename
        (OUtput) Output file for interpolated data


    Keyword Arguments
    -----------------
    change : bool
        Modify points

    redraw : bool
        Redraw original spectrum

    soft : str
         [ ]

    tvcolor : float
         [0.]

    tvfile : str
         [ ]

    tvhigh : float
         [0.]

    tvlow : float
         [0.]

    tvxen : float
         [0.]

    tvxst : float
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CFIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cfit", "cfit", output, **kwargs)


def changed(image, image2, **kwargs):
    """


    Runs the command: $FIG_DIR/changed .

    Arguments
    ---------
    image : str
        Name of image for input

    image2 : str
        Name of image for input


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CHANGED
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/changed", "changed", image, image2, **kwargs)


def clean(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/clean .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be grey-scaled

    output : str,filename
        (OUTput) Name of resulting image


    Keyword Arguments
    -----------------
    deg : float
        Degree of fit to use for interpolation

    high : float
        Highest displayed data value

    idev : str
         [0.]

    low : float
        Lowest displayed data value

    quit : bool
        Terminate cleaning process

    xsize : float
        Side of box deleted by "X" and "Y", in X

    ysize : float
        Side of box deleted by "X" and "Y", in Y


    Returns
    -------
    imarray : float

    imfile : str


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CLEAN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/clean", "clean", image, output, **kwargs)


def clip(image, lowclip, highclip, output, **kwargs):
    """


    Runs the command: $FIG_DIR/clip .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be clipped

    lowclip : float
        (LOwclip) Low threshold

    highclip : float
        (HIghclip) High threshold

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CLIP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/clip", "clip", image, lowclip, highclip, output, **kwargs)


def cmplx2i(cdata, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplx2i .

    Arguments
    ---------
    cdata : str,filename
        (CData) Complex data containing the imaginary array

    output : str,filename
        (OUTput) Resulting (non-complex) data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLX2I
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplx2i", "cmplx2i", cdata, output, **kwargs)


def cmplx2m(cdata, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplx2m .

    Arguments
    ---------
    cdata : str,filename
        (CData) Complex data containing the modulus array

    output : str,filename
        (OUTput) Resulting (non-complex) data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLX2M
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplx2m", "cmplx2m", cdata, output, **kwargs)


def cmplx2r(cdata, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplx2r .

    Arguments
    ---------
    cdata : str,filename
        (CData) Complex data from which to take real array

    output : str,filename
        (OUTput) Resulting (non-complex) data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLX2R
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplx2r", "cmplx2r", cdata, output, **kwargs)


def cmplxadd(cdata, cdata1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplxadd .

    Arguments
    ---------
    cdata : str,filename
        (CData) Name of first complex structure

    cdata1 : str,filename
        (CDATA1) Name of second complex structure

    output : str,filename
        (OUTput) Name of resulting complex structure


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLXADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplxadd", "cmplxadd", cdata, cdata1, output, **kwargs)


def cmplxconj(cdata, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplxconj .

    Arguments
    ---------
    cdata : str,filename
        (CData) Name of complex structure

    output : str,filename
        (OUTput) Name of resulting complex conjugate


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLXCONJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplxconj", "cmplxconj", cdata, output, **kwargs)


def cmplxdiv(cdata, cdata1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplxdiv .

    Arguments
    ---------
    cdata : str,filename
        (CData) Name of first complex structure

    cdata1 : str,filename
        (CDATA1) Name of complex divisor structure

    output : str,filename
        (OUTput) Name of resulting complex structure


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLXDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplxdiv", "cmplxdiv", cdata, cdata1, output, **kwargs)


def cmplxfilt(cdata, lowcut, hicut, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplxfilt .

    Arguments
    ---------
    cdata : str,filename
        (CData) Template complex data structure

    lowcut : float
        (LOwcut) Low cutoff point for filter

    hicut : float
        (HIcut) High cutoff point for filter

    output : str,filename
        (OUTput) Resulting complex filter


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLXFILT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplxfilt", "cmplxfilt", cdata, lowcut, hicut, output, **kwargs)


def cmplxmult(cdata, cdata1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplxmult .

    Arguments
    ---------
    cdata : str,filename
        (CData) Name of first complex structure

    cdata1 : str,filename
        (CDATA1) Name of second complex structure

    output : str,filename
        (OUTput) Name of resulting complex structure


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLXMULT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplxmult", "cmplxmult", cdata, cdata1, output, **kwargs)


def cmplxsub(cdata, cdata1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cmplxsub .

    Arguments
    ---------
    cdata : str,filename
        (CData) Name of first complex structure

    cdata1 : str,filename
        (CDATA1) Name of complex structure to be subtracted

    output : str,filename
        (OUTput) Name of resulting complex structure


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CMPLXSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cmplxsub", "cmplxsub", cdata, cdata1, output, **kwargs)


def coadd(image, tstart, tend, ystart, yend, cutoff, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/coadd .

    Arguments
    ---------
    image : str,filename
        (IMage) The 2D data to be reduced to a spectrum

    tstart : float
        (TStart) first t-value to be used

    tend : float
        (TEnd) last t-value to be used

    ystart : float
        (YStart) first y-value to be used

    yend : float
        (YEnd) last y-value to be used

    cutoff : float
        (CUToff) value to exclude data point

    spectrum : str,filename
        (SPectrum) Name of resulting spectrum


    Keyword Arguments
    -----------------
    norm : bool
        (NOrm) Normalize Each Cycle?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/coadd", "coadd", image, tstart, tend, ystart, yend, cutoff, spectrum, **kwargs)


def colour(table, **kwargs):
    """


    Runs the command: $FIG_DIR/colour .

    Arguments
    ---------
    table : str
        (TABLE) Name of the colour lookup table


    Keyword Arguments
    -----------------
    idev : str
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COLOUR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/colour", "colour", table, **kwargs)


def comb(image, maxlines, clfile, arc_opts, output, xstart, xend, xblock, iteration, level, order, **kwargs):
    """


    Runs the command: $FIG_DIR/comb .

    Arguments
    ---------
    image : str
        Name of image for input

    maxlines : int
        Maximum number of lines to allow room for

    clfile : str
        Name of image for cloning from

    arc_opts : str
        Enter arc fit option

    output : str
        Name of output file

    xstart : int
        analysis lower limit

    xend : int
        analysis upper limit

    xblock : int
        Enter averaging width in channels

    iteration : int
        New value of iteration

    level : float
        Level of edge of tooth

    order : int
        order for polynomial fitting


    Keyword Arguments
    -----------------
    tols : str
        For use in batch only [dyn.]

    keep_itt : bool
        keep itteration files? [dyn.]

    quick : bool
        Centriod rather than fit gaussians? [dyn.]

    prfits : bool
        Print out details of fitting [dyn.]

    plotcorr : bool
        Plot correction?

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COMB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/comb", "comb", image, maxlines, clfile, arc_opts, output, xstart, xend, xblock, iteration, level, order, **kwargs)


def combine(spectrum, spectrum1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/combine .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of first Spectrum

    spectrum1 : str,filename
        (SPECTRUM1) Name of second spectrum

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COMBINE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/combine", "combine", spectrum, spectrum1, output, **kwargs)


def copobj(source, object, **kwargs):
    """


    Runs the command: $FIG_DIR/copobj .

    Arguments
    ---------
    source : HDSOBJECT
        HDS object to be copied

    object : HDSOBJECT
        HDS object to be created or modified


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COPOBJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/copobj", "copobj", source, object, **kwargs)


def correl(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/correl .

    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CORREL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/correl", "correl", *args, **kwargs)


def cosbell(spectrum, bellpc, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cosbell .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Template to base cosine bell data upon

    bellpc : float
        (BEllpc) Percentage of data covered by cosine bell

    output : str,filename
        (OUTput) Name of resulting data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COSBELL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cosbell", "cosbell", spectrum, bellpc, output, **kwargs)


def cosrej(image, xstart, xend, crsig, mspect, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cosrej .

    Arguments
    ---------
    image : str,filename
        (IMage) The file containing the spectra

    xstart : float
        (XStart) First X-value to use in calculating means

    xend : float
        (XEnd) Last X-value to use in calculating means

    crsig : float
        (CRSig) Cosmic ray sigma rejection level

    mspect : str,filename
        (MSpect) Name of mean value spectrum to be generated

    output : str,filename
        (OUtput) The file containing the corrected spectra


    Keyword Arguments
    -----------------
    wmean : bool
        (WMean) Produce spectrum consisting of mean values?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_COSREJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cosrej", "cosrej", image, xstart, xend, crsig, mspect, output, **kwargs)


def creobj(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/creobj .

    Keyword Arguments
    -----------------
    type : str
        HDS-type of object to be created ['_REAL']

    dims : int
        Dimensions of HDS object to be created [0]

    object : HDSOBJECT
        HDS object to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CREOBJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/creobj", "creobj", *args, **kwargs)


def crigauss(image, centre2, height2, width3, centre3, height3, width4, centre4, height4, width5, centre5, ydim, height5, base, ncomp, xdim, xstart, xend, width1, centre1, height1, width2, **kwargs):
    """


    Runs the command: $FIG_DIR/crigauss .

    Arguments
    ---------
    image : str
        Name of image to be created

    centre2 : float
        CENTRE2 of gaussian

    height2 : float
        HEIGHT2 of gaussian

    width3 : float
        WIDTH3 of gaussian (fwhm)

    centre3 : float
        CENTRE3 of gaussian

    height3 : float
        HEIGHT3 of gaussian

    width4 : float
        WIDTH4 of gaussian (fwhm)

    centre4 : float
        CENTRE4 of gaussian

    height4 : float
        HEIGHT4 of gaussian

    width5 : float
        WIDTH5 of gaussian (fwhm)

    centre5 : float
        CENTRE5 of gaussian

    ydim : int
        Y dimension of data

    height5 : float
        HEIGHT5 of gaussian

    base : float
        BASE for gaussian

    ncomp : int
        NCOMP Number of componants

    xdim : int
        X dimension of data"

    xstart : float
        First X value

    xend : float
        Last X value

    width1 : float
        WIDTH1 of gaussian (fwhm)

    centre1 : float
        CENTRE1 of gaussian

    height1 : float
        HEIGHT1 of gaussian

    width2 : float
        WIDTH2 of gaussian (fwhm)


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CRIGAUSS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/crigauss", "crigauss", image, centre2, height2, width3, centre3, height3, width4, centre4, height4, width5, centre5, ydim, height5, base, ncomp, xdim, xstart, xend, width1, centre1, height1, width2, **kwargs)


def cscan(cube, ystart, yend, tstart, tend, hardcopy, **kwargs):
    """


    Runs the command: $FIG_DIR/cscan .

    Arguments
    ---------
    cube : str
        Name of CUBE for input

    ystart : float
        display lower limit

    yend : float
        display upper limit

    tstart : int
        display lower limit

    tend : int
        display upper limit

    hardcopy : bool
        use hard graphics device for display


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CSCAN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cscan", "cscan", cube, ystart, yend, tstart, tend, hardcopy, **kwargs)


def cset(value, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cset .

    Arguments
    ---------
    value : float
        (Value) Constant value to set selected regions to

    output : str,filename
        (OUtput) Output file for modified data


    Keyword Arguments
    -----------------
    quit : bool
        Terminate region selection

    soft : str
         [ ]

    tvcolor : float
         [0.]

    tvfile : str
         [ ]

    tvhigh : float
         [0.]

    tvlow : float
         [0.]

    tvxen : float
         [0.]

    tvxst : float
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cset", "cset", value, output, **kwargs)


def cspike(spiketrum, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/cspike .

    Arguments
    ---------
    spiketrum : str,filename
        (SPIketrum) Spiketrum generated from standard table

    spectrum : str,filename
        (SPEctrum) Observed spectrum of standard

    output : str,filename
        (OUTput) Output instrumental response spiketrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CSPIKE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cspike", "cspike", spiketrum, spectrum, output, **kwargs)


def csub(image, **kwargs):
    """


    Runs the command: $FIG_DIR/csub .

    Arguments
    ---------
    image : str
        Name of image for input


    Keyword Arguments
    -----------------
    old : bool
        OLD - old coefficients are to be used for correction [dyn.]

    output : str
        OUTput Name of output file

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/csub", "csub", image, **kwargs)


def cube2long(cube, output, ypoint, xpoint, angle, pixlen, **kwargs):
    """


    Runs the command: $FIG_DIR/cube2long .

    Arguments
    ---------
    cube : str
        Name of cubefor input

    output : str
        OUTput Name of output file

    ypoint : int
        Y point on slit

    xpoint : int
        X point on slit

    angle : float
        pa of slit

    pixlen : float
        Pixel length


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_CUBE2LONG
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/cube2long", "cube2long", cube, output, ypoint, xpoint, angle, pixlen, **kwargs)


def delobj(object, **kwargs):
    """


    Runs the command: $FIG_DIR/delobj .

    Arguments
    ---------
    object : HDSOBJECT
        HDS object to be deleted


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_DELOBJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/delobj", "delobj", object, **kwargs)


def dvdplot(image, image2, xlow, xhigh, low, high, **kwargs):
    """


    Runs the command: $FIG_DIR/dvdplot .

    Arguments
    ---------
    image : str,filename
        (IMAGE) Structure whose data is to be plotted

    image2 : str,filename
        (IMAGE2) Structure against which IMAGE is to be plotted

    xlow : float
        (XLow) Lowest value in second image to use (X-value)

    xhigh : float
        (XHigh) Highest value in second image to use (X-value)

    low : float
        (Low) Lowest value in image to use (Y-value)

    high : float
        (High) Highest value in image to use (Y-value)


    Keyword Arguments
    -----------------
    autoscale : bool
        (AUtoscale) Autoscale so all image points fit?

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Produce a hardcopy plot?

    soft : str
         [ ]

    whole : bool
        (WHole) Use all values in second image?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_DVDPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/dvdplot", "dvdplot", image, image2, xlow, xhigh, low, high, **kwargs)


def echarc(image, arctype, interactive, orders, sigma, orderfit, arfile, waves, output, **kwargs):
    """


    Runs the command: $FIG_DIR/echarc .

    Arguments
    ---------
    image : str,filename
        (IMage) Collapsed echelle arc image to be fitted

    arctype : str
        (ARctype) Type of arc

    interactive : float
        (INTeractive) Number of orders to fit interactively

    orders : float
        (ORDERS) Order numbers

    sigma : float
        (SIgma) Arc line half width in pixels

    orderfit : float
        (ORDERFit) Polynomial order for 1st fit

    arfile : str
        (ARFile) Name of file giving previous fit

    waves : str,filename
        (WAves) Name of wavelength output image

    output : str,filename
        (WAves) Name input copy with fitted wavelength


    Keyword Arguments
    -----------------
    analysis : bool
        Save a detailed line by line analysis

    chfact : float
        New value for CHFACT

    cmd : str
        Fit,O_fit,Disp,Help,Edit,Reselect,Cont,Print,Auto,Xauto,Modify

    `continue_` : str
        Continue,Repeat,Start,Quit

    disnchan : float
        Length of displayed sections

    dowaves : bool
        (DOWaves) Write wavelength information to separate file?

    hard : str
         [ ]

    hardarc : bool
        Do a hard plot of the last order arc

    hardisp : bool
        Do a hard plot of the last order dispersion curve

    hatlas : bool
        Do hardcopy atlas of entire arc fit

    hlinemap : bool
        Do hardcopy plot of arc line map

    lineno : float
        Edit which line, zero to end edit

    lineok : bool
        Correct?

    monitor : bool
        (MONitor) ECHARC autofitting on device "PGPLOT" ? [dyn.]

    movetox : float
        X-value

    ordppag : float
        Number of sub-order panels per page

    previous : bool
        (PREvious) Use arc lines from previous fit?

    quitsel : bool
        Quit line selection in this order

    resolve : str
        How is double ID to be resolved (N/O/S)

    sigfact : float
        New value for SIGFACT

    soft : str
         [ ]

    thickness : float
         [0.]

    wavelen : str
        Wavelength, blank to cancel line


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ECHARC
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/echarc", "echarc", image, arctype, interactive, orders, sigma, orderfit, arfile, waves, output, **kwargs)


def echfind(image, ystart, yend, mstart, mdelta, outfile, thresh, minhw, output, **kwargs):
    """


    Runs the command: $FIG_DIR/echfind .

    Arguments
    ---------
    image : str,filename
        (IMage) name of echelle image in which to search

    ystart : float
        (YSTart) Y value to start search for orders

    yend : float
        (YEnd) Y value to stop search for orders

    mstart : float
        (MStart) number of the first order in range

    mdelta : float
        (MDelta) order number increment (-1 or +1) ?

    outfile : str
        (OUTFile) name of output report file

    thresh : float
        (THResh) threshold above which orders are deemed to exist

    minhw : float
        (MINHw) minimum half-width of orders

    output : str,filename
        (OUTput) name of mask image showing order positions


    Keyword Arguments
    -----------------
    domask : bool
        (DOMask) create an output mask image?

    periscope : bool
        (PERIscope) Is the periscope fitted?

    sdist : bool
        (SDIst) write output file SDIST.DAT in SDIST format?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ECHFIND
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/echfind", "echfind", image, ystart, yend, mstart, mdelta, outfile, thresh, minhw, output, **kwargs)


def echmask(cofile, mask, objwidth, objoffset, s1width, s1offset, s2width, s2offset, mstart, mdelta, **kwargs):
    """


    Runs the command: $FIG_DIR/echmask .

    Arguments
    ---------
    cofile : str
        (COFile) Name of file containing order fit coeffs

    mask : str,filename
        (MASk) Name of mask image showing order positions

    objwidth : float
        (OBJWidth) Number of rows of object to extract per order

    objoffset : float
        (OBJOffset) Offset from order centre of object centre

    s1width : float
        (S1Width) Number of rows of region 1 sky to extract

    s1offset : float
        (S1Offset) Offset from object centre of region 1 sky centre

    s2width : float
        (S2Width) Number of rows of region 2 sky to extract

    s2offset : float
        (S2Offset) Offset from object centre of region 2 sky centre

    mstart : float
        (MStart) Number of the first order fitted

    mdelta : float
        (MDelta) Order number increment (-1 or +1)


    Keyword Arguments
    -----------------
    periscope : bool
        (PERIscope) Is the star / sky periscope fitted?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ECHMASK
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/echmask", "echmask", cofile, mask, objwidth, objoffset, s1width, s1offset, s2width, s2offset, mstart, mdelta, **kwargs)


def echmerge(image, image1, box, cutoff, output, **kwargs):
    """


    Runs the command: $FIG_DIR/echmerge .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of first image

    image1 : str
        (IMAGE1) Name of second image

    box : float
        (Box) Size of box for median filter

    cutoff : float
        (CUToff) Max ratio of data that permits contrib from weaker

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ECHMERGE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/echmerge", "echmerge", image, image1, box, cutoff, output, **kwargs)


def echselect(image, xstart, xend, mstart, mdelta, objout, skyout, **kwargs):
    """


    Runs the command: $FIG_DIR/echselect .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of distortion-corrected echellogram

    xstart : float
        (XStart) First x-axis value for collapse of image

    xend : float
        (XEnd) Last x-axis value for collapse of image

    mstart : float
        (MStart) Number of the first order fitted

    mdelta : float
        (MDelta) Order number increment (-1 or +1)

    objout : str,filename
        (OBJout) Name of created object echellogram

    skyout : str,filename
        (SKYout) Name of created sky echellogram


    Keyword Arguments
    -----------------
    add : bool
        Add to object cross-sections already selected

    clear : bool
        Clear all settings for this order

    disnchan : float
        Length of displayed sections in pixels

    high : float
        Maximum value for display

    low : float
        Minimum value for display

    movetox : float
        Move to which X-axis value

    order : float
        Set order number

    previous : bool
        (PREvious) Read in the previous selection?

    quitsel : bool
        Quit selection

    soft : str
         [ ]

    whole : bool
        (WHole) Sum all cross-sections to give cut through image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ECHSELECT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/echselect", "echselect", image, xstart, xend, mstart, mdelta, objout, skyout, **kwargs)


def editext(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/editext .

    Keyword Arguments
    -----------------
    request : str
        What kind of action required [List]

    `in_` : str,filename
        Input NDF

    logfil : str,filename
        ASCII file name for list output [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EDITEXT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/editext", "editext", *args, **kwargs)


def elsplot(spectrum, xsize, ysize, xstart, xend, high, low, bias, label, **kwargs):
    """


    Runs the command: $FIG_DIR/elsplot .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be plotted

    xsize : float
        (XSIze) Plot length in metres

    ysize : float
        (YSIze) Height of plot in metres

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    high : float
        (HIgh) Maximum data value to be plotted

    low : float
        (LOw) Minimum data value to be plotted

    bias : float
        (BIas) Bias value to be added to data

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    autoscale : bool
        (AUtoscale) Scale so all of spectrum fits?

    hard : str
         [ ]

    whole : bool
        (WHole) Plot all of spectrum?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ELSPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/elsplot", "elsplot", spectrum, xsize, ysize, xstart, xend, high, low, bias, label, **kwargs)


def emlt(spectrum, xstart, xend, lines, **kwargs):
    """


    Runs the command: $FIG_DIR/emlt .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum containing lines to be fitted

    xstart : float
        (XStart) X-value at which analysis starts

    xend : float
        (XEnd) X-value at which analysis ends

    lines : float
        (LInes) Number of lines to fit (0 -> all lines)


    Keyword Arguments
    -----------------
    fwhm : float
        (Fwhm) Forced FWHM for fitted lines

    output : str,filename
        (OUTput) Name of resulting synthetic spectrum

    moments : bool
        (MOMents) Include center of moment analysis? [dyn.]

    synth : bool
        (SYnth) Generate a synthetic spectrum from the fits? [dyn.]


    Returns
    -------
    emlt_bin : float

    emlt_fwhm_ang : float

    emlt_fwhm_bin : float

    emlt_lines : float

    emlt_peak : float

    emlt_pos : float

    emlt_stren : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EMLT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/emlt", "emlt", spectrum, xstart, xend, lines, **kwargs)


def errcon(spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/errcon .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of file with percentage errors

    output : str,filename
        (OUTput) Name of file with absolute errors


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ERRCON
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/errcon", "errcon", spectrum, output, **kwargs)


def esplot(spectrum, xstart, xend, high, low, bias, label, **kwargs):
    """


    Runs the command: $FIG_DIR/esplot .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be plotted

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    high : float
        (HIgh) Maximum data value to be plotted

    low : float
        (LOw) Minimum data value to be plotted

    bias : float
        (BIas) Bias value to be added to data

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    colour : str
        (COLour) Plot colour (Bl,Wh,R,G,B,Cy,Ma,Y)

    thickness : float
        (THickness) Plotted line width

    autoscale : bool
        (AUtoscale) Scale so all of spectrum fits?

    axes : bool
        (AXes) Plot and label axes? [dyn.]

    erase : bool
        (ERase) Erase screen before plotting? [dyn.]

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Produce plot as a hard copy?

    soft : str
         [ ]

    whole : bool
        (WHole) Plot all of spectrum?


    Returns
    -------
    tvcolor : float

    tvfile : str

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ESPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/esplot", "esplot", spectrum, xstart, xend, high, low, bias, label, **kwargs)


def evalfit(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/evalfit .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output NDF


    Keyword Arguments
    -----------------
    comp : int
        Component(s) to evaluate [1,2,3,4,5,6]

    dialog : str
        Allow repeated ['T']

    info : bool
        Issue informational messages [YES]

    reply : bool
        Evaluate another set of components [NO]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EVALFIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/evalfit", "evalfit", in_, out, **kwargs)


def exam(*args, **kwargs):
    """


    Runs the command: echo 'The EXAM command has been removed.  Please use HDSTRACE instead.' .

    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EXAM
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("echo 'The EXAM command has been removed.  Please use HDSTRACE instead.'", "exam", *args, **kwargs)


def extin(spectrum, coeff, output, **kwargs):
    """


    Runs the command: $FIG_DIR/extin .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be corrected for extinction

    coeff : str,filename
        (COeff) Extinction coefficient spectrum

    output : str,filename
        (OUTput) Resulting spetcrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EXTIN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/extin", "extin", spectrum, coeff, output, **kwargs)


def extlist(image, nrows, sections, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/extlist .

    Arguments
    ---------
    image : str,filename
        (IMage) name of image to extract data from

    nrows : str
        (NRows) How many rows to be added

    sections : float
        (SECtions) List of rows

    spectrum : str,filename
        (SPectrum) name of spectrum to be generated


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EXTLIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/extlist", "extlist", image, nrows, sections, spectrum, **kwargs)


def extract(image, ystart, yend, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/extract .

    Arguments
    ---------
    image : str,filename
        (IMage) name of image to extract data from

    ystart : float
        (YStart) first y-value to be used

    yend : float
        (YEnd) last y-value to be used

    spectrum : str,filename
        (SPectrum) name of spectrum to be generated


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_EXTRACT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/extract", "extract", image, ystart, yend, spectrum, **kwargs)


def fet321(cube, detector, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/fet321 .

    Arguments
    ---------
    cube : str,filename
        (CUbe) The FIGS data cube to be reduced to a spectrum

    detector : float
        (DETector) Detector number to use

    spectrum : str,filename
        (SPectrum) Name of resulting spectrum


    Keyword Arguments
    -----------------
    cutoff : float
        (CUToff) value to exclude data point

    add : bool
        (ADd) Add all data rather than subtracting background? [dyn.]

    back : bool
        (BAck) Return background spectrum only? [dyn.]

    norm : bool
        (NOrm) Normalize Each Cycle? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FET321
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fet321", "fet321", cube, detector, spectrum, **kwargs)


def ff(image, flat, order, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ff .

    Arguments
    ---------
    image : str,filename
        (IMAGE) Name of data to be flat fielded

    flat : str,filename
        (FLAT) Name of flat field to be used

    order : float
        (ORDER) Order for flat field profile fit

    output : str,filename
        (OUTPUT) Name of result of operation


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ff", "ff", image, flat, order, output, **kwargs)


def ffcross(image, flat, ystart, yend, xstart, xend, cross, **kwargs):
    """


    Runs the command: $FIG_DIR/ffcross .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    flat : str,filename
        (FLat) Name of flat field

    ystart : float
        (YStart) First Y value to be used

    yend : float
        (YEnd) Last Y value to be used

    xstart : float
        (XStart) First X value to be used

    xend : float
        (XEnd) Last X value to be used

    cross : str,filename
        (CRoss) Name of cross-correlation data?


    Keyword Arguments
    -----------------
    log : bool
        (LOg) Log individual cross-section shifts? [dyn.]

    record : bool
        (RECord) Create file to record cross-correlation?


    Returns
    -------
    avshift : float

    shift : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FFCROSS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ffcross", "ffcross", image, flat, ystart, yend, xstart, xend, cross, **kwargs)


def fft(cdata, output, **kwargs):
    """


    Runs the command: $FIG_DIR/fft .

    Arguments
    ---------
    cdata : str,filename
        (CData) Data to be Fourier transformed

    output : str,filename
        (OUtput) Resulting transformed data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FFT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fft", "fft", cdata, output, **kwargs)


def fib2cube(image1, image2, image3, image4, image5, cube, file, maxgauss, **kwargs):
    """


    Runs the command: $FIG_DIR/fib2cube .

    Arguments
    ---------
    image1 : str
        Input image 1

    image2 : str
        Input image 2

    image3 : str
        Input image 3

    image4 : str
        Input image 4

    image5 : str
        Input image 5

    cube : str
        Output data cube

    file : str
        Name of file with coordinates for output cube

    maxgauss : int
        Maximum number of Gaussians to allow room for


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIB2CUBE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fib2cube", "fib2cube", image1, image2, image3, image4, image5, cube, file, maxgauss, **kwargs)


def fibdisp(cube, outable, ystart, yend, yblock, tstart, tend, tblock, device, iteration, **kwargs):
    """


    Runs the command: $FIG_DIR/fibdisp .

    Arguments
    ---------
    cube : str
        Cube for display

    outable : str
        Name for EXTATIC file

    ystart : float
        analysis lower limit

    yend : float
        analysis upper limit

    yblock : float
        Enter analysis x-sect width

    tstart : float
        analysis lower limit

    tend : float
        analysis upper limit

    tblock : float
        Enter analysis blocking width in 3rd dimension

    device : str
        Device for display

    iteration : int
        New value of itteration


    Keyword Arguments
    -----------------
    vcorr : float
        correction to apply to radial velocities [dyn.]

    tols : str
        For use in batch only [dyn.]

    fitrat : float
        Ratio of widths, heights, or separation, for double fits [dyn.]

    calrat : int
        Ratio of number of iteration to default [dyn.]

    output : str
        Name for output file

    fit_model : str
        Model of fit to perform

    low : float
        Minimum value for display

    high : float
        Maximum value for display

    absorption : bool
        Allow fitting of absorption lines [dyn.]

    bounds : bool
        Perform bounded fits to lines (in batch) [dyn.]

    hardcopy : bool
        produce hardcopy plots of fits from cube [dyn.]

    table : bool
        produce table of fits from cube [dyn.]

    print : bool
        Produce print out of rotation curves [dyn.]

    shape : bool
        Carry out shape analysis [dyn.]

    keep_itt : bool
        Keep itteration files [dyn.]

    fit : bool
        perform fitting [dyn.]

    aic : bool
        Use Akiakes information criterion for fitting [dyn.]

    weights : bool
        Use weights for fitting [dyn.]

    prfits : bool
        Print out details of fitting [dyn.]

    full : bool
        Print out full details of fits in table [dyn.]

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIBDISP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fibdisp", "fibdisp", cube, outable, ystart, yend, yblock, tstart, tend, tblock,  iteration,  device=device, **kwargs)


def fibsep(image, device, nfib, log, old, output, file, ystart, yend, xstart, xend, low, high, **kwargs):
    """


    Runs the command: $FIG_DIR/fibsep .

    Arguments
    ---------
    image : str
        Name of image to be displayed

    device : str
        DEVICE plotting device

    nfib : int
        Approximate number of fibres expected

    log : bool
        Display using logarithmic scaling

    old : bool
        Use previous results to extract data

    output : str
        Name of image to create

    file : str
        Name of file for positions of fibres

    ystart : int
        First Y value to be displayed

    yend : int
        Last Y value to be displayed

    xstart : int
        First X value to be displayed

    xend : int
        Last X value to be displayed

    low : int
        Minimum count level for display

    high : int
        Maximum count level for display


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIBSEP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fibsep", "fibsep", image,  nfib, log, old, output, file, ystart, yend, xstart, xend, low, high,  device=device, **kwargs)


def figinfo(input, **kwargs):
    """


    Runs the command: $FIG_DIR/figinfo .

    Arguments
    ---------
    input : str,filename
        (INput) Name of file to examine


    Keyword Arguments
    -----------------
    check_flags : bool
        (CHeck_flags) Check for flagged values by reading data?

    clear_flag : bool
        (CLEAR_FLAG) Clear "may contain flagged data flag" anyway? [dyn.]

    set_flag : bool
        (SET_FLAG) Set "may contain flagged data flag"? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGINFO
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figinfo", "figinfo", input, **kwargs)


def figs321(cube, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/figs321 .

    Arguments
    ---------
    cube : str,filename
        (CUbe) The FIGS data cube to be reduced to a spectrum

    spectrum : str,filename
        (SPectrum) Name of resulting spectrum


    Keyword Arguments
    -----------------
    cutoff : float
        (CUToff) value to exclude data point

    add : bool
        (ADd) Add all data rather than subtracting background? [dyn.]

    back : bool
        (BAck) Return background spectrum only? [dyn.]

    norm : bool
        (NOrm) Normalize Each Cycle? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGS321
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figs321", "figs321", cube, spectrum, **kwargs)


def figs322(cube, image, **kwargs):
    """


    Runs the command: $FIG_DIR/figs322 .

    Arguments
    ---------
    cube : str,filename
        (CUbe) The FIGS data cube to be reduced to an image

    image : str,filename
        (IMage) Name of resulting image


    Keyword Arguments
    -----------------
    add : bool
        (ADd) Add all data rather than subtracting background? [dyn.]

    back : bool
        (BAck) Return background spectrum only? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGS322
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figs322", "figs322", cube, image, **kwargs)


def figs422(hcube, xstart, xend, cystart, cyend, image, **kwargs):
    """


    Runs the command: $FIG_DIR/figs422 .

    Arguments
    ---------
    hcube : str,filename
        (HCube) Name of FIGS image mode raw hypercube

    xstart : float
        (XStart) First wavelength value to be included

    xend : float
        (XEnd) Last wavelength value to be included

    cystart : float
        (CYStart) First cycle number to be included

    cyend : float
        (CYEnd) Last cycle number to be included

    image : str
        (IMage) Name of resulting image


    Keyword Arguments
    -----------------
    split : bool
        (SPLit) Split separate cycles into separate images?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGS422
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figs422", "figs422", hcube, xstart, xend, cystart, cyend, image, **kwargs)


def figs423(hcube, cystart, cyend, cube, **kwargs):
    """


    Runs the command: $FIG_DIR/figs423 .

    Arguments
    ---------
    hcube : str,filename
        (HCube) Name of FIGS image mode raw hypercube

    cystart : float
        (CYStart) First cycle number to be included

    cyend : float
        (CYEnd) Last cycle number to be included

    cube : str,filename
        (CUbe) Name of resulting cube


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGS423
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figs423", "figs423", hcube, cystart, cyend, cube, **kwargs)


def figs424(hcube, output, **kwargs):
    """


    Runs the command: $FIG_DIR/figs424 .

    Arguments
    ---------
    hcube : str,filename
        (HCube) Name of FIGS image mode raw hypercube

    output : str,filename
        (OUTput) Name of processed FIGS image mode hypercube


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGS424
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figs424", "figs424", hcube, output, **kwargs)


def figsee(spectrum, ndet, detectors, output, **kwargs):
    """


    Runs the command: $FIG_DIR/figsee .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to use for seeing data

    ndet : float
        (NDet) Number of detectors to use

    detectors : float
        (DEtectors) Detectors to use

    output : str,filename
        (OUTput) Name of resulting seeing ripple data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGSEE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figsee", "figsee", spectrum, ndet, detectors, output, **kwargs)


def figsflux(spectrum, standard, kmag, output, **kwargs):
    """


    Runs the command: $FIG_DIR/figsflux .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of Star spectrum

    standard : str,filename
        (STandard) Name of Standard spectrum

    kmag : float
        (Kmag) K magnitude of standard star

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FIGSFLUX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/figsflux", "figsflux", spectrum, standard, kmag, output, **kwargs)


def fillcube(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/fillcube .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output NDF


    Keyword Arguments
    -----------------
    info : bool
        Issue informational messages [YES]

    tol : , 0.- .5
        Pixel coordinate mismatch tolerance [0.2]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FILLCUBE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fillcube", "fillcube", in_, out, **kwargs)


def findsp(image, ysep, pfile, black, white, numfib, norder, npts, fwcent, cfw, yfirst, **kwargs):
    """


    Runs the command: $FIG_DIR/findsp .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to generate polynomial list from

    ysep : float
        (YSep) Average separation between fibre spectra

    pfile : str
        (PFile) Name of file to write polynomial fits to

    black : float
        (BLack) Black level for display?

    white : float
        (WHite) White level for display?

    numfib : float
        (NUMFib) Number of fibres (spectra) in the frame

    norder : float
        (NORDer) Order of polynomials to fit along spectra

    npts : float
        (NPts) Number of points along spectra required

    fwcent : float
        (FWcent) Full-width centroiding range in Y direction

    cfw : float
        (CFW) Centroid following weight

    yfirst : float
        (YFirst) Central Y height of first spectrum


    Keyword Arguments
    -----------------
    adjust : bool
        Adjust start centroids

    chgpar : bool
        Repeat with new parameters

    chgrej : bool
        Repeat selection of rejections

    reject : float
        Reject which fibre number - zero for no more

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FINDSP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/findsp", "findsp", image, ysep, pfile, black, white, numfib, norder, npts, fwcent, cfw, yfirst, **kwargs)


def fitbb(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/fitbb .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    af : List[int]
        Fit flags for emissivity exponents [1,2,3,4,5,6]

    alpha : List[float]
        Emissivity exponents [0.,0.,0.,0.,0.,0.]

    comp : int
        Component numbers for storage [1,2,3,4,5,6]

    device : 
        Graphics device [!]

    dialog : str
        Allow extensive interaction ['T']

    fitgood : bool
        Fit acceptable [YES]

    info : bool
        Issue informational messages [YES]

    lgtemp : List[float]
        Common logarithm of colour temperatures [K] [0.,0.,0.,0.,0.,0.]

    logfil : str,filename
        ASCII file name for result output [!]

    mask1 : List[float]
        Mask interval lower bound(s)

    mask2 : List[float]
        Mask interval upper bound(s)

    ncomp : , 1- 6
        Number of components [1]

    reguess : bool
        Improve component guesses [NO]

    remask : bool
        Improve mask intervals [NO]

    repair : bool
        Update spectroscopic axis number [NO]

    sf : List[int]
        Fit flags for scaling constants [0,0,0,0,0,0]

    tf : List[int]
        Fit flags for colour temperatures [0,0,0,0,0,0]

    theta : List[float]
        Scaling constants [0.,0.,0.,0.,0.,0.]

    varuse : bool
        Use input variances if available [YES]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITBB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fitbb", "fitbb", in_, **kwargs)


def fitcont(image, xsect, **kwargs):
    """


    Runs the command: $FIG_DIR/fitcont .

    Arguments
    ---------
    image : str
        Name of image for input

    xsect : int
        value to extract from for first fit


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITCONT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fitcont", "fitcont", image, xsect, **kwargs)


def fitgauss(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/fitgauss .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    centre : List[float]
        Gauss positions [0,0,0,0,0,0]

    cf : List[int]
        Fit flags for line centres [0,0,0,0,0,0]

    comp : int
        Component numbers for storage [1,2,3,4,5,6]

    cont : float
        Continuum level [0]

    device : 
        Graphics device [!]

    dialog : str
        Allow extensive interaction ['T']

    fitgood : bool
        Fit acceptable [YES]

    fwhm : List[float]
        Gauss widths (FWHM) [1,1,1,1,1,1]

    info : bool
        Issue informational messages [YES]

    logfil : str,filename
        ASCII file name for result output [!]

    mask1 : List[float]
        Mask interval lower bound(s)

    mask2 : List[float]
        Mask interval upper bound(s)

    ncomp : , 1- 6
        Number of components [1]

    peak : List[float]
        Gauss heights [1,1,1,1,1,1]

    pf : List[int]
        Fit flags for line peaks [0,0,0,0,0,0]

    reguess : bool
        Improve component guesses [NO]

    remask : bool
        Improve mask intervals [NO]

    repair : bool
        Update spectroscopic axis number [NO]

    varuse : bool
        Use input variances if available [YES]

    wf : List[int]
        Fit flags for line widths [0,0,0,0,0,0]


    Returns
    -------
    fcentre : List[float]

    ffwhm : List[float]

    fpeak : List[float]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITGAUSS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fitgauss", "fitgauss", in_, **kwargs)


def fitpoly(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/fitpoly .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    comp : , 0- 2000000
        Component number for storage [1]

    device : 
        Graphics device [!]

    dialog : str
        Allow extensive interaction ['T']

    fitgood : bool
        Fit acceptable [YES]

    info : bool
        Issue informational messages [YES]

    logfil : str,filename
        ASCII file name for result output [!]

    mask1 : List[float]
        Mask interval lower bound(s)

    mask2 : List[float]
        Mask interval upper bound(s)

    order : , 0- 7
        Polynomial order [1]

    reguess : bool
        Improve polynomial order [NO]

    remask : bool
        Improve mask intervals [NO]

    repair : bool
        Update spectroscopic axis number [NO]

    varuse : bool
        Use input variances if available [YES]


    Returns
    -------
    fitcoeffs : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITPOLY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fitpoly", "fitpoly", in_, **kwargs)


def fitset(file, keyword, value, comment, **kwargs):
    """


    Runs the command: $FIG_DIR/fitset .

    Arguments
    ---------
    file : str,filename
        (FIle) Name of file in which FITS keyword is to be set

    keyword : str
        (KEYword) FITS keyword to set or modify

    value : str
        (VALue) New value of FITS keyword

    comment : str
        (COMment) Comment associated with FITS keyword


    Keyword Arguments
    -----------------
    logical : bool
        (LOGical) Treat keyword as a logical value? [dyn.]

    string : bool
        (STRing) Treat keyword value as a literal string? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fitset", "fitset", file, keyword, value, comment, **kwargs)


def fitskeys(input, **kwargs):
    """


    Runs the command: $FIG_DIR/fitskeys .

    Arguments
    ---------
    input : str,filename
        (INput) Structure whose FITS items are to be listed


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITSKEYS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fitskeys", "fitskeys", input, **kwargs)


def fittri(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/fittri .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    centre : List[float]
        Triangle positions [0,0,0,0,0,0]

    cf : List[int]
        Fit flags for line centres [0,0,0,0,0,0]

    comp : int
        Component numbers for storage [1,2,3,4,5,6]

    cont : float
        Continuum level [0]

    device : 
        Graphics device [!]

    dialog : str
        Allow extensive interaction ['T']

    fitgood : bool
        Fit acceptable [YES]

    fwhm : List[float]
        Triangle widths (FWHM) [1,1,1,1,1,1]

    info : bool
        Issue informational messages [YES]

    logfil : str,filename
        ASCII file name for result output [!]

    mask1 : List[float]
        Mask interval lower bound(s)

    mask2 : List[float]
        Mask interval upper bound(s)

    ncomp : , 1- 6
        Number of components [1]

    peak : List[float]
        Triangle heights [1,1,1,1,1,1]

    pf : List[int]
        Fit flags for line peaks [0,0,0,0,0,0]

    reguess : bool
        Improve component guesses [NO]

    remask : bool
        Improve mask intervals [NO]

    repair : bool
        Update spectroscopic axis number [NO]

    varuse : bool
        Use input variances if available [YES]

    wf : List[int]
        Fit flags for line widths [0,0,0,0,0,0]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FITTRI
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fittri", "fittri", in_, **kwargs)


def flag2qual(input, output, value, **kwargs):
    """


    Runs the command: $FIG_DIR/flag2qual .

    Arguments
    ---------
    input : str,filename
        (INput) Name of file to have flagged values removed

    output : str,filename
        (OUTput) Name of resulting file

    value : float
        (VAlue) Fixed value to use to replace flagged values


    Keyword Arguments
    -----------------
    fixed : bool
        (FIxed) Replace flagged values with one fixed value?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FLAG2QUAL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/flag2qual", "flag2qual", input, output, value, **kwargs)


def flaircomp(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/flaircomp .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output NDF


    Keyword Arguments
    -----------------
    title : str
        Output title [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FLAIRCOMP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/flaircomp", "flaircomp", in_, out, **kwargs)


def flairext(in_, profile, out, **kwargs):
    """


    Runs the command: $FIG_DIR/flairext .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    profile : str,filename
        NDF containing profile (weights)

    out : str,filename
        Output NDF


    Keyword Arguments
    -----------------
    fibres : int
        Number of fibres to extract [92]

    title : str
        Output title [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FLAIREXT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/flairext", "flairext", in_, profile, out, **kwargs)


def flconv(spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/flconv .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to convert to Ergs/sec/cm**2/A

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FLCONV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/flconv", "flconv", spectrum, output, **kwargs)


def foto(image, ra1, ra2, nradii, radii, bad, photons, readns, mzero, **kwargs):
    """


    Runs the command: $FIG_DIR/foto .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be used

    ra1 : float
        (RA1) Inner radius of sky aperture

    ra2 : float
        (RA2) Outer radius of sky aperture

    nradii : float
        (NRadii) Number of apertures to use

    radii : float
        (RADii) Aperture radii

    bad : float
        (BAD) Bad pixel rejection threshold

    photons : float
        (PHotons) Number of photons per ADU

    readns : float
        (REadns) Readout noise

    mzero : float
        (MZero) Magnitude offset


    Keyword Arguments
    -----------------
    confirm : bool
        Sky value and Sigma OK

    dishist : bool
        Display sky histogram

    sigma : float
        Sigma

    skyval : float
        Sky value

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FOTO
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/foto", "foto", image, ra1, ra2, nradii, radii, bad, photons, readns, mzero, **kwargs)


def fscrunch(spectrum, wstart, wend, bins, inorder, output, **kwargs):
    """


    Runs the command: $FIG_DIR/fscrunch .

    Arguments
    ---------
    spectrum : str
        (SPectrum) Spectrum to be scrunched

    wstart : float
        (WStart) Wavelength of center of first bin

    wend : float
        (WEnd) Wavelength of center of last bin (or increment)

    bins : float
        (BIns) Number of bins for scrunched spectrum

    inorder : float
        (INOrder) Order of fit for local interpolation

    output : str
        (OUtput) Name of scrunched spectrum


    Keyword Arguments
    -----------------
    density : bool
        (DENsity) Treat data as flux per unit wavelength?

    final : bool
        (FInal) Treat WEND as a final wavelength value? [dyn.]

    increment : bool
        (INCrement) Treat WEND value as an increment value? [dyn.]

    log : bool
        (LOg) Bin into logarithmic wavelength bins?


    Returns
    -------
    scrunch_end : float

    scrunch_inc : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FSCRUNCH
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fscrunch", "fscrunch", spectrum, wstart, wend, bins, inorder, output, **kwargs)


def fwconv(spectrum, flux_unit, output, **kwargs):
    """


    Runs the command: $FIG_DIR/fwconv .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum for flux unit conversion

    flux_unit : str
        (FLux_unit) Flux units for output spectrum

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_FWCONV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/fwconv", "fwconv", spectrum, flux_unit, output, **kwargs)


def gauss(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/gauss .

    Keyword Arguments
    -----------------
    tol : float

    spectrum : str,filename
        (SPectrum) Spectrum to be analysed

    filnam : str
        (FILENAME) Name of data file for results

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    high : float
        (HIgh) Maximum data value to be plotted

    low : float
        (LOw) Minimum data value to be plotted

    bias : float
        (BIas) Bias value to be added to data

    label : str
        (LABel) Label for plot and results file

    ord : float
        (ORD) Order of polynomial fit to continuum

    sig : float
        (SIG) Factor * sigma for continuum point rejection

    err : float
        (ERR) Factor * error for continuum point rejection

    itn : float
        (ITN) Number of iterations for continuum point rejection

    index : float
        (IND) Index number of Gaussian to alter

    dele : float
        (DELE) Index number of Gaussian to delete

    pn_hn_wn_s : str
        (P/H/W/S) Alter Position, Height, Width or Stop

    npcon : str
        (NPCON) n followed by P,H or W (-1 to end)

    nchain : float
        (NCHAIN) Number of Gaussians to chain (-1 to end)

    chain : str
        (CHAIN) Gaussian parameter to be chained P/H/W

    ichain : float
        (ICHAIN) Index number of Gaussian to chain

    rchain : float
        (RCHAIN) Line peak seperation, height or width ratio

    wght : str
        (WeiGHTing) for residuals - None, by Value or by Error

    recname : str
        (RECNAME) Name of data file to be recalled

    gaufit : str,filename
        (GAUFIT) Fitted spectrum to be saved

    autoscale : bool
        (AUtoscale) Scale so all of spectrum fits?

    ccmd : str
        Cur,Ord,Sig,Err,Itn,Fit,Gau,Help

    constr : bool
        (CONSTR) Want to constrain any Gaussian parameters ?

    file : bool
        (FILE) Are fit results to be recorded on file?

    gcmd : str
        Lim,Sin,New,Nex,Inch,Lis,Sel,Del,Opt,Recal,Hard,Save,Cont,Quit,Help

    hard : str
         [ ]

    man : bool
        (MANual) Want to accept manual fit to profile

    multcon : bool
        (MULTiple CONstraints) Any Gaussians to be chained ?

    sincon : bool
        (SINCON) Any single constraints on Guassian parameters

    soft : str
         [ ]

    whole : bool
        (WHole) Use whole of spectrum for line analysis?


    Returns
    -------
    tvfile : str

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GAUSS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/gauss", "gauss", *args, **kwargs)


def goodvar(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/goodvar .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output NDF


    Keyword Arguments
    -----------------
    bad : float
        Value to replace bad variances [!]

    neg : float
        Value to replace negative variances [!]

    zero : float
        Value to replace zero variances [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GOODVAR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/goodvar", "goodvar", in_, out, **kwargs)


def grow(in_, expand, stapix, endpix, **kwargs):
    """


    Runs the command: $FIG_DIR/grow .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    expand : List[int]
        For each axis: expanded or old    (0 for old axis)

    stapix : List[int]
        For each axis: target start pixel (0 for old axis)

    endpix : List[int]
        For each axis: target end pixel   (0 for old axis)


    Keyword Arguments
    -----------------
    info : bool
        Issue informational messages [YES]

    new : bool
        Create a new output file [NO]

    out : str,filename
        Output NDF

    size : List[int]
        For each axis: output axis length   (0 for old axis)


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GROW
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/grow", "grow", in_, expand, stapix, endpix, **kwargs)


def growx(spectrum, image, ystart, yend, ysize, **kwargs):
    """


    Runs the command: $FIG_DIR/growx .

    Arguments
    ---------
    spectrum : str
        (SPectrum) Spectrum to be "grown" into image

    image : str
        (IMage) Image to grow spectrum into

    ystart : float
        (YStart) First cross-section to copy spectrum into

    yend : float
        (YEnd) Last cross-section to copy spectrum into

    ysize : float
        (YSIze) Y-dimension of new image


    Keyword Arguments
    -----------------
    new : bool
        (NEw) Force creation of a new image?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GROWX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/growx", "growx", spectrum, image, ystart, yend, ysize, **kwargs)


def growxt(image, cube, ystart, yend, ysize, **kwargs):
    """


    Runs the command: $FIG_DIR/growxt .

    Arguments
    ---------
    image : str
        (IMage) Image to grow into planes of cube

    cube : str
        (Cube) Cube into which image is to be grown

    ystart : float
        (YStart) First plane to copy image into

    yend : float
        (YEnd) Last plane to copy image into

    ysize : float
        (YSIze) Y-dimension of new image


    Keyword Arguments
    -----------------
    new : bool
        (NEw) Force creation of a new cube?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GROWXT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/growxt", "growxt", image, cube, ystart, yend, ysize, **kwargs)


def growxy(image, cube, tstart, tend, tsize, **kwargs):
    """


    Runs the command: $FIG_DIR/growxy .

    Arguments
    ---------
    image : str
        (IMage) Image to grow into planes of cube

    cube : str
        (Cube) Cube into which image is to be grown

    tstart : float
        (TStart) First plane to copy image into

    tend : float
        (TEnd) Last plane to copy image into

    tsize : float
        (TSIze) T-dimension of new image


    Keyword Arguments
    -----------------
    new : bool
        (NEw) Force creation of a new cube?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GROWXY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/growxy", "growxy", image, cube, tstart, tend, tsize, **kwargs)


def growy(spectrum, image, xstart, xend, xsize, **kwargs):
    """


    Runs the command: $FIG_DIR/growy .

    Arguments
    ---------
    spectrum : str
        (SPectrum) Spectrum to be "grown" into image

    image : str
        (IMage) Image to grow spectrum into

    xstart : float
        (XStart) First cross-section to copy spectrum into

    xend : float
        (XEnd) Last cross-section to copy spectrum into

    xsize : float
        (XSIze) X-dimension of new image


    Keyword Arguments
    -----------------
    new : bool
        (NEw) Force creation of a new image?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GROWY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/growy", "growy", spectrum, image, xstart, xend, xsize, **kwargs)


def growyt(image, cube, xstart, xend, xsize, **kwargs):
    """


    Runs the command: $FIG_DIR/growyt .

    Arguments
    ---------
    image : str
        (IMage) Image to grow into planes of cube

    cube : str
        (Cube) Cube into which image is to be grown

    xstart : float
        (XStart) First plane to copy image into

    xend : float
        (XEnd) Last plane to copy image into

    xsize : float
        (XSIze) X-dimension of new image


    Keyword Arguments
    -----------------
    new : bool
        (NEw) Force creation of a new cube?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GROWYT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/growyt", "growyt", image, cube, xstart, xend, xsize, **kwargs)


def gspike(spectrum, table, spiketrum, **kwargs):
    """


    Runs the command: $FIG_DIR/gspike .

    Arguments
    ---------
    spectrum : str,filename
        (SPEctrum) Template spectrum for wavelength range

    table : str
        (Table) Table giving wavelength and data values

    spiketrum : str,filename
        (SPIketrum) Name of "spiketrum" to be generated


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_GSPIKE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/gspike", "gspike", spectrum, table, spiketrum, **kwargs)


def hard(harddev, **kwargs):
    """


    Runs the command: $FIG_DIR/hard .

    Arguments
    ---------
    harddev : str
        (HArddev) Device to use for hardcopy plots


    Keyword Arguments
    -----------------
    draw : bool
        (DRaw) Output a test plot to the device? [dyn.]

    force : bool
        (FOrce) Force use of an unrecognised device ? [dyn.]

    options : bool
        (OPtions) List possible device names? [dyn.]


    Returns
    -------
    hard : str


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_HARD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/hard", "hard", harddev, **kwargs)


def hcross(spectrum, template, basered, baserr, xstart, xend, **kwargs):
    """


    Runs the command: $FIG_DIR/hcross .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of spectrum

    template : str,filename
        (TEmplate) Name of template spectrum

    basered : float
        (BASEred) Redshift of template spectrum

    baserr : float
        (BASERR) Redshift error of template spectrum

    xstart : float
        (XStart) First X value to be used

    xend : float
        (XEnd) Last X value to be used


    Keyword Arguments
    -----------------
    cbpc : float
        (CBpc) Percentage of spectrum covered by cosine bell

    cross : str,filename
        (CRoss) Name of cross-correlation data?

    basevel : float
        (BASEVel) Velocity (km/s) of template spectrum

    baseverr : float
        (BASEVERR) Velocity error (km/s) of template spectrum

    fitcont : bool
        (FICONT) Fit continuum? [dyn.]

    record : bool
        (RECord) Create file to record cross-correlation?

    velocities : bool
         [FALSE]


    Returns
    -------
    conf : float

    rederr : float

    redshift : float

    shift : float

    velerr : float

    velocity : float

    warn : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_HCROSS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/hcross", "hcross", spectrum, template, basered, baserr, xstart, xend, **kwargs)


def himage(image, shrink, log, key, ystart, yend, xstart, xend, low, high, plotdev, aspect, **kwargs):
    """


    Runs the command: $FIG_DIR/himage .

    Arguments
    ---------
    image : str
        Name of image to be displayed

    shrink : bool
        Shrink image to display with wide margins

    log : bool
        Display using logarithmic scaling

    key : bool
        Plot a key beside the data

    ystart : float
        First Y value to be displayed

    yend : float
        Last Y value to be displayed

    xstart : float
        First X value to be displayed

    xend : float
        Last X value to be displayed

    low : float
        Minimum count level for display

    high : float
        Maximum count level for display

    plotdev : str
        Plotting device

    aspect : float
        Ratio X/Y for plot (excluding any key)


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_HIMAGE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/himage", "himage", image, shrink, log, key, ystart, yend, xstart, xend, low, high, plotdev, aspect, **kwargs)


def hist(image, minval, maxval, bins, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/hist .

    Arguments
    ---------
    image : str
        (IMage) Name of data to be histogrammed

    minval : float
        (MInval) Minimum data value to be used

    maxval : float
        (MAXval) Maximum data value to be used

    bins : float
        (BIns) Number of histogram bins

    spectrum : str
        (SPectrum) Name of resulting histogram


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_HIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/hist", "hist", image, minval, maxval, bins, spectrum, **kwargs)


def hopt(image, minval, maxval, output, **kwargs):
    """


    Runs the command: $FIG_DIR/hopt .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be equalised

    minval : float
        (MINval) Minimum data value to be used

    maxval : float
        (MAXval) Maximum data value to be used

    output : str,filename
        (OUTput) Name of resulting image


    Keyword Arguments
    -----------------
    equalise : bool
        (EQualise) Generate equalised output data?

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_HOPT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/hopt", "hopt", image, minval, maxval, output, **kwargs)


def i2cmplx(idata, cdata, **kwargs):
    """


    Runs the command: $FIG_DIR/i2cmplx .

    Arguments
    ---------
    idata : str,filename
        (IData) Data to become imaginary part of complex data

    cdata : str,filename
        (CData) Resulting complex data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_I2CMPLX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/i2cmplx", "i2cmplx", idata, cdata, **kwargs)


def iadd(image, image1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/iadd .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of first image

    image1 : str,filename
        (IMAGE1) Name of second image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iadd", "iadd", image, image1, output, **kwargs)


def iarc(image, rstart, rwidth, file, **kwargs):
    """


    Runs the command: $FIG_DIR/iarc .

    Arguments
    ---------
    image : str,filename
        (IMage) Image containing 2D arc to be fitted

    rstart : float
        (RSTart) Central row at which to start fit

    rwidth : float
        (RWidth) Number of rows to sum for each fit

    file : str
        (FIle) Text file used for results


    Keyword Arguments
    -----------------
    rsigma : float
        (RSIgma) Sigma to use for fit

    gap : float
        (Gap) Max times old position used for missing line

    sigmin : float
        (SIGmin) Minimum sigma for locked lines

    chanshift : float
        Enter the constant shift to be added to all channel positions. [1005.0]

    detail : bool
        (DEtail) Output full details of each fit? [dyn.]

    lock : bool
        (LOck) Automatic search for lines to help lock fit?

    spread : bool
        (SPRead) Perform initial search with increased sigma? [dyn.]

    weight : bool
        (WEight) Weight the fit with the line strengths? [dyn.]

    xcorr : bool
        (XCorr) Analyse successive spectra for shifts?


    Returns
    -------
    iarc_wmax : float

    iarc_wmin : float

    nofits : int

    order : int

    rmsmax : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IARC
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iarc", "iarc", image, rstart, rwidth, file, **kwargs)


def icadd(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/icadd .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be added to

    factor : float
        (FACtor) Additive constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icadd", "icadd", image, factor, output, **kwargs)


def icdiv(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/icdiv .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be divided

    factor : float
        (FACtor) Constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icdiv", "icdiv", image, factor, output, **kwargs)


def icmult(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/icmult .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be multiplied

    factor : float
        (FACtor) Multiplicative constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICMULT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icmult", "icmult", image, factor, output, **kwargs)


def icont(image, ystart, yend, xstart, xend, low, high, contours, label, **kwargs):
    """


    Runs the command: $FIG_DIR/icont .

    Arguments
    ---------
    image : str
        (IMage) Name of image to be contoured

    ystart : float
        (YStart) First Y value to be displayed

    yend : float
        (YEnd) Last Y value to be displayed

    xstart : float
        (XStart) First X value to be displayed

    xend : float
        (XEnd) Last X value to be displayed

    low : float
        (Low) Lowest contour level

    high : float
        (High) Highest contour level

    contours : float
        (COntours) Number of contour levels

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    thickness : float
        (THickness) Width of plotted lines

    levels : float
        (LEvels) Explicit contour levels to use

    adjust : bool
        (ADjust) Adjust scales so as to fill display?

    byvalue : bool
        (BYvalue) Specify contour level array explicitly? [dyn.]

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Generate a hardcopy plot?

    soft : str
         [ ]


    Returns
    -------
    imfile : str

    pgenvarg : float

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float

    tvyen : float

    tvyst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICONT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icont", "icont", image, ystart, yend, xstart, xend, low, high, contours, label, **kwargs)


def iconv3(image, center, edge, output, **kwargs):
    """


    Runs the command: $FIG_DIR/iconv3 .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to convolve with filter

    center : float
        (Center) Central value for 3x3 convolution kernel

    edge : float
        (Edge) Edge value for 3x3 convolution kernel

    output : str,filename
        (OUTput) The resulting filtered image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICONV3
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iconv3", "iconv3", image, center, edge, output, **kwargs)


def icor16(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/icor16 .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of input image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICOR16
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icor16", "icor16", image, output, **kwargs)


def icset(image, ystart, yend, xstart, xend, constant, output, **kwargs):
    """


    Runs the command: $FIG_DIR/icset .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be modified

    ystart : float
        (YStart) First Y-value to be set to constant

    yend : float
        (YEnd) Last Y-value to be set to constant

    xstart : float
        (XStart) First X-value to be set to constant

    xend : float
        (XEnd) Last X-value to be set to constant

    constant : float
        (CONstant) Value of constant to set region to

    output : str,filename
        (OUTput) Output file for modified data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icset", "icset", image, ystart, yend, xstart, xend, constant, output, **kwargs)


def icsub(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/icsub .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be subtracted from

    factor : float
        (FACtor) Constant to be subtracted from image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icsub", "icsub", image, factor, output, **kwargs)


def icur(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/icur .

    Keyword Arguments
    -----------------
    idev : str
         [0.]

    imarray : float
         [0.]

    imfile : str
         [ ]


    Returns
    -------
    npixels : float

    xpixels : float

    ypixels : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ICUR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/icur", "icur", *args, **kwargs)


def idev(imagdev, **kwargs):
    """


    Runs the command: $FIG_DIR/idev .

    Arguments
    ---------
    imagdev : str
        (IMAGDEV) Device to use for image display


    Keyword Arguments
    -----------------
    draw : bool
        (DRaw) Output a test plot to the device? [dyn.]

    force : bool
        (FOrce) Force use of an unrecognised device ? [dyn.]

    options : bool
        (OPtions) List possible device names? [dyn.]


    Returns
    -------
    idev : str


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IDEV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/idev", "idev", imagdev, **kwargs)


def idiff(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/idiff .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of input image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IDIFF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/idiff", "idiff", image, output, **kwargs)


def idiv(image, image1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/idiv .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of first image

    image1 : str,filename
        (IMAGE1) Name of second image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/idiv", "idiv", image, image1, output, **kwargs)


def igconv(image, convol, output, **kwargs):
    """


    Runs the command: $FIG_DIR/igconv .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of file to be convolved with an array

    convol : str
        (COnvol) Text file that defines the convolution array

    output : str,filename
        (OUTput) Name of resulting image file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IGCONV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/igconv", "igconv", image, convol, output, **kwargs)


def igcur(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/igcur .

    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IGCUR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/igcur", "igcur", *args, **kwargs)


def igrey(image, ystart, yend, xstart, xend, low, high, label, **kwargs):
    """


    Runs the command: $FIG_DIR/igrey .

    Arguments
    ---------
    image : str
        (IMage) Name of image to be grey-scaled

    ystart : float
        (YStart) First Y value to be displayed

    yend : float
        (YEnd) Last Y value to be displayed

    xstart : float
        (XStart) First X value to be displayed

    xend : float
        (XEnd) Last X value to be displayed

    low : float
        (Low) Lowest data level used (black level)

    high : float
        (High) Highest data level used (white level)

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    adjust : bool
        (ADjust) Adjust scales so as to fill display?

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Generate a hardcopy plot?

    soft : str
         [ ]


    Returns
    -------
    imfile : str

    pgenvarg : float

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float

    tvyen : float

    tvyst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IGREY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/igrey", "igrey", image, ystart, yend, xstart, xend, low, high, label, **kwargs)


def ilist(image, ystart, yend, xstart, xend, **kwargs):
    """


    Runs the command: $FIG_DIR/ilist .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be listed

    ystart : float
        (YStart) First Y value for list

    yend : float
        (YEnd) Last Y value for list

    xstart : float
        (XStart) First X value for list

    xend : float
        (XEnd) Last X value for list


    Keyword Arguments
    -----------------
    hardcopy : bool
        (HArdcopy) Produce a file containing list?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ILIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ilist", "ilist", image, ystart, yend, xstart, xend, **kwargs)


def ilog(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ilog .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to take log of

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ILOG
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ilog", "ilog", image, output, **kwargs)


def image(image, yplaces, atx, aty, xorigin, yorigin, xpixels, ypixels, ystart, yend, xstart, xend, low, high, optimize, xplaces, **kwargs):
    """


    Runs the command: $FIG_DIR/image .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be grey-scaled

    yplaces : float
        (YPlaces) Number of sub-displays across screen in Y [1]

    atx : float
        (ATX) Sub-display position in X to use [1]

    aty : float
        (ATY) Sub-display position in Y to use [1]

    xorigin : float
        (XOrigin) Origin of display in X in display pixels [0]

    yorigin : float
        (YOrigin) Origin of display in Y in display pixels [0]

    xpixels : float
        (XPIxels) Number of display pixels to use in X

    ypixels : float
        (YPIxels) Number of display pixels to use in X

    ystart : float
        (YStart) First Y value to be displayed

    yend : float
        (YEnd) Last Y value to be displayed

    xstart : float
        (XStart) First X value to be displayed

    xend : float
        (XEnd) Last X value to be displayed

    low : float
        (Low) Lowest data level used (black level) [0.]

    high : float
        (High) Highest data level used (white level) [1000.]

    optimize : float
        (OPTimize) Amount of histogram optimisation (0 to 1) [0.5]

    xplaces : float
        (XPlaces) Number of sub-displays across screen in X [1]


    Keyword Arguments
    -----------------
    aspect : bool
        (ASpect) Maintain correct aspect ratio for image? [T]

    autoscale : bool
        (AUtoscale) Calculate display limits automatically [T]

    erase : bool
        (ERASE) Erase screen before display [F]

    hard : str
         [0.]

    hardcopy : bool
        (HARDCOPY) Use "hard" devices rather than imaging device [dyn.]

    idev : str
         [0.]

    log : bool
        (LOG) Display using logarithmic scaling [dyn.]

    negative : bool
        (NEgative) Set limits to give a negative image [dyn.]


    Returns
    -------
    imarray : float

    imfile : str


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IMAGE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/image", "image", image, yplaces, atx, aty, xorigin, yorigin, xpixels, ypixels, ystart, yend, xstart, xend, low, high, optimize, xplaces, **kwargs)


def impos(inpfle, **kwargs):
    """


    Runs the command: $FIG_DIR/impos .

    Arguments
    ---------
    inpfle : str
        Input file:


    Returns
    -------
    npixels : float

    xpixels : float

    ypixels : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IMPOS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/impos", "impos", inpfle, **kwargs)


def imult(image, image1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/imult .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of first image

    image1 : str,filename
        (IMAGE1) Name of second image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IMULT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/imult", "imult", image, image1, output, **kwargs)


def interp(spiketrum, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/interp .

    Arguments
    ---------
    spiketrum : str,filename
        (SPIketrum) Name of "spiketrum" to be interpolated

    spectrum : str,filename
        (SPEctrum) Name of spectrum to be generated


    Keyword Arguments
    -----------------
    linend : bool
        (LInend) Use linear interpolation at ends? [dyn.]

    log : bool
        (Log) Fit to the log of the data? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_INTERP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/interp", "interp", spiketrum, spectrum, **kwargs)


def iplots(image, xstart, xend, ystart, yend, nspect, label, **kwargs):
    """


    Runs the command: $FIG_DIR/iplots .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    xstart : float
        (Xstart) Start of spectrum to be plotted

    xend : float
        (Xend) End of spectrum

    ystart : float
        (Ystart) First spectrum to be plotted

    yend : float
        (Yend) Last spectrum to be plotted

    nspect : float
        (NSpect) Number of spectra per page

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    colour : str
        (COLour) Plot colour (Bl,Wh,R,G,B,Cy,Ma,Y)

    autoscale : bool
        (AUtoscale) Scale each spectrum individually?

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Produce plot as a hard copy?

    next : bool
        Want next page

    soft : str
         [ ]

    whole : bool
        (WHole) Plot all of cross-sections?


    Returns
    -------
    tvcolor : float

    tvfile : str

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IPLOTS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iplots", "iplots", image, xstart, xend, ystart, yend, nspect, label, **kwargs)


def ipower(image, power, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ipower .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to raise to specified power

    power : float
        (POwer) Power to which image is to be raised

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IPOWER
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ipower", "ipower", image, power, output, **kwargs)


def irconv(spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/irconv .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to convert to W/m**2/um

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IRCONV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/irconv", "irconv", spectrum, output, **kwargs)


def irevx(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/irevx .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be reversed

    output : str,filename
        (OUtput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IREVX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/irevx", "irevx", image, output, **kwargs)


def irevy(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/irevy .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be reversed

    output : str,filename
        (OUtput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IREVY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/irevy", "irevy", image, output, **kwargs)


def irflat(spectrum, xstart, xend, period, more, **kwargs):
    """


    Runs the command: $FIG_DIR/irflat .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum containing  data

    xstart : float
        (XStart) Start X value of region

    xend : float
        (XEnd) End X value of region

    period : float
        (PERiod) Period of Ripple (pixels)

    more : bool
        (MORE) Include additional ranges?


    Keyword Arguments
    -----------------
    cgs2 : bool
        CGS2 mode? [FALSE]

    output : str,filename
        (OUTput) Name of resulting ripple spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IRFLAT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/irflat", "irflat", spectrum, xstart, xend, period, more, **kwargs)


def irflux(spectrum, standard, temp, caltype, mag, flux, wave, output, **kwargs):
    """


    Runs the command: $FIG_DIR/irflux .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of Source spectrum

    standard : str,filename
        (STandard) Name of Standard spectrum

    temp : float
        (TEMP) Temperature of standard

    caltype : str
        (CALtype) Type of calibration data

    mag : float
        (MAG) magnitude of standard star

    flux : float
        (FLux) Flux of standard star at calib wavelength (mJy)

    wave : float
        (WAve) Calibration wavelength (microns)

    output : str,filename
        (OUTput) Name of resulting spectrum


    Keyword Arguments
    -----------------
    kmag : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IRFLUX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/irflux", "irflux", spectrum, standard, temp, caltype, mag, flux, wave, output, **kwargs)


def irot90(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/irot90 .

    Arguments
    ---------
    image : str
        (IMage) Name of image to be rotated

    output : str
        (OUTput) Name of resulting image


    Keyword Arguments
    -----------------
    anti : bool
        (ANTI) Anti-clockwise rotation? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IROT90
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/irot90", "irot90", image, output, **kwargs)


def iscan(image, xstart, xend, ystart, yend, yblock, scan, hardcopy, **kwargs):
    """


    Runs the command: $FIG_DIR/iscan .

    Arguments
    ---------
    image : str
        Name of image for input

    xstart : float
        display lower limit

    xend : float
        display upper limit

    ystart : int
        display lower limit

    yend : int
        display upper limit

    yblock : int
        Enter display x-sect width

    scan : bool
        Scan through data

    hardcopy : bool
        use hard graphics device for display


    Keyword Arguments
    -----------------
    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISCAN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iscan", "iscan", image, xstart, xend, ystart, yend, yblock, scan, hardcopy, **kwargs)


def iscrunch(image, file, wstart, wend, bins, output, **kwargs):
    """


    Runs the command: $FIG_DIR/iscrunch .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be scrunched

    file : str
        (FIle) File containing results of 2D arc fit

    wstart : float
        (WStart) Wavelength of center of first bin

    wend : float
        (WEnd) Wavelength of center of last bin (or increment)

    bins : float
        (BIns) Number of bins for scrunched image

    output : str,filename
        (OUtput) Name of resulting scrunched image


    Keyword Arguments
    -----------------
    density : bool
        (DENsity) Treat data as flux per unit wavelength?

    final : bool
        (FInal) Treat WEND as a final wavelength value? [dyn.]

    increment : bool
        (INCrement) Treat WEND value as an increment value? [dyn.]

    linear : bool
        (LInear) Use linear interpolation for data?

    log : bool
        (LOg) Bin into logarithmic wavelength bins?

    quad : bool
        (Quad) Use quadratic interpolation for data?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISCRUNCH
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iscrunch", "iscrunch", image, file, wstart, wend, bins, output, **kwargs)


def iscruni(image, file, file2, fraction, wstart, wend, bins, output, **kwargs):
    """


    Runs the command: $FIG_DIR/iscruni .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be scrunched

    file : str
        (FIle) File containing results of 1st 2D arc fit

    file2 : str
        (FILE2) File containing results of 2nd 2D arc fit

    fraction : float
        (FRaction) Used = FILE+(FILE2-FILE)*FRACTION

    wstart : float
        (WStart) Wavelength of center of first bin

    wend : float
        (WEnd) Wavelength of center of last bin (or increment)

    bins : float
        (BIns) Number of bins for scrunched image

    output : str,filename
        (OUtput) Name of resulting scrunched image


    Keyword Arguments
    -----------------
    density : bool
        (DENsity) Treat data as flux per unit wavelength?

    final : bool
        (FInal) Treat WEND as a final wavelength value? [dyn.]

    increment : bool
        (INCrement) Treat WEND value as an increment value? [dyn.]

    linear : bool
        (LInear) Use linear interpolation for data?

    log : bool
        (LOg) Bin into logarithmic wavelength bins?

    quad : bool
        (Quad) Use quadratic interpolation for data?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISCRUNI
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/iscruni", "iscruni", image, file, file2, fraction, wstart, wend, bins, output, **kwargs)


def isedit(image, xstart, xend, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isedit .

    Arguments
    ---------
    image : str,filename
        (IMage) The 1D or 2D data

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    output : str,filename
        (OUTput) Name of resulting edited data


    Keyword Arguments
    -----------------
    soft : str
         [ ]

    whole : bool
        (WHole) Plot all of spectrum?

    yvalue : float
        Y value to plot


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISEDIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isedit", "isedit", image, xstart, xend, output, **kwargs)


def ishift(image, xshift, yshift, xsplit, ysplit, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ishift .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be shifted

    xshift : float
        (XSHift) Shift in X

    yshift : float
        (YSHift) Shift in Y

    xsplit : float
        (XSPlit) Subdivision of X pixels

    ysplit : float
        (YSPlit) Subdivision of Y pixels

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISHIFT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ishift", "ishift", image, xshift, yshift, xsplit, ysplit, output, **kwargs)


def ismooth(image, fraction, repeat, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ismooth .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be smoothed

    fraction : float
        (FRaction) Fraction of pixel data for redistribution

    repeat : float
        (REpeat) Number of times to repeat basic smoothing

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISMOOTH
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ismooth", "ismooth", image, fraction, repeat, output, **kwargs)


def isplot(image, ystart, yend, xstart, xend, high, low, **kwargs):
    """


    Runs the command: $FIG_DIR/isplot .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be plotted

    ystart : float
        (YStart) First Y value to be plotted

    yend : float
        (YEnd) Last Y value to be plotted

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    high : float
        (HIgh) Maximum data value to be plotted

    low : float
        (LOw) Minimum data value to be plotted


    Keyword Arguments
    -----------------
    offset : float
        (OFfset) Offset applied to bias up x-sects

    slant : float
        (SLant) Offset in X to apply to successive x-sects

    label : str
        (LABel) Label for plot

    colour : str
        (COLour) Plot colour (Bl,Wh,R,G,B,Cy,Ma,Y)

    autoscale : bool
        (AUtoscale) Scale so all of data fits?

    axes : bool
        (AXes) Plot and label axes? [dyn.]

    erase : bool
        (ERase) Erase screen before plotting? [dyn.]

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Produce plot as a hard copy?

    reverse : bool
        (REVerse) Plot cross-sections is reverse order?

    soft : str
         [ ]

    whole : bool
        (WHole) Plot all of cross-sections?


    Returns
    -------
    tvcolor : float

    tvdim : float

    tvfile : str

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float

    tvyen : float

    tvyst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isplot", "isplot", image, ystart, yend, xstart, xend, high, low, **kwargs)


def istat(image, ystart, yend, xstart, xend, **kwargs):
    """


    Runs the command: $FIG_DIR/istat .

    Arguments
    ---------
    image : str
        (IMage) Name of image to examine

    ystart : float
        (YStart) First Y value to be used

    yend : float
        (YEnd) Last Y value to be used

    xstart : float
        (XStart) First X value to be used

    xend : float
        (XEnd) Last X value to be used


    Keyword Arguments
    -----------------
    median : bool
        (MEDian) Calculate median as well as other statistics? [dyn.]

    pass2 : bool
        (PAss2) Pass twice through data for better sigma value? [dyn.]


    Returns
    -------
    stat_max : float

    stat_mean : float

    stat_median : float

    stat_min : float

    stat_sigma : float

    stat_size : float

    stat_total : float

    stat_xend : float

    stat_xmax : float

    stat_xmin : float

    stat_xstart : float

    stat_yend : float

    stat_ymax : float

    stat_ymin : float

    stat_ystart : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISTAT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/istat", "istat", image, ystart, yend, xstart, xend, **kwargs)


def istretch(image, xstretch, ystretch, xshift, yshift, xsplit, ysplit, output, **kwargs):
    """


    Runs the command: $FIG_DIR/istretch .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be stretched

    xstretch : float
        (XSTretch) Stretch factor in X

    ystretch : float
        (YSTretch) Stretch factor in Y

    xshift : float
        (XSHift) Shift in X

    yshift : float
        (YSHift) Shift in Y

    xsplit : float
        (XSPlit) Subdivision of X pixels

    ysplit : float
        (YSPlit) Subdivision of Y pixels

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISTRETCH
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/istretch", "istretch", image, xstretch, ystretch, xshift, yshift, xsplit, ysplit, output, **kwargs)


def isub(image, image1, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isub .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of first image

    image1 : str,filename
        (IMAGE1) Name of second image

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isub", "isub", image, image1, output, **kwargs)


def isubset(image, ystart, yend, xstart, xend, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isubset .

    Arguments
    ---------
    image : str
        (IMage) Name of image to subset

    ystart : float
        (YStart) First Y value for subset

    yend : float
        (YEnd) Last Y value for subset

    xstart : float
        (XStart) First X value for subset

    xend : float
        (XEnd) Last X value for subset

    output : str
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISUBSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isubset", "isubset", image, ystart, yend, xstart, xend, output, **kwargs)


def isuper(image, xsize, ysize, xpixel, ypixel, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isuper .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be supersetted

    xsize : float
        (XSize) X-dimension of superset image

    ysize : float
        (YSize) Y-dimension of superset image

    xpixel : float
        (XPixel) X-Position in output of input pixel (1,1)

    ypixel : float
        (YPixel) Y-Position in output of input pixel (1,1)

    output : str,filename
        (OUTput) Name of resulting superset image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISUPER
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isuper", "isuper", image, xsize, ysize, xpixel, ypixel, output, **kwargs)


def isxadd(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isxadd .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISXADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isxadd", "isxadd", image, spectrum, output, **kwargs)


def isxdiv(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isxdiv .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISXDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isxdiv", "isxdiv", image, spectrum, output, **kwargs)


def isxmul(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isxmul .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISXMUL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isxmul", "isxmul", image, spectrum, output, **kwargs)


def isxsub(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isxsub .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISXSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isxsub", "isxsub", image, spectrum, output, **kwargs)


def isyadd(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isyadd .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISYADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isyadd", "isyadd", image, spectrum, output, **kwargs)


def isydiv(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isydiv .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISYDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isydiv", "isydiv", image, spectrum, output, **kwargs)


def isymul(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isymul .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISYMUL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isymul", "isymul", image, spectrum, output, **kwargs)


def isysub(image, spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/isysub .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image

    spectrum : str,filename
        (SPectrum) Name of spectrum

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ISYSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/isysub", "isysub", image, spectrum, output, **kwargs)


def ixsmooth(image, sigma, width, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ixsmooth .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of data to be smoothed

    sigma : float
        (SIgma) Gaussian half width in pixels

    width : float
        (WIdth) Pixels over which gaussian is calculated

    output : str,filename
        (OUTput) Name of resulting data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_IXSMOOTH
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ixsmooth", "ixsmooth", image, sigma, width, output, **kwargs)


def linterp(spiketrum, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/linterp .

    Arguments
    ---------
    spiketrum : str,filename
        (SPIketrum) Name of "spiketrum" to be interpolated

    spectrum : str,filename
        (SPEctrum) Name of spectrum to be generated


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_LINTERP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/linterp", "linterp", spiketrum, spectrum, **kwargs)


def longslit(image, arc_opts, ystart, yend, yblock, iteration, maxlines, clfile, outable, **kwargs):
    """


    Runs the command: $FIG_DIR/longslit .

    Arguments
    ---------
    image : str
        Name of image for input

    arc_opts : str
        Fit option

    ystart : float
        analysis lower limit

    yend : float
        analysis upper limit

    yblock : float
        Analysis x-sect blocking width

    iteration : int
        New value of iteration

    maxlines : int
        Maximum number of lines to allow room for

    clfile : str
        Name of image for cloning from

    outable : str
        Name for EXTATIC file


    Keyword Arguments
    -----------------
    vcorr : float
        correction to apply to radial velocities [dyn.]

    tols : str
        For use in batch only [dyn.]

    inherit : int
        Number to control inheritance of previous fits [dyn.]

    device : str
        Device to use for plotting

    fitrat : float
        Ratio of widths, heights, or separation, for double fits

    calrat : int
        Ratio of number of iteration to default [dyn.]

    white : float
        Level to be recorded as white

    black : float
        Level to be recorded as black

    maxgauss : int
        Maximum number of Gaussians to allow room for

    tstart : float
        analysis lower limit

    tend : float
        analysis upper limit

    tblock : float
        Analysis blocking width in T direction

    fit_model : str
        Model of fit to perform

    plotlim : List[ERROR]
        Limits of plot (world coordinates) [dyn.]

    output : str
        OUTPut Name of output file

    hardcopy : bool
        produce hardcopy plots of fits from cube [dyn.]

    table : bool
        produce table of fits from cube [dyn.]

    plot : bool
        produce plots of rotation curves [dyn.]

    print : bool
        produce print out of rotation curves [dyn.]

    shape : bool
        carry out shape analysis [dyn.]

    keep_itt : bool
        keep iteration files [dyn.]

    fit : bool
        perform fitting [dyn.]

    copy : bool
        copy previous fits [dyn.]

    absorption : bool
        Allow fitting of absorption lines [dyn.]

    bounds : bool
        Perform bounded fits to lines (in batch) [dyn.]

    label : bool
        Label graphs (velocity plots and profile plots [dyn.]

    contour : bool
        Create contour plot(s) [dyn.]

    grey : bool
        Create greyscale plot(s) [dyn.]

    log : bool
        Use logarithmic scale

    weights : bool
        Use weights for fitting [dyn.]

    prfits : bool
        Print out details of fitting [dyn.]

    full : bool
        Print out full details of fits in table [dyn.]

    check : bool
        Plot array of line profiles [dyn.]

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_LONGSLIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/longslit", "longslit", image, arc_opts, ystart, yend, yblock, iteration, maxlines, clfile, outable, **kwargs)


def lsplot(spectrum, xsize, ysize, xstart, xend, high, low, bias, label, **kwargs):
    """


    Runs the command: $FIG_DIR/lsplot .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be plotted

    xsize : float
        (XSIze) Plot length in metres

    ysize : float
        (YSIze) Height of plot in metres

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    high : float
        (HIgh) Maximum data value to be plotted

    low : float
        (LOw) Minimum data value to be plotted

    bias : float
        (BIas) Bias value to be added to data

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    autoscale : bool
        (AUtoscale) Scale so all of spectrum fits?

    hard : str
         [ ]

    lines : bool
        (LINes) Use a line plot (not a histogram)? [dyn.]

    whole : bool
        (WHole) Plot all of spectrum?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_LSPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/lsplot", "lsplot", spectrum, xsize, ysize, xstart, xend, high, low, bias, label, **kwargs)


def lxset(image, wstart, wend, output, **kwargs):
    """


    Runs the command: $FIG_DIR/lxset .

    Arguments
    ---------
    image : str,filename
        (IMage) Image whose X values are to be set

    wstart : float
        (WStart) Wavelength of center of first bin

    wend : float
        (WEnd) Wavelength of center of last bin

    output : str,filename
        (OUtput) Name of modified image


    Keyword Arguments
    -----------------
    log : bool
        (LOg) Bin into logarithmic wavelength bins?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_LXSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/lxset", "lxset", image, wstart, wend, output, **kwargs)


def lyset(image, vstart, vend, output, **kwargs):
    """


    Runs the command: $FIG_DIR/lyset .

    Arguments
    ---------
    image : str,filename
        (IMage) Image whose Y values are to be set

    vstart : float
        (VStart) Value of center of first bin

    vend : float
        (VEnd) Value of center of last bin

    output : str,filename
        (OUtput) Name of modified image


    Keyword Arguments
    -----------------
    log : bool
        (LOg) Set logarithmic Y values?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_LYSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/lyset", "lyset", image, vstart, vend, output, **kwargs)


def mask(spectrum, table, mask, **kwargs):
    """


    Runs the command: $FIG_DIR/mask .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to generate mask from

    table : str
        (TAble) Table file giving regions to be masked

    mask : str,filename
        (MAsk) Name of mask to be generated


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MASK
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/mask", "mask", spectrum, table, mask, **kwargs)


def maskext(image, mask, mlow, mhigh, subord, output, **kwargs):
    """


    Runs the command: $FIG_DIR/maskext .

    Arguments
    ---------
    image : str,filename
        (IMage) name of image containing spectra

    mask : str,filename
        (MAsk) name of mask image

    mlow : float
        (MLow) Lowest order number to extract

    mhigh : float
        (MHigh) Highest order number to extract

    subord : float
        (SUBord) Sub-order to extract (0 => all)

    output : str,filename
        (OUTput) Name of resulting set of spectra


    Keyword Arguments
    -----------------
    reverse : bool
        (REVerse) Create output with order numbers reversed? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MASKEXT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/maskext", "maskext", image, mask, mlow, mhigh, subord, output, **kwargs)


def mcfit(spectrum, mask, points, output, **kwargs):
    """


    Runs the command: $FIG_DIR/mcfit .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be fitted

    mask : str,filename
        (MAsk) Data to be used as a mask for the fit

    points : float
        (POints) Number of splines to use in the fit

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MCFIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/mcfit", "mcfit", spectrum, mask, points, output, **kwargs)


def medfilt(image, box, output, **kwargs):
    """


    Runs the command: $FIG_DIR/medfilt .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be smoothed

    box : float
        (Box) Size of box for median calculations

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MEDFILT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/medfilt", "medfilt", image, box, output, **kwargs)


def medfiltr(image, xbox, ybox, output, **kwargs):
    """


    Runs the command: $FIG_DIR/medfiltr .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be smoothed

    xbox : str
        (XBox) X-dimension of box for median calculations

    ybox : str
        (YBox) Y-dimension of box for median calculations

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MEDFILTR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/medfiltr", "medfiltr", image, xbox, ybox, output, **kwargs)


def medsky(files, output, imglog, **kwargs):
    """


    Runs the command: $FIG_DIR/medsky .

    Arguments
    ---------
    files : str
        (FILE) File containing list of images or spectra

    output : str,filename
        (OUTput) The file containing the medians of the inputs

    imglog : str,filename
        (IMGlog) Image to contain median origin values?


    Keyword Arguments
    -----------------
    log : bool
        (LOG) Create an image showing origins of median values? [dyn.]

    scaled : bool
        (SCale) Scale input images relative to the first?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MEDSKY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/medsky", "medsky", files, output, imglog, **kwargs)


def moments(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/moments .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    comp : int
        Component number for storage [0]

    bias : float
        Continuum level [0]

    info : bool
        Issue informational messages [YES]

    varuse : bool
        Use input variances if available [YES]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MOMENTS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/moments", "moments", in_, **kwargs)


def movie(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/movie .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    axis : int
        Frame-counting axis [3]

    delay : float
        Delay in seconds between frames [0.]

    device : GRAPHICS
        Graphics device

    dialog : str
        Allow extensive interaction ['F']

    frame : int
        Frame number to display

    high : float
        Maximum data for display

    info : bool
        Issue informational messages [YES]

    low : float
        Minimum data for display

    menu : str
        Display option (FBIPNQ) [F]

    mode : str
        Operation mode (fast/square/fill) ['Fast']


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MOVIE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/movie", "movie", in_, **kwargs)


def msplot(spectrum, xstart, xend, nspect, xrange, label, **kwargs):
    """


    Runs the command: $FIG_DIR/msplot .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be plotted

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    nspect : float
        (NSpect) Number of spectra per page

    xrange : float
        (XRange) Range in X for each spectrum

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    colour : str
        (COLour) Plot colour (Bl,Wh,R,G,B,Cy,Ma,Y)

    thickness : float
        (THickness) Plotted line width

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Produce plot as a hard copy?

    next : bool
        Ready for next page

    samescale : bool
        (SAmescale) Use same scale for each spectrum?

    soft : str
         [ ]

    whole : bool
        (WHole) Plot all of spectrum?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_MSPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/msplot", "msplot", spectrum, xstart, xend, nspect, xrange, label, **kwargs)


def ncset(spectrum, xstart, xend, value, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ncset .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be set

    xstart : float
        (XStart) First X-value to be set to constant

    xend : float
        (XEnd) Last X-value to be set to constant

    value : float
        (Value) Constant value to set region to

    output : str,filename
        (OUtput) Output file for modified data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_NCSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ncset", "ncset", spectrum, xstart, xend, value, output, **kwargs)


def offdist(infile, offset, outfile, **kwargs):
    """


    Runs the command: $FIG_DIR/offdist .

    Arguments
    ---------
    infile : str
        (INfile) Name of distortion file to be modified

    offset : float
        (OFfset) Offset in Y to be applied

    outfile : str
        (OUtfile) Name of new distortion file to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_OFFDIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/offdist", "offdist", infile, offset, outfile, **kwargs)


def optextract(image, profile, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/optextract .

    Arguments
    ---------
    image : str,filename
        (IMage) The 2D data to be reduced to a spectrum

    profile : str,filename
        (PROFile) The normalized spatial profile

    spectrum : str,filename
        (SPectrum) Name of resulting spectrum


    Keyword Arguments
    -----------------
    weight : bool
        (WEIght) Use errors to weight data?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_OPTEXTRACT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/optextract", "optextract", image, profile, spectrum, **kwargs)


def overpf(image, repeat, black, white, pfile, ystart, yend, xstart, xend, extwid, **kwargs):
    """


    Runs the command: $FIG_DIR/overpf .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be overlayed

    repeat : str
        (REpeat) ?

    black : float
        (BLack) Black level for display?

    white : float
        (WHite) White level for display?

    pfile : str
        (PFile) Name of file containing polynomial fits

    ystart : float
        (YStart) First Y value to be displayed

    yend : float
        (YEnd) Last Y value to be displayed

    xstart : float
        (XStart) First X value to be displayed

    xend : float
        (XEnd) Last X value to be displayed

    extwid : float
        (EXtwid) Extraction full width in pixels to be overlayed


    Keyword Arguments
    -----------------
    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_OVERPF
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/overpf", "overpf", image, repeat, black, white, pfile, ystart, yend, xstart, xend, extwid, **kwargs)


def peak(spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/peak .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) File containing peak to be analysed


    Returns
    -------
    shift : float

    width : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_PEAK
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/peak", "peak", spectrum, **kwargs)


def polext(image, pfile, dfile, extwidth, output, **kwargs):
    """


    Runs the command: $FIG_DIR/polext .

    Arguments
    ---------
    image : str,filename
        (IMage) Image containing fibre data

    pfile : str
        (PFile) Polynomial file to be used to find spectra

    dfile : str
        (DFile) File listing dud fibres

    extwidth : float
        (EXtwidth) Width of spectra in pixels

    output : str,filename
        (OUTput) Fibre image to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_POLEXT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/polext", "polext", image, pfile, dfile, extwidth, output, **kwargs)


def polysky(image, ys1, ye1, ys2, ye2, degree, nreject, output, **kwargs):
    """


    Runs the command: $FIG_DIR/polysky .

    Arguments
    ---------
    image : str,filename
        (IMage) The input 2D data

    ys1 : float
        (YS1) Y start for first sky region

    ye1 : float
        (YE1) Y end for first sky region

    ys2 : float
        (YS2) Y start for second sky region

    ye2 : float
        (YE2) Y end for second sky region

    degree : float
        (DEGree) Degree of polynomial

    nreject : float
        (NREJect) Number of points to reject from each column

    output : str,filename
        (OUTput) Name of resulting sky subtracted data


    Keyword Arguments
    -----------------
    weight : bool
        (WEIght) Use errors to weight fit?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_POLYSKY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/polysky", "polysky", image, ys1, ye1, ys2, ye2, degree, nreject, output, **kwargs)


def profile(image, ystart, yend, degree, nreject, profile, residual, **kwargs):
    """


    Runs the command: $FIG_DIR/profile .

    Arguments
    ---------
    image : str,filename
        (IMage) The input 2D data

    ystart : float
        (YStart) Y start for window

    yend : float
        (YEnd) Y end for window

    degree : float
        (DEGree) Degree of polynomial

    nreject : float
        (NREJect) Number of points to reject

    profile : str,filename
        (PROFile) Name of resulting profile image

    residual : str,filename
        (RESIDual) Name of image containing residuals


    Keyword Arguments
    -----------------
    weight : bool
        (WEIght) Use errors to weight fit?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_PROFILE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/profile", "profile", image, ystart, yend, degree, nreject, profile, residual, **kwargs)


def q2bad(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/q2bad .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF data structure

    out : str,filename
        Output NDF


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_Q2BAD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/q2bad", "q2bad", in_, out, **kwargs)


def qual2flag(input, output, **kwargs):
    """


    Runs the command: $FIG_DIR/qual2flag .

    Arguments
    ---------
    input : str
        (INput) Name of file to have the quality array removed

    output : str
        (OUTput) Name of resulting file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_QUAL2FLAG
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/qual2flag", "qual2flag", input, output, **kwargs)


def r2cmplx(rdata, cdata, **kwargs):
    """


    Runs the command: $FIG_DIR/r2cmplx .

    Arguments
    ---------
    rdata : str,filename
        (RData) Data to become real part of complex data

    cdata : str,filename
        (CData) Resulting complex data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_R2CMPLX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/r2cmplx", "r2cmplx", rdata, cdata, **kwargs)


def rcgs2(file, obs, scan, output, **kwargs):
    """


    Runs the command: $FIG_DIR/rcgs2 .

    Arguments
    ---------
    file : str
        (FIle) Name of container file to be read

    obs : float
        (OBS) Observation number

    scan : float
        (SCAN) Scan number (0 for coadded data)

    output : str,filename
        (OUTPUT) Figaro file to be created


    Keyword Arguments
    -----------------
    twod : bool
        (TWOD) Create 2D file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RCGS2
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/rcgs2", "rcgs2", file, obs, scan, output, **kwargs)


def rdfits(file, image, **kwargs):
    """


    Runs the command: $FIG_DIR/rdfits .

    Arguments
    ---------
    file : str
        (FIle) Name of "Disk FITS" format file

    image : str
        (IMage) Name of resulting image


    Keyword Arguments
    -----------------
    float : bool
        (FLoat) Convert data to floating point?

    swap : bool
        (SWap) Swap byte order?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RDFITS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/rdfits", "rdfits", file, image, **kwargs)


def rdipso(file, code, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/rdipso .

    Arguments
    ---------
    file : str
        (FIle) Name of DIPSO format file to be read

    code : float
        (Code) Data format code for input file (0,1,2)

    spectrum : str,filename
        (SPectrum) Figaro file to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RDIPSO
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/rdipso", "rdipso", file, code, spectrum, **kwargs)


def rembad(spectrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/rembad .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum containing bad points

    output : str,filename
        (OUTput) Name of resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_REMBAD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/rembad", "rembad", spectrum, output, **kwargs)


def renobj(source, destin, **kwargs):
    """


    Runs the command: $FIG_DIR/renobj .

    Arguments
    ---------
    source : HDSOBJECT
        HDS object to be renamed

    destin : HDSOBJECT
        Destination of renamed HDS object


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RENOBJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/renobj", "renobj", source, destin, **kwargs)


def resamp(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/resamp .

    Keyword Arguments
    -----------------
    mode : str
        Average SPECTRA or resample rows in CUBE (S/C) ['Cube']

    inlist : str
        Group of input NDFs

    out : str,filename
        Output NDF

    start : float
        Output start coordinate

    step : float
        Output coordinate step

    end : float
        Output end coordinate

    info : bool
        Issue informational messages [YES]

    varuse : bool
        Use input variances and ignore input without variance [YES]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RESAMP
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/resamp", "resamp", *args, **kwargs)


def resample(image, **kwargs):
    """


    Runs the command: $FIG_DIR/resample .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be resampled


    Keyword Arguments
    -----------------
    transform : float
        (Transform) The transformation coefficients

    xmag : float
        (XMag) X magnification

    ymag : float
        (YMag) Y magnification

    angle : float
        (ANGle) Rotation angle

    method : str
        (Method) The interpolation method (1, 2, or 3)

    xsize : str
        (XSize) X-dimension of output image

    ysize : str
        (YSize) Y-dimension of output image

    invalid : str
        (INValid) Value of an invalid pixel

    output : str,filename
        (OUTput) Name of resulting image

    invert : bool
        (INvert) Invert the transformation? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RESAMPLE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/resample", "resample", image, **kwargs)


def rescale(image, lowfact, highfact, output, **kwargs):
    """


    Runs the command: $FIG_DIR/rescale .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be rescaled

    lowfact : float
        (LOWfact) lower limit of rescaling

    highfact : float
        (HIGHfact) upper limit of rescaling

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RESCALE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/rescale", "rescale", image, lowfact, highfact, output, **kwargs)


def retype(input, type, output, **kwargs):
    """


    Runs the command: $FIG_DIR/retype .

    Arguments
    ---------
    input : str
        (INput) Name of file for which data type is to be changed

    type : str
        (TYpe) New type for data array

    output : str
        (OUTput) Name of resulting data file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_RETYPE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/retype", "retype", input, type, output, **kwargs)


def rotx(image, pixels, output, **kwargs):
    """


    Runs the command: $FIG_DIR/rotx .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of data to be rotated in X

    pixels : float
        (PIXels) Number of pixels to rotate data

    output : str,filename
        (OUtput) Name of resulting rotated data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_ROTX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/rotx", "rotx", image, pixels, output, **kwargs)


def sclean(image, output, **kwargs):
    """


    Runs the command: $FIG_DIR/sclean .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to be cleaned

    output : str,filename
        (OUTput) Name of resulting image


    Keyword Arguments
    -----------------
    idev : str
        Device for image display [dyn.]

    quit : bool
        Terminate cleaning process [FALSE]

    deg : , 0- 7
        Degree of fit to use for interpolation [2]

    xsize : , 1- 20
        Side of box deleted by "X" and "Y", in X [5]

    ysize : , 1- 20
        Side of box deleted by "X" and "Y", in Y [5]

    high : float
        Highest displayed data value

    low : float
        Lowest displayed data value

    logfile : str,filename
        Log file [!]

    batchfile : str,filename
        File containing commands for batch operation (!=interactive) [!]

    bitnum : , 0-7
        Bit number of quality mask to modify for bad pixels [dyn.]

    zoom : , 1-24
        Pixel magnification factor in Expanded and SCUBA modes [6]


    Returns
    -------
    imarray : float

    imfile : str


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SCLEAN
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/sclean", "sclean", image, output, **kwargs)


def scnsky(image, section, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/scnsky .

    Arguments
    ---------
    image : str,filename
        (IMage) name of image to obtain sky from

    section : float
        (SECtion) Length of each Y-section

    spectrum : str,filename
        (SPectrum) name of spectrum to be generated


    Keyword Arguments
    -----------------
    minimum : float
        (MINimum) Minimum valid pixel value

    limit : bool
        (LImit) Ignore pixels below a minimum value? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SCNSKY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/scnsky", "scnsky", image, section, spectrum, **kwargs)


def scross(spectrum, template, xstart, xend, **kwargs):
    """


    Runs the command: $FIG_DIR/scross .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of spectrum

    template : str,filename
        (TEmplate) Name of template spectrum

    xstart : float
        (XStart) First X value to be used

    xend : float
        (XEnd) Last X value to be used


    Keyword Arguments
    -----------------
    cbpc : float
        (CBpc) Percentage of spectrum covered by cosine bell

    cross : str,filename
        (CRoss) Name of cross-correlation data?

    fitcont : bool
        (FItcont) Fit continuum to data prior to cosine bell? [dyn.]

    record : bool
        (RECord) Create file to record cross-correlation?


    Returns
    -------
    shift : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SCROSS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/scross", "scross", spectrum, template, xstart, xend, **kwargs)


def scrunch(spectrum, wstart, wend, bins, output, **kwargs):
    """


    Runs the command: $FIG_DIR/scrunch .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be scrunched

    wstart : float
        (WStart) Wavelength of center of first bin

    wend : float
        (WEnd) Wavelength of center of last bin (or increment)

    bins : float
        (BIns) Number of bins for scrunched spectrum

    output : str,filename
        (OUtput) Name of scrunched spectrum


    Keyword Arguments
    -----------------
    final : bool
        (FInal) Treat WEND as a final wavelength value? [dyn.]

    flux : bool
        (Flux) Conserve flux (as opposed to mean value)?

    increment : bool
        (INCrement) Treat WEND value as an increment value? [dyn.]

    linear : bool
        (LInear) Use linear interpolation for data?

    log : bool
        (LOg) Bin into logarithmic wavelength bins?

    mean : bool
        (Mean) Conserve mean value (as opposed to flux)?

    quad : bool
        (Quad) Use quadratic interpolation for data?


    Returns
    -------
    scrunch_end : float

    scrunch_inc : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SCRUNCH
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/scrunch", "scrunch", spectrum, wstart, wend, bins, output, **kwargs)


def sdist(image, columns, trace, width, maxdeg, **kwargs):
    """


    Runs the command: $FIG_DIR/sdist .

    Arguments
    ---------
    image : str,filename
        (IMage) Image containing distortion spectra

    columns : float
        (COLumns) Number of cols to average to get peaks

    trace : str
        (TRace) Trace mode - G(aussian) B(al) C(OG) or E(dge)

    width : float
        (WIdth) Half width of spectra - in pixels

    maxdeg : float
        (MAXdeg) Maximum degree polynomial to use


    Keyword Arguments
    -----------------
    diagnose : bool
        (DIAgnose) Output details of trace failures? [dyn.]

    next : bool
        Ready for next spectrum

    npixels : float
         [0.]

    soft : str
         [ ]

    softd : bool
        (SOftd) Display results on graphics device?

    xpixels : float
         [0.]

    ypixels : float
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SDIST
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/sdist", "sdist", image, columns, trace, width, maxdeg, **kwargs)


def setobj(value, object, **kwargs):
    """


    Runs the command: $FIG_DIR/setobj .

    Arguments
    ---------
    value : str
        New value for HDS scalar

    object : HDSOBJECT
        HDS object to be assigned a value


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SETOBJ
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/setobj", "setobj", value, object, **kwargs)


def sfit(spectrum, order, output, **kwargs):
    """


    Runs the command: $FIG_DIR/sfit .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Name of spectrum to be fitted

    order : float
        (ORder) Order of fitted polynomial

    output : str,filename
        (OUTput) Name of resulting spectrum


    Keyword Arguments
    -----------------
    logs : bool
        (LOgs) Fit to logarithms of data


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SFIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/sfit", "sfit", spectrum, order, output, **kwargs)


def skyliner(in_, sky, out, **kwargs):
    """


    Runs the command: $FIG_DIR/skyliner .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    sky : str,filename
        Sky spectrum

    out : str,filename
        Output NDF


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SKYLINER
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/skyliner", "skyliner", in_, sky, out, **kwargs)


def slice(image, ystart, yend, xstart, xend, elements, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/slice .

    Arguments
    ---------
    image : str,filename
        (IMage) Image from which slice is taken

    ystart : float
        (YStart) Y value of start of slice

    yend : float
        (YEnd) Y value of end of slice

    xstart : float
        (XStart) X value for start of slice

    xend : float
        (XEnd) X value of end of slice

    elements : float
        (ELements) Number of pixels in resulting spectrum

    spectrum : str,filename
        (SPectrum) Resulting spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SLICE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/slice", "slice", image, ystart, yend, xstart, xend, elements, spectrum, **kwargs)


def soft(softdev, **kwargs):
    """


    Runs the command: $FIG_DIR/soft .

    Arguments
    ---------
    softdev : str
        (SOftdev) Device to use for soft plots


    Keyword Arguments
    -----------------
    draw : bool
        (DRaw) Output a test plot to the device? [dyn.]

    force : bool
        (FOrce) Force use of an unrecognised device ? [dyn.]

    options : bool
        (OPtions) List possible device names? [dyn.]


    Returns
    -------
    soft : str


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SOFT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/soft", "soft", softdev, **kwargs)


def speccont(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/speccont .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    axes : str
        Draw axes ['++++']

    bottom : str
        Label for bottom axis [!]

    clear : bool
        Clear the active part of screen [FALSE]

    colour : , 0- 255
        Colour index [1]

    dash : , 1- 5
        Dash pattern code [1]

    device : GRAPHICS
        Graphics device

    end : float
        Last contour value

    fill : bool
        Ignore image aspect ratio [FALSE]

    height : , 0.01 40.
        Character height (marker size) [1.]

    labspc : List[float]
        Space for labelling [0.1,0.1,0.05,0.05]

    left : str
        Label for left axis [!]

    major : float
        Interval between major ticks [0.,0.]

    minor : int
        No. of minor intervals per major interval [0,0]

    mode : str
        Contour stepping (linear/free) [Linear]

    numl : str
        Write numerical labels ['++00']

    overlay : bool
        Overlay on existing data [FALSE]

    right : str
        Label for right axis [!]

    roman : bool
        Use nicer font [FALSE]

    start : float
        First contour value

    step : float
        Step between contours

    text : str
        Write text labels ['++++']

    thick : , 1- 21
        Line thickness [1]

    tick : str
        Draw ticks ['----']

    top : str
        Label for top axis [!]

    world : List[float]
        World coordinates [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPECCONT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/speccont", "speccont", in_, **kwargs)


def specgrid(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/specgrid .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    axes : str
        Draw axes ['++++']

    bin : bool
        Bin-style connections [FALSE]

    bottom : str
        Label for bottom axis [!]

    cellsz : List[float]
        Size of spectral cells [1.,1.]

    clear : bool
        Clear the active part of screen [FALSE]

    colour : , 0- 255
        Colour index [1]

    cworld : List[float]
        World coordinates [!]

    dash : , 1- 5
        Dash pattern code [1]

    device : GRAPHICS
        Graphics device

    error : bool
        Error bars [FALSE]

    fill : bool
        Fill area available [FALSE]

    frame : bool
        Frame for each cell [TRUE]

    height : , 0.01 40.
        Character height (marker size) [1.]

    labspc : List[float]
        Space for labelling [0.1,0.1,0.05,0.05]

    left : str
        Label for left axis [!]

    legend : List[float]
        Position of legend cell [!]

    lin : bool
        Line-style connections [TRUE]

    major : float
        Interval between major ticks [0.,0.]

    mark : , 0- 6
        Marker symbol [0]

    minor : int
        No. of minor intervals per major interval [0,0]

    numl : str
        Write numerical labels ['++00']

    overlay : bool
        Overlay on existing data [FALSE]

    right : str
        Label for right axis [!]

    roman : bool
        Use nicer font [FALSE]

    sworld : List[float]
        World coordinates within cells [!]

    text : str
        Write text labels ['++++']

    thick : , 1- 21
        Line thickness [1]

    tick : str
        Draw ticks [----]

    top : str
        Label for top axis [!]

    width : bool
        Pixel width bars [FALSE]

    xlegend : str
        Label for bottom of legend cell [!]

    ylegend : str
        Label for left of legend cell [!]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPECGRID
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/specgrid", "specgrid", in_, **kwargs)


def specplot(in_, **kwargs):
    """


    Runs the command: $FIG_DIR/specplot .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF


    Keyword Arguments
    -----------------
    axes : str
        Draw axes ['++++']

    bin : bool
        Bin-style connections [FALSE]

    bottom : str
        Label for bottom axis

    clear : bool
        Clear the active part of screen [FALSE]

    colour : , 0- 255
        Colour index [1]

    dash : , 1- 5
        Dash pattern code [1]

    device : GRAPHICS
        Graphics device

    error : bool
        Error bars [FALSE]

    height : , 0.01 40.
        Character height (marker size) [1.]

    info : bool
        Issue informational messages [TRUE]

    labspc : List[float]
        Space for labelling

    left : str
        Label for left axis

    lin : bool
        Line-style connections [TRUE]

    major : List[float]
        Interval between major ticks [0.,0.]

    mark : , 0- 6
        Marker symbol [0]

    minor : List[int]
        No. of minor intervals per major interval [0,0]

    northo : float
        Expected length of orthogonal numeric labels [1]

    numl : str
        Write numerical labels ['++00']

    overlay : bool
        Overlay on existing data [FALSE]

    right : str
        Label for right axis

    roman : bool
        Use nicer font [FALSE]

    text : str
        Write text labels ['+++0']

    thick : , 1- 21
        Line thickness [1]

    tick : str
        Draw ticks ['----']

    top : str
        Label for top axis

    width : bool
        Pixel width bars [FALSE]

    world : List[float]
        World coordinates


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPECPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/specplot", "specplot", in_, **kwargs)


def spflux(spectrum, calspect, output, **kwargs):
    """


    Runs the command: $FIG_DIR/spflux .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be calibrated

    calspect : str,filename
        (CALspect) Calibration spectrum

    output : str,filename
        (OUTput) Resulting calibrated spectrum


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPFLUX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/spflux", "spflux", spectrum, calspect, output, **kwargs)


def spied(spiketrum, output, **kwargs):
    """


    Runs the command: $FIG_DIR/spied .

    Arguments
    ---------
    spiketrum : str,filename
        (SPIketrum) Spiketrum to be edited

    output : str,filename
        (OUTput) Name of resulting spiketrum


    Keyword Arguments
    -----------------
    colour : str
        (COLour) Plot colour (Bl,Wh,R,G,B,Cy,Ma,Y)

    high : float
        Maximum Y value to plot

    low : float
        Minimum Y value to plot

    order : float
        Order for polynomial fit

    quit : bool
        Terminate spiketrum editing

    soft : str
         [ ]

    xend : float
        Maximum X value to plot

    xstart : float
        Minimum X value to plot


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPIED
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/spied", "spied", spiketrum, output, **kwargs)


def spifit(spiketrum, order, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/spifit .

    Arguments
    ---------
    spiketrum : str,filename
        (SPIketrum) Name of "spiketrum" to be interpolated

    order : float
        (ORder) Order of polynomial to be fitted

    spectrum : str,filename
        (SPEctrum) Name of spectrum to be generated


    Keyword Arguments
    -----------------
    log : bool
        (Log) Fit to the log of the data? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPIFIT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/spifit", "spifit", spiketrum, order, spectrum, **kwargs)


def splot(spectrum, xstart, xend, high, low, bias, label, **kwargs):
    """


    Runs the command: $FIG_DIR/splot .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) Spectrum to be plotted

    xstart : float
        (XStart) First X-value to be plotted

    xend : float
        (XEnd) Last X-value to be plotted

    high : float
        (HIgh) Maximum data value to be plotted

    low : float
        (LOw) Minimum data value to be plotted

    bias : float
        (BIas) Bias value to be added to data

    label : str
        (LABel) Label for plot


    Keyword Arguments
    -----------------
    colour : str
        (COLour) Plot colour (Bl,Wh,R,G,B,Cy,Ma,Y)

    thickness : float
        (THickness) Plotted line width

    autoscale : bool
        (AUtoscale) Scale so all of spectrum fits?

    axes : bool
        (AXes) Plot and label axes? [dyn.]

    erase : bool
        (ERase) Erase screen before plotting? [dyn.]

    hard : str
         [ ]

    hardcopy : bool
        (HArdcopy) Produce plot as a hard copy?

    lines : bool
        (LINes) Use a line plot (not a histogram)? [dyn.]

    soft : str
         [ ]

    whole : bool
        (WHole) Plot all of spectrum?


    Returns
    -------
    tvcolor : float

    tvfile : str

    tvhigh : float

    tvlow : float

    tvxen : float

    tvxst : float


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SPLOT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/splot", "splot", spectrum, xstart, xend, high, low, bias, label, **kwargs)


def sqrterr(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/sqrterr .

    Arguments
    ---------
    image : str,filename
        (IMage) Name of image to calculate errors for

    factor : float
        (FACtor) Factor where Error=SQRT(Data/FACTOR)

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SQRTERR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/sqrterr", "sqrterr", image, factor, output, **kwargs)


def subset(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/subset .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    out : str,filename
        Output NDF


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_SUBSET
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/subset", "subset", in_, out, **kwargs)


def table(file, **kwargs):
    """


    Runs the command: $FIG_DIR/table .

    Arguments
    ---------
    file : str
        (File) SPICA Memory file to be used


    Keyword Arguments
    -----------------
    delete : bool
        (DELete) Delete table after display/printing?

    print : bool
        (PRINT) Print table?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_TABLE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/table", "table", file, **kwargs)


def tippex(output, **kwargs):
    """


    Runs the command: $FIG_DIR/tippex .

    Arguments
    ---------
    output : str,filename
        (OUtput) Output file for fudged data


    Keyword Arguments
    -----------------
    confirm : bool
        Go ahead

    quit : bool
        Quit TIPPEX

    soft : str
         [ ]

    tvcolor : float
         [0.]

    tvfile : str
         [ ]

    tvhigh : float
         [0.]

    tvlow : float
         [0.]

    tvxen : float
         [0.]

    tvxst : float
         [0.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_TIPPEX
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/tippex", "tippex", output, **kwargs)


def trimfile(in_, out, **kwargs):
    """


    Runs the command: $FIG_DIR/trimfile .

    Arguments
    ---------
    `in_` : HDSOBJECT
        Input HDS file

    out : str
        Name of clean copy of HDS file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_TRIMFILE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/trimfile", "trimfile", in_, out, **kwargs)


def vachel(image, output, vel, **kwargs):
    """


    Runs the command: $FIG_DIR/vachel .

    Arguments
    ---------
    image : str,filename
        (IMage) Image whose X values are to be converted

    output : str,filename
        (OUtput) Name of modified image

    vel : float
        (VElocity) Recession velocity (Km/s)?


    Keyword Arguments
    -----------------
    dplr : bool
        (DPlr) Is a correction for recession velocity required?

    vac : bool
        (VAc) Apply air to vacuum wavelength correction?


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_VACHEL
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/vachel", "vachel", image, output, vel, **kwargs)


def vig(image, **kwargs):
    """


    Runs the command: $FIG_DIR/vig .

    Arguments
    ---------
    image : str
        Name of image for input


    Keyword Arguments
    -----------------
    old : bool
        OLD - old coefficients are to be used for correction [dyn.]

    output : str
        OUTput Name of output file

    ystart : int
        start value to extract in channel direction

    yend : int
        end value to extract in channel direction

    xstart : int
        start value to extract in x-sect direction

    xend : int
        end value to extract in x-sect direction

    character_input : str

    character_value : str

    hard : str

    logical_value : bool

    no_def_value : float

    numeric_value : float

    soft : str
         [ ]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_VIG
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/vig", "vig", image, **kwargs)


def wdfits(image, file, **kwargs):
    """


    Runs the command: $FIG_DIR/wdfits .

    Arguments
    ---------
    image : str,filename
        (IMage) Image to be written out in "disk FITS" format

    file : str
        (FIle) Name of "Disk Fits" file to be created


    Keyword Arguments
    -----------------
    bit16 : bool
        (BIT16) Force real data to be output as 16bit numbers? [dyn.]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_WDFITS
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/wdfits", "wdfits", image, file, **kwargs)


def wdipso(spectrum, code, file, **kwargs):
    """


    Runs the command: $FIG_DIR/wdipso .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) File to be converted to Dipso format

    code : float
        (Code) Data format code for output file (0,1,2)

    file : str
        (FIle) Name of DIPSO format file to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_WDIPSO
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/wdipso", "wdipso", spectrum, code, file, **kwargs)


def xcadd(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/xcadd .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with X data to be added to

    factor : float
        (FACtor) Additive constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcadd", "xcadd", image, factor, output, **kwargs)


def xcdiv(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/xcdiv .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with X data to be divided

    factor : float
        (FACtor) Constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcdiv", "xcdiv", image, factor, output, **kwargs)


def xcmult(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/xcmult .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with X data to be multiplied

    factor : float
        (FACtor) Multiplicative constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCMULT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcmult", "xcmult", image, factor, output, **kwargs)


def xcopi(spectrum, arc, arc2, fraction, output, **kwargs):
    """


    Runs the command: $FIG_DIR/xcopi .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) File requiring X data

    arc : str,filename
        (ARc) File containing X data

    arc2 : str,filename
        (ARC2) Second file containing X data

    fraction : float
        (FRaction) X data OUTPUT=ARC+(ARC2-ARC1)*FRACTION

    output : str,filename
        (OUTput) Name of resulting file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCOPI
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcopi", "xcopi", spectrum, arc, arc2, fraction, output, **kwargs)


def xcopy(spectrum, arc, output, **kwargs):
    """


    Runs the command: $FIG_DIR/xcopy .

    Arguments
    ---------
    spectrum : str,filename
        (SPectrum) File requiring X data

    arc : str,filename
        (ARc) File containing X data

    output : str,filename
        (OUTput) Name of resulting file


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCOPY
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcopy", "xcopy", spectrum, arc, output, **kwargs)


def xcsub(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/xcsub .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with X data to be subtracted from

    factor : float
        (FACtor) Constant to be subtracted from data

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcsub", "xcsub", image, factor, output, **kwargs)


def xcur(*args, **kwargs):
    """


    Runs the command: $FIG_DIR/xcur .

    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XCUR
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xcur", "xcur", *args, **kwargs)


def xtplane(cube, ystart, yend, image, **kwargs):
    """


    Runs the command: $FIG_DIR/xtplane .

    Arguments
    ---------
    cube : str,filename
        (CUbe) Name of data cube to extract image from

    ystart : float
        (YStart) first y-value to be used

    yend : float
        (YEnd) last y-value to be used

    image : str,filename
        (IMage) name of image to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XTPLANE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xtplane", "xtplane", cube, ystart, yend, image, **kwargs)


def xtract(in_, colaps, out, **kwargs):
    """


    Runs the command: $FIG_DIR/xtract .

    Arguments
    ---------
    `in_` : str,filename
        Input NDF

    colaps : List[int]
        For each axis: 0 (retain) or 1 (collapse)

    out : str,filename
        Output NDF


    Keyword Arguments
    -----------------
    info : bool
        Issue informational messages [YES]

    varuse : bool
        Use input variances if available [YES]


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XTRACT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xtract", "xtract", in_, colaps, out, **kwargs)


def xyplane(cube, tstart, tend, image, **kwargs):
    """


    Runs the command: $FIG_DIR/xyplane .

    Arguments
    ---------
    cube : str,filename
        (CUbe) Name of data cube to extract image from

    tstart : float
        (TStart) first t-value to be used

    tend : float
        (TEnd) last t-value to be used

    image : str,filename
        (IMage) name of image to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_XYPLANE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/xyplane", "xyplane", cube, tstart, tend, image, **kwargs)


def ycadd(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ycadd .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with Y data to be added to

    factor : float
        (FACtor) Additive constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_YCADD
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ycadd", "ycadd", image, factor, output, **kwargs)


def ycdiv(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ycdiv .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with Y data to be divided

    factor : float
        (FACtor) Constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_YCDIV
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ycdiv", "ycdiv", image, factor, output, **kwargs)


def ycmult(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ycmult .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with Y data to be multiplied

    factor : float
        (FACtor) Multiplicative constant

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_YCMULT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ycmult", "ycmult", image, factor, output, **kwargs)


def ycsub(image, factor, output, **kwargs):
    """


    Runs the command: $FIG_DIR/ycsub .

    Arguments
    ---------
    image : str,filename
        (IMage) Image with Y data to be subtracted from

    factor : float
        (FACtor) Constant to be subtracted from data

    output : str,filename
        (OUTput) Name of resulting image


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_YCSUB
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ycsub", "ycsub", image, factor, output, **kwargs)


def ystract(image, xstart, xend, spectrum, **kwargs):
    """


    Runs the command: $FIG_DIR/ystract .

    Arguments
    ---------
    image : str,filename
        (IMage) name of image to extract data from

    xstart : float
        (XStart) first x-value to be used

    xend : float
        (XEnd) last x-value to be used

    spectrum : str,filename
        (SPectrum) name of spectrum to be generated


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_YSTRACT
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ystract", "ystract", image, xstart, xend, spectrum, **kwargs)


def ytplane(cube, xstart, xend, image, **kwargs):
    """


    Runs the command: $FIG_DIR/ytplane .

    Arguments
    ---------
    cube : str,filename
        (CUbe) Name of data cube to extract image from

    xstart : float
        (XStart) first x-value to be used

    xend : float
        (XEnd) last x-value to be used

    image : str,filename
        (IMage) name of image to be created


    Notes
    -----
    See http://www.starlink.ac.uk/cgi-bin/htxserver/sun86.htx/sun86.html?xref_YTPLANE
    for full documentation of this command in the latest Starlink release

    """
    return wrapper.starcomm("$FIG_DIR/ytplane", "ytplane", cube, xstart, xend, image, **kwargs)

