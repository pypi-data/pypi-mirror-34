syntax = "proto3";

package is.vision;

option java_package = "com.is.vision";
option java_multiple_files = true;

import "is_msgs/common.proto";
import "is_msgs/image.proto";
import "is_msgs/validate.proto";
import "google/protobuf/timestamp.proto";

// Define messages for the camera gateway and calibration services

message CameraSetting {
  // True if the camera should automatically assign this parameter
  bool automatic = 1;
  // Ratio assigned to the parameter where 0.0 is the lowest value and 1.0 the highest
  float ratio = 2 [(validate.rules).float = { gte: 0.0, lte: 1.0 }];
}

message CameraSettings {
  CameraSetting brightness = 1;
  CameraSetting exposure = 2;
  CameraSetting focus = 3;
  CameraSetting gain = 4;
  CameraSetting gamma = 5;
  CameraSetting hue = 6;
  CameraSetting iris = 7;
  CameraSetting saturation = 8;
  CameraSetting sharpness = 9;
  CameraSetting shutter = 10;
  CameraSetting white_balance_bu = 11;
  CameraSetting white_balance_rv = 12;
  CameraSetting zoom = 13;
}

// Camera parameters
message CameraConfig {
  common.SamplingSettings sampling = 1; // sampling parameters
  ImageSettings image = 2; // image parameters
  CameraSettings camera = 3; // internal camera parameters
}

/* Request selector/filter for CameraSettings. Used to select what fields 
   should be present in an CameraConfig GET request. 
   See [FieldSelector](#is.common.FieldSelector) for more information. */
enum CameraConfigFields {
  ALL = 0;               // Fill everything
  SAMPLING_SETTINGS = 1; // Fill sampling settings
  IMAGE_SETTINGS = 2;    // Fill image settings 
  CAMERA_SETTINGS  = 3;  // Fill camera settings
}

// Models the calibration parameters of a camera
message CameraCalibration { 
  int64 id = 1;  // camera id
  google.protobuf.Timestamp calibrated_at = 2; // when the calibration was performed
  double error = 3; // average reprojection error
  vision.Resolution resolution = 4; // resolution used during calibration

  common.Tensor intrinsic = 5; // intrinsic matrix with shape=[3,3]
  common.Tensor distortion = 6; // distortion coefficients with shape=[1,5]
  
  // used to transform from the camera frame to a world frame and vice versa
  repeated FrameTransformation extrinsic = 7;
}

// Represent the tranformation between two coordinate systems
message FrameTransformation {
  int64 from = 1;
  int64 to = 2;
  common.Tensor tf = 3; // transformation matrix [R T; 0 1] with shape = [4,4]
}

message IdPair {
  int64 from = 1;
  int64 to = 2;
}

message GetTransformationRequest {
  // Sequence of pairs (from -> to) describing the desired transformations
  repeated IdPair ids = 1;
}

message GetTransformationReply {
  // Sequence of transformations relative to the requested ids.
  repeated is.vision.FrameTransformation transformations = 1;
}

message AddTransformationRequest {
}

message AddTransformationReply {
}

message GetCalibrationRequest {
  // IDs of the cameras to return the calibration from
  repeated int64 ids = 1;
}

message GetCalibrationReply {
  // Sequence of calibrations relative to the requested IDs.
  repeated is.vision.CameraCalibration calibrations = 1;
}
