# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsInterruption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'interruption_factor_name': 'str',
        'planned': 'bool',
        'start_date': 'str',
        'finish_date': 'str',
        'interruption_factor_id': 'str',
        'affected_number': 'float',
        'work_order_id': 'str',
        'complex_asset_id': 'str',
        'asset_id': 'str',
        'total_hours': 'float',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'interruption_factor_name': 'InterruptionFactorName',
        'planned': 'Planned',
        'start_date': 'StartDate',
        'finish_date': 'FinishDate',
        'interruption_factor_id': 'InterruptionFactorId',
        'affected_number': 'AffectedNumber',
        'work_order_id': 'WorkOrderId',
        'complex_asset_id': 'ComplexAssetId',
        'asset_id': 'AssetId',
        'total_hours': 'TotalHours',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, interruption_factor_name=None, planned=None, start_date=None, finish_date=None, interruption_factor_id=None, affected_number=None, work_order_id=None, complex_asset_id=None, asset_id=None, total_hours=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsInterruption - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._interruption_factor_name = None
        self._planned = None
        self._start_date = None
        self._finish_date = None
        self._interruption_factor_id = None
        self._affected_number = None
        self._work_order_id = None
        self._complex_asset_id = None
        self._asset_id = None
        self._total_hours = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if interruption_factor_name is not None:
            self.interruption_factor_name = interruption_factor_name
        if planned is not None:
            self.planned = planned
        if start_date is not None:
            self.start_date = start_date
        if finish_date is not None:
            self.finish_date = finish_date
        if interruption_factor_id is not None:
            self.interruption_factor_id = interruption_factor_id
        if affected_number is not None:
            self.affected_number = affected_number
        if work_order_id is not None:
            self.work_order_id = work_order_id
        if complex_asset_id is not None:
            self.complex_asset_id = complex_asset_id
        if asset_id is not None:
            self.asset_id = asset_id
        if total_hours is not None:
            self.total_hours = total_hours
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assetic3IntegrationRepresentationsInterruption.


        :param id: The id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interruption_factor_name(self):
        """Gets the interruption_factor_name of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The interruption_factor_name of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._interruption_factor_name

    @interruption_factor_name.setter
    def interruption_factor_name(self, interruption_factor_name):
        """Sets the interruption_factor_name of this Assetic3IntegrationRepresentationsInterruption.


        :param interruption_factor_name: The interruption_factor_name of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._interruption_factor_name = interruption_factor_name

    @property
    def planned(self):
        """Gets the planned of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The planned of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: bool
        """
        return self._planned

    @planned.setter
    def planned(self, planned):
        """Sets the planned of this Assetic3IntegrationRepresentationsInterruption.


        :param planned: The planned of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: bool
        """

        self._planned = planned

    @property
    def start_date(self):
        """Gets the start_date of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The start_date of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Assetic3IntegrationRepresentationsInterruption.


        :param start_date: The start_date of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def finish_date(self):
        """Gets the finish_date of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The finish_date of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date):
        """Sets the finish_date of this Assetic3IntegrationRepresentationsInterruption.


        :param finish_date: The finish_date of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._finish_date = finish_date

    @property
    def interruption_factor_id(self):
        """Gets the interruption_factor_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The interruption_factor_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._interruption_factor_id

    @interruption_factor_id.setter
    def interruption_factor_id(self, interruption_factor_id):
        """Sets the interruption_factor_id of this Assetic3IntegrationRepresentationsInterruption.


        :param interruption_factor_id: The interruption_factor_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._interruption_factor_id = interruption_factor_id

    @property
    def affected_number(self):
        """Gets the affected_number of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The affected_number of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: float
        """
        return self._affected_number

    @affected_number.setter
    def affected_number(self, affected_number):
        """Sets the affected_number of this Assetic3IntegrationRepresentationsInterruption.


        :param affected_number: The affected_number of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: float
        """

        self._affected_number = affected_number

    @property
    def work_order_id(self):
        """Gets the work_order_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The work_order_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._work_order_id

    @work_order_id.setter
    def work_order_id(self, work_order_id):
        """Sets the work_order_id of this Assetic3IntegrationRepresentationsInterruption.


        :param work_order_id: The work_order_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._work_order_id = work_order_id

    @property
    def complex_asset_id(self):
        """Gets the complex_asset_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The complex_asset_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._complex_asset_id

    @complex_asset_id.setter
    def complex_asset_id(self, complex_asset_id):
        """Sets the complex_asset_id of this Assetic3IntegrationRepresentationsInterruption.


        :param complex_asset_id: The complex_asset_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._complex_asset_id = complex_asset_id

    @property
    def asset_id(self):
        """Gets the asset_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The asset_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this Assetic3IntegrationRepresentationsInterruption.


        :param asset_id: The asset_id of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def total_hours(self):
        """Gets the total_hours of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The total_hours of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: float
        """
        return self._total_hours

    @total_hours.setter
    def total_hours(self, total_hours):
        """Sets the total_hours of this Assetic3IntegrationRepresentationsInterruption.


        :param total_hours: The total_hours of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: float
        """

        self._total_hours = total_hours

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsInterruption.


        :param links: The links of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsInterruption.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsInterruption.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsInterruption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
