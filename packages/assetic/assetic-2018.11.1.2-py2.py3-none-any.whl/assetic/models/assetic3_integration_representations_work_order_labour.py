# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsWorkOrderLabour(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'craft': 'str',
        'actual_quantity': 'float',
        'planned_quantity': 'float',
        'assigned_quantity': 'float',
        'planned_costs': 'float',
        'assigned_costs': 'float',
        'actual_costs': 'float',
        'assigned_group_craft_id': 'str',
        'work_task_id': 'str',
        'planned_group_craft_id': 'str',
        'work_task_status_id': 'int',
        'supporting_information': 'str',
        'actual_start_date': 'str',
        'actual_finish_date': 'str',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'craft': 'Craft',
        'actual_quantity': 'ActualQuantity',
        'planned_quantity': 'PlannedQuantity',
        'assigned_quantity': 'AssignedQuantity',
        'planned_costs': 'PlannedCosts',
        'assigned_costs': 'AssignedCosts',
        'actual_costs': 'ActualCosts',
        'assigned_group_craft_id': 'AssignedGroupCraftId',
        'work_task_id': 'WorkTaskId',
        'planned_group_craft_id': 'PlannedGroupCraftId',
        'work_task_status_id': 'WorkTaskStatusId',
        'supporting_information': 'SupportingInformation',
        'actual_start_date': 'ActualStartDate',
        'actual_finish_date': 'ActualFinishDate',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, craft=None, actual_quantity=None, planned_quantity=None, assigned_quantity=None, planned_costs=None, assigned_costs=None, actual_costs=None, assigned_group_craft_id=None, work_task_id=None, planned_group_craft_id=None, work_task_status_id=None, supporting_information=None, actual_start_date=None, actual_finish_date=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsWorkOrderLabour - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._craft = None
        self._actual_quantity = None
        self._planned_quantity = None
        self._assigned_quantity = None
        self._planned_costs = None
        self._assigned_costs = None
        self._actual_costs = None
        self._assigned_group_craft_id = None
        self._work_task_id = None
        self._planned_group_craft_id = None
        self._work_task_status_id = None
        self._supporting_information = None
        self._actual_start_date = None
        self._actual_finish_date = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if craft is not None:
            self.craft = craft
        if actual_quantity is not None:
            self.actual_quantity = actual_quantity
        if planned_quantity is not None:
            self.planned_quantity = planned_quantity
        if assigned_quantity is not None:
            self.assigned_quantity = assigned_quantity
        if planned_costs is not None:
            self.planned_costs = planned_costs
        if assigned_costs is not None:
            self.assigned_costs = assigned_costs
        if actual_costs is not None:
            self.actual_costs = actual_costs
        if assigned_group_craft_id is not None:
            self.assigned_group_craft_id = assigned_group_craft_id
        if work_task_id is not None:
            self.work_task_id = work_task_id
        if planned_group_craft_id is not None:
            self.planned_group_craft_id = planned_group_craft_id
        if work_task_status_id is not None:
            self.work_task_status_id = work_task_status_id
        if supporting_information is not None:
            self.supporting_information = supporting_information
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if actual_finish_date is not None:
            self.actual_finish_date = actual_finish_date
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param id: The id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def craft(self):
        """Gets the craft of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The craft of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._craft

    @craft.setter
    def craft(self, craft):
        """Sets the craft of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param craft: The craft of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._craft = craft

    @property
    def actual_quantity(self):
        """Gets the actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: float
        """
        return self._actual_quantity

    @actual_quantity.setter
    def actual_quantity(self, actual_quantity):
        """Sets the actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param actual_quantity: The actual_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: float
        """
        if actual_quantity is not None and actual_quantity < 0:  # noqa: E501
            raise ValueError("Invalid value for `actual_quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._actual_quantity = actual_quantity

    @property
    def planned_quantity(self):
        """Gets the planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: float
        """
        return self._planned_quantity

    @planned_quantity.setter
    def planned_quantity(self, planned_quantity):
        """Sets the planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param planned_quantity: The planned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: float
        """
        if planned_quantity is not None and planned_quantity < 0:  # noqa: E501
            raise ValueError("Invalid value for `planned_quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planned_quantity = planned_quantity

    @property
    def assigned_quantity(self):
        """Gets the assigned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The assigned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: float
        """
        return self._assigned_quantity

    @assigned_quantity.setter
    def assigned_quantity(self, assigned_quantity):
        """Sets the assigned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param assigned_quantity: The assigned_quantity of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: float
        """
        if assigned_quantity is not None and assigned_quantity < 0:  # noqa: E501
            raise ValueError("Invalid value for `assigned_quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._assigned_quantity = assigned_quantity

    @property
    def planned_costs(self):
        """Gets the planned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The planned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: float
        """
        return self._planned_costs

    @planned_costs.setter
    def planned_costs(self, planned_costs):
        """Sets the planned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param planned_costs: The planned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: float
        """
        if planned_costs is not None and planned_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `planned_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planned_costs = planned_costs

    @property
    def assigned_costs(self):
        """Gets the assigned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The assigned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: float
        """
        return self._assigned_costs

    @assigned_costs.setter
    def assigned_costs(self, assigned_costs):
        """Sets the assigned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param assigned_costs: The assigned_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: float
        """
        if assigned_costs is not None and assigned_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `assigned_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._assigned_costs = assigned_costs

    @property
    def actual_costs(self):
        """Gets the actual_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The actual_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: float
        """
        return self._actual_costs

    @actual_costs.setter
    def actual_costs(self, actual_costs):
        """Sets the actual_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param actual_costs: The actual_costs of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: float
        """
        if actual_costs is not None and actual_costs < 0:  # noqa: E501
            raise ValueError("Invalid value for `actual_costs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._actual_costs = actual_costs

    @property
    def assigned_group_craft_id(self):
        """Gets the assigned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The assigned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._assigned_group_craft_id

    @assigned_group_craft_id.setter
    def assigned_group_craft_id(self, assigned_group_craft_id):
        """Sets the assigned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param assigned_group_craft_id: The assigned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._assigned_group_craft_id = assigned_group_craft_id

    @property
    def work_task_id(self):
        """Gets the work_task_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The work_task_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._work_task_id

    @work_task_id.setter
    def work_task_id(self, work_task_id):
        """Sets the work_task_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param work_task_id: The work_task_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._work_task_id = work_task_id

    @property
    def planned_group_craft_id(self):
        """Gets the planned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The planned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._planned_group_craft_id

    @planned_group_craft_id.setter
    def planned_group_craft_id(self, planned_group_craft_id):
        """Sets the planned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param planned_group_craft_id: The planned_group_craft_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._planned_group_craft_id = planned_group_craft_id

    @property
    def work_task_status_id(self):
        """Gets the work_task_status_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The work_task_status_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: int
        """
        return self._work_task_status_id

    @work_task_status_id.setter
    def work_task_status_id(self, work_task_status_id):
        """Sets the work_task_status_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param work_task_status_id: The work_task_status_id of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: int
        """

        self._work_task_status_id = work_task_status_id

    @property
    def supporting_information(self):
        """Gets the supporting_information of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The supporting_information of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._supporting_information

    @supporting_information.setter
    def supporting_information(self, supporting_information):
        """Sets the supporting_information of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param supporting_information: The supporting_information of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._supporting_information = supporting_information

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The actual_start_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param actual_start_date: The actual_start_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._actual_start_date = actual_start_date

    @property
    def actual_finish_date(self):
        """Gets the actual_finish_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The actual_finish_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: str
        """
        return self._actual_finish_date

    @actual_finish_date.setter
    def actual_finish_date(self, actual_finish_date):
        """Sets the actual_finish_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param actual_finish_date: The actual_finish_date of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: str
        """

        self._actual_finish_date = actual_finish_date

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param links: The links of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsWorkOrderLabour.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsWorkOrderLabour.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsWorkOrderLabour):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
