# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v1
    Contact: kamonohashi-support@jp.nssol.nssmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint

import six


class DataApiModelsCreateInputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotation_file_name': 'str',
        'annotation_file_stored_path': 'str',
        'image_file_name': 'str',
        'image_file_stored_path': 'str',
        'memo': 'str',
        'name': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'annotation_file_name': 'annotationFileName',
        'annotation_file_stored_path': 'annotationFileStoredPath',
        'image_file_name': 'imageFileName',
        'image_file_stored_path': 'imageFileStoredPath',
        'memo': 'memo',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, annotation_file_name=None, annotation_file_stored_path=None, image_file_name=None, image_file_stored_path=None, memo=None, name=None, tags=None):  # noqa: E501
        """DataApiModelsCreateInputModel - a model defined in Swagger"""  # noqa: E501

        self._annotation_file_name = None
        self._annotation_file_stored_path = None
        self._image_file_name = None
        self._image_file_stored_path = None
        self._memo = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if annotation_file_name is not None:
            self.annotation_file_name = annotation_file_name
        if annotation_file_stored_path is not None:
            self.annotation_file_stored_path = annotation_file_stored_path
        if image_file_name is not None:
            self.image_file_name = image_file_name
        if image_file_stored_path is not None:
            self.image_file_stored_path = image_file_stored_path
        if memo is not None:
            self.memo = memo
        self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def annotation_file_name(self):
        """Gets the annotation_file_name of this DataApiModelsCreateInputModel.  # noqa: E501

        アノテーションファイル名  # noqa: E501

        :return: The annotation_file_name of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: str
        """
        return self._annotation_file_name

    @annotation_file_name.setter
    def annotation_file_name(self, annotation_file_name):
        """Sets the annotation_file_name of this DataApiModelsCreateInputModel.

        アノテーションファイル名  # noqa: E501

        :param annotation_file_name: The annotation_file_name of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: str
        """

        self._annotation_file_name = annotation_file_name

    @property
    def annotation_file_stored_path(self):
        """Gets the annotation_file_stored_path of this DataApiModelsCreateInputModel.  # noqa: E501

        アノテーションファイル保存先  # noqa: E501

        :return: The annotation_file_stored_path of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: str
        """
        return self._annotation_file_stored_path

    @annotation_file_stored_path.setter
    def annotation_file_stored_path(self, annotation_file_stored_path):
        """Sets the annotation_file_stored_path of this DataApiModelsCreateInputModel.

        アノテーションファイル保存先  # noqa: E501

        :param annotation_file_stored_path: The annotation_file_stored_path of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: str
        """

        self._annotation_file_stored_path = annotation_file_stored_path

    @property
    def image_file_name(self):
        """Gets the image_file_name of this DataApiModelsCreateInputModel.  # noqa: E501

        画像データファイル名  # noqa: E501

        :return: The image_file_name of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: str
        """
        return self._image_file_name

    @image_file_name.setter
    def image_file_name(self, image_file_name):
        """Sets the image_file_name of this DataApiModelsCreateInputModel.

        画像データファイル名  # noqa: E501

        :param image_file_name: The image_file_name of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: str
        """

        self._image_file_name = image_file_name

    @property
    def image_file_stored_path(self):
        """Gets the image_file_stored_path of this DataApiModelsCreateInputModel.  # noqa: E501

        画像ファイル保存先  # noqa: E501

        :return: The image_file_stored_path of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: str
        """
        return self._image_file_stored_path

    @image_file_stored_path.setter
    def image_file_stored_path(self, image_file_stored_path):
        """Sets the image_file_stored_path of this DataApiModelsCreateInputModel.

        画像ファイル保存先  # noqa: E501

        :param image_file_stored_path: The image_file_stored_path of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: str
        """

        self._image_file_stored_path = image_file_stored_path

    @property
    def memo(self):
        """Gets the memo of this DataApiModelsCreateInputModel.  # noqa: E501

        メモ  # noqa: E501

        :return: The memo of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this DataApiModelsCreateInputModel.

        メモ  # noqa: E501

        :param memo: The memo of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def name(self):
        """Gets the name of this DataApiModelsCreateInputModel.  # noqa: E501

        データ名  # noqa: E501

        :return: The name of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataApiModelsCreateInputModel.

        データ名  # noqa: E501

        :param name: The name of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DataApiModelsCreateInputModel.  # noqa: E501

        タグ。  # noqa: E501

        :return: The tags of this DataApiModelsCreateInputModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DataApiModelsCreateInputModel.

        タグ。  # noqa: E501

        :param tags: The tags of this DataApiModelsCreateInputModel.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataApiModelsCreateInputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataApiModelsCreateInputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
