#!/usr/bin/env python3

# This file is part of tf-rddlsim.

# tf-rddlsim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# tf-rddlsim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with tf-rddlsim. If not, see <http://www.gnu.org/licenses/>.


import argparse
import numpy as np
import time


def parse_args():
    description = 'RDDL2TensorFlow compiler and simulator'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('rddl', type=str, help='RDDL filepath')
    parser.add_argument(
        '--policy',
        default='random',
        choices=('random', 'default'),
        help='type of policy (default=random)'
    )
    parser.add_argument(
        '-hr', '--horizon',
        type=int, default=40,
        help='number of timesteps of each trajectory (default=40)'
    )
    parser.add_argument(
        '-b', '--batch_size',
        type=int, default=75,
        help='number of trajectories in a batch (default=75)'
    )
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='verbosity mode'
    )
    return parser.parse_args()


def read_file(path):
    with open(path, 'r') as f:
        return f.read()


def print_simulation_parameters(args):
    print('*********************************************************')
    print(' RDDL domain = {}'.format(args.rddl))
    print('*********************************************************')
    print('>> policy = {}'.format(args.policy))
    print('>> horizon = {}'.format(args.horizon))
    print('>> batch_size = {}'.format(args.batch_size))
    print()


def compile(rddl):
    from tfrddlsim.parser import RDDLParser
    from tfrddlsim.compiler import Compiler

    # parse RDDL
    parser = RDDLParser()
    parser.build()
    rddl = parser.parse(rddl)

    # build RDDL2TensorFlow compiler
    return Compiler(rddl, batch_mode=True)


def get_policy(compiler, policy_type, batch_size):
    from tfrddlsim.policy import DefaultPolicy, RandomPolicy
    policy = RandomPolicy if policy_type == 'random' else DefaultPolicy
    return policy(compiler, batch_size)


def simulate(compiler, policy, horizon, batch_size):
    from tfrddlsim.simulator import Simulator
    start = time.time()
    simulator = Simulator(compiler, policy, batch_size)
    trajectories = simulator.run(horizon)
    uptime = time.time() - start
    return uptime, trajectories


def performance_stats(trajectories):
    _, _, _, _, rewards = trajectories
    totals = np.sum(rewards, axis=1)
    stats = {
        'totals': totals,
        'avg': np.mean(totals),
        'stddev': np.std(totals)
    }
    return stats


def display(compiler, stats, trajectories, verbose):
    from tfrddlsim.visualizer import BasicVisualizer
    viz = BasicVisualizer(compiler, verbose)
    viz.render(stats, trajectories)


def time_stats(uptime, horizon, batch_size):
    time_per_batch = uptime / batch_size
    time_per_step = uptime / horizon
    print('*********************************************************')
    print(' TIME STATS:')
    print('*********************************************************')
    print('>> Simulation done in {:.6f} sec.'.format(uptime))
    print('>> Time per batch = {:.6f} sec.'.format(time_per_batch))
    print('>> Time per step  = {:.6f} sec.'.format(time_per_step))


if __name__ == '__main__':

    # parser CLI arguments
    args = parse_args()
    print_simulation_parameters(args)

    # read RDDL file
    rddl = read_file(args.rddl)

    # compile RDDL to TensorFlow
    rddl2tf = compile(rddl)

    # build policy
    policy = get_policy(rddl2tf, args.policy, args.batch_size)

    # run simulations
    uptime, trajectories = simulate(rddl2tf, policy, args.horizon, args.batch_size)

    # overall performance
    stats = performance_stats(trajectories)

    # visualize trajectories
    display(rddl2tf, stats, trajectories, args.verbose)

    # stats
    time_stats(uptime, args.horizon, args.batch_size)
