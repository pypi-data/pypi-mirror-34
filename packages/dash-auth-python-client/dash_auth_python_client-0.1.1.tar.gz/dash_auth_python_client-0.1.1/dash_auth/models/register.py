# coding: utf-8

"""
    Dash Auth API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Register(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'surname': 'str',
        'email': 'str',
        'gender': 'str',
        'address': 'str',
        'suburb': 'str',
        'state': 'str',
        'mobile_phone_number': 'str',
        'password': 'str',
        'postcode': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'surname': 'surname',
        'email': 'email',
        'gender': 'gender',
        'address': 'address',
        'suburb': 'suburb',
        'state': 'state',
        'mobile_phone_number': 'mobilePhoneNumber',
        'password': 'password',
        'postcode': 'postcode'
    }

    def __init__(self, first_name=None, surname=None, email=None, gender=None, address=None, suburb=None, state=None, mobile_phone_number=None, password=None, postcode=None):  # noqa: E501
        """Register - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._surname = None
        self._email = None
        self._gender = None
        self._address = None
        self._suburb = None
        self._state = None
        self._mobile_phone_number = None
        self._password = None
        self._postcode = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if surname is not None:
            self.surname = surname
        if email is not None:
            self.email = email
        if gender is not None:
            self.gender = gender
        if address is not None:
            self.address = address
        if suburb is not None:
            self.suburb = suburb
        if state is not None:
            self.state = state
        if mobile_phone_number is not None:
            self.mobile_phone_number = mobile_phone_number
        if password is not None:
            self.password = password
        if postcode is not None:
            self.postcode = postcode

    @property
    def first_name(self):
        """Gets the first_name of this Register.  # noqa: E501


        :return: The first_name of this Register.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Register.


        :param first_name: The first_name of this Register.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def surname(self):
        """Gets the surname of this Register.  # noqa: E501


        :return: The surname of this Register.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Register.


        :param surname: The surname of this Register.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def email(self):
        """Gets the email of this Register.  # noqa: E501


        :return: The email of this Register.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Register.


        :param email: The email of this Register.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this Register.  # noqa: E501


        :return: The gender of this Register.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Register.


        :param gender: The gender of this Register.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def address(self):
        """Gets the address of this Register.  # noqa: E501


        :return: The address of this Register.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Register.


        :param address: The address of this Register.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def suburb(self):
        """Gets the suburb of this Register.  # noqa: E501


        :return: The suburb of this Register.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this Register.


        :param suburb: The suburb of this Register.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def state(self):
        """Gets the state of this Register.  # noqa: E501


        :return: The state of this Register.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Register.


        :param state: The state of this Register.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def mobile_phone_number(self):
        """Gets the mobile_phone_number of this Register.  # noqa: E501


        :return: The mobile_phone_number of this Register.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone_number

    @mobile_phone_number.setter
    def mobile_phone_number(self, mobile_phone_number):
        """Sets the mobile_phone_number of this Register.


        :param mobile_phone_number: The mobile_phone_number of this Register.  # noqa: E501
        :type: str
        """

        self._mobile_phone_number = mobile_phone_number

    @property
    def password(self):
        """Gets the password of this Register.  # noqa: E501


        :return: The password of this Register.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Register.


        :param password: The password of this Register.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def postcode(self):
        """Gets the postcode of this Register.  # noqa: E501


        :return: The postcode of this Register.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Register.


        :param postcode: The postcode of this Register.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Register):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
