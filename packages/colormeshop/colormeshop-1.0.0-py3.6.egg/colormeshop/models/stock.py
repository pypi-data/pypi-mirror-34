# coding: utf-8

"""
    カラーミーショップ API

    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|\"code\"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Stock(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'product_id': 'int',
        'name': 'str',
        'option1_value': 'str',
        'option2_value': 'str',
        'stocks': 'int',
        'few_num': 'int',
        'model_number': 'str',
        'category': 'object',
        'display_state': 'str',
        'sales_price': 'int',
        'price': 'int',
        'members_price': 'int',
        'cost': 'int',
        'delivery_charge': 'int',
        'min_num': 'int',
        'max_num': 'int',
        'sale_start_date': 'int',
        'sale_end_date': 'int',
        'unit': 'str',
        'weight': 'int',
        'soldout_display': 'bool',
        'sort': 'int',
        'simple_expl': 'str',
        'expl': 'str',
        'mobile_expl': 'str',
        'smartphone_expl': 'str',
        'make_date': 'int',
        'update_date': 'int',
        'memo': 'str',
        'image_url': 'str',
        'mobile_image_url': 'str',
        'thumbnail_image_url': 'str',
        'images': 'list[object]'
    }

    attribute_map = {
        'account_id': 'account_id',
        'product_id': 'product_id',
        'name': 'name',
        'option1_value': 'option1_value',
        'option2_value': 'option2_value',
        'stocks': 'stocks',
        'few_num': 'few_num',
        'model_number': 'model_number',
        'category': 'category',
        'display_state': 'display_state',
        'sales_price': 'sales_price',
        'price': 'price',
        'members_price': 'members_price',
        'cost': 'cost',
        'delivery_charge': 'delivery_charge',
        'min_num': 'min_num',
        'max_num': 'max_num',
        'sale_start_date': 'sale_start_date',
        'sale_end_date': 'sale_end_date',
        'unit': 'unit',
        'weight': 'weight',
        'soldout_display': 'soldout_display',
        'sort': 'sort',
        'simple_expl': 'simple_expl',
        'expl': 'expl',
        'mobile_expl': 'mobile_expl',
        'smartphone_expl': 'smartphone_expl',
        'make_date': 'make_date',
        'update_date': 'update_date',
        'memo': 'memo',
        'image_url': 'image_url',
        'mobile_image_url': 'mobile_image_url',
        'thumbnail_image_url': 'thumbnail_image_url',
        'images': 'images'
    }

    def __init__(self, account_id=None, product_id=None, name=None, option1_value=None, option2_value=None, stocks=None, few_num=None, model_number=None, category=None, display_state=None, sales_price=None, price=None, members_price=None, cost=None, delivery_charge=None, min_num=None, max_num=None, sale_start_date=None, sale_end_date=None, unit=None, weight=None, soldout_display=None, sort=None, simple_expl=None, expl=None, mobile_expl=None, smartphone_expl=None, make_date=None, update_date=None, memo=None, image_url=None, mobile_image_url=None, thumbnail_image_url=None, images=None):  # noqa: E501
        """Stock - a model defined in OpenAPI"""  # noqa: E501

        self._account_id = None
        self._product_id = None
        self._name = None
        self._option1_value = None
        self._option2_value = None
        self._stocks = None
        self._few_num = None
        self._model_number = None
        self._category = None
        self._display_state = None
        self._sales_price = None
        self._price = None
        self._members_price = None
        self._cost = None
        self._delivery_charge = None
        self._min_num = None
        self._max_num = None
        self._sale_start_date = None
        self._sale_end_date = None
        self._unit = None
        self._weight = None
        self._soldout_display = None
        self._sort = None
        self._simple_expl = None
        self._expl = None
        self._mobile_expl = None
        self._smartphone_expl = None
        self._make_date = None
        self._update_date = None
        self._memo = None
        self._image_url = None
        self._mobile_image_url = None
        self._thumbnail_image_url = None
        self._images = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if product_id is not None:
            self.product_id = product_id
        if name is not None:
            self.name = name
        if option1_value is not None:
            self.option1_value = option1_value
        if option2_value is not None:
            self.option2_value = option2_value
        if stocks is not None:
            self.stocks = stocks
        if few_num is not None:
            self.few_num = few_num
        if model_number is not None:
            self.model_number = model_number
        if category is not None:
            self.category = category
        if display_state is not None:
            self.display_state = display_state
        if sales_price is not None:
            self.sales_price = sales_price
        if price is not None:
            self.price = price
        if members_price is not None:
            self.members_price = members_price
        if cost is not None:
            self.cost = cost
        if delivery_charge is not None:
            self.delivery_charge = delivery_charge
        if min_num is not None:
            self.min_num = min_num
        if max_num is not None:
            self.max_num = max_num
        if sale_start_date is not None:
            self.sale_start_date = sale_start_date
        if sale_end_date is not None:
            self.sale_end_date = sale_end_date
        if unit is not None:
            self.unit = unit
        if weight is not None:
            self.weight = weight
        if soldout_display is not None:
            self.soldout_display = soldout_display
        if sort is not None:
            self.sort = sort
        if simple_expl is not None:
            self.simple_expl = simple_expl
        if expl is not None:
            self.expl = expl
        if mobile_expl is not None:
            self.mobile_expl = mobile_expl
        if smartphone_expl is not None:
            self.smartphone_expl = smartphone_expl
        if make_date is not None:
            self.make_date = make_date
        if update_date is not None:
            self.update_date = update_date
        if memo is not None:
            self.memo = memo
        if image_url is not None:
            self.image_url = image_url
        if mobile_image_url is not None:
            self.mobile_image_url = mobile_image_url
        if thumbnail_image_url is not None:
            self.thumbnail_image_url = thumbnail_image_url
        if images is not None:
            self.images = images

    @property
    def account_id(self):
        """Gets the account_id of this Stock.  # noqa: E501

        ショップアカウントID  # noqa: E501

        :return: The account_id of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Stock.

        ショップアカウントID  # noqa: E501

        :param account_id: The account_id of this Stock.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def product_id(self):
        """Gets the product_id of this Stock.  # noqa: E501

        商品ID  # noqa: E501

        :return: The product_id of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Stock.

        商品ID  # noqa: E501

        :param product_id: The product_id of this Stock.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def name(self):
        """Gets the name of this Stock.  # noqa: E501

        商品名  # noqa: E501

        :return: The name of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stock.

        商品名  # noqa: E501

        :param name: The name of this Stock.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def option1_value(self):
        """Gets the option1_value of this Stock.  # noqa: E501

        オプション1の値  # noqa: E501

        :return: The option1_value of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._option1_value

    @option1_value.setter
    def option1_value(self, option1_value):
        """Sets the option1_value of this Stock.

        オプション1の値  # noqa: E501

        :param option1_value: The option1_value of this Stock.  # noqa: E501
        :type: str
        """

        self._option1_value = option1_value

    @property
    def option2_value(self):
        """Gets the option2_value of this Stock.  # noqa: E501

        オプション2の値  # noqa: E501

        :return: The option2_value of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._option2_value

    @option2_value.setter
    def option2_value(self, option2_value):
        """Sets the option2_value of this Stock.

        オプション2の値  # noqa: E501

        :param option2_value: The option2_value of this Stock.  # noqa: E501
        :type: str
        """

        self._option2_value = option2_value

    @property
    def stocks(self):
        """Gets the stocks of this Stock.  # noqa: E501

        在庫数  # noqa: E501

        :return: The stocks of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this Stock.

        在庫数  # noqa: E501

        :param stocks: The stocks of this Stock.  # noqa: E501
        :type: int
        """

        self._stocks = stocks

    @property
    def few_num(self):
        """Gets the few_num of this Stock.  # noqa: E501

        残りわずかとなる在庫数  # noqa: E501

        :return: The few_num of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._few_num

    @few_num.setter
    def few_num(self, few_num):
        """Sets the few_num of this Stock.

        残りわずかとなる在庫数  # noqa: E501

        :param few_num: The few_num of this Stock.  # noqa: E501
        :type: int
        """

        self._few_num = few_num

    @property
    def model_number(self):
        """Gets the model_number of this Stock.  # noqa: E501

        型番  # noqa: E501

        :return: The model_number of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this Stock.

        型番  # noqa: E501

        :param model_number: The model_number of this Stock.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def category(self):
        """Gets the category of this Stock.  # noqa: E501


        :return: The category of this Stock.  # noqa: E501
        :rtype: object
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Stock.


        :param category: The category of this Stock.  # noqa: E501
        :type: object
        """

        self._category = category

    @property
    def display_state(self):
        """Gets the display_state of this Stock.  # noqa: E501

        掲載設定  # noqa: E501

        :return: The display_state of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._display_state

    @display_state.setter
    def display_state(self, display_state):
        """Sets the display_state of this Stock.

        掲載設定  # noqa: E501

        :param display_state: The display_state of this Stock.  # noqa: E501
        :type: str
        """
        allowed_values = ["showing", "hidden", "showing_for_members", "sale_for_members"]  # noqa: E501
        if display_state not in allowed_values:
            raise ValueError(
                "Invalid value for `display_state` ({0}), must be one of {1}"  # noqa: E501
                .format(display_state, allowed_values)
            )

        self._display_state = display_state

    @property
    def sales_price(self):
        """Gets the sales_price of this Stock.  # noqa: E501

        販売価格  # noqa: E501

        :return: The sales_price of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this Stock.

        販売価格  # noqa: E501

        :param sales_price: The sales_price of this Stock.  # noqa: E501
        :type: int
        """

        self._sales_price = sales_price

    @property
    def price(self):
        """Gets the price of this Stock.  # noqa: E501

        定価  # noqa: E501

        :return: The price of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Stock.

        定価  # noqa: E501

        :param price: The price of this Stock.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def members_price(self):
        """Gets the members_price of this Stock.  # noqa: E501

        会員価格  # noqa: E501

        :return: The members_price of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._members_price

    @members_price.setter
    def members_price(self, members_price):
        """Sets the members_price of this Stock.

        会員価格  # noqa: E501

        :param members_price: The members_price of this Stock.  # noqa: E501
        :type: int
        """

        self._members_price = members_price

    @property
    def cost(self):
        """Gets the cost of this Stock.  # noqa: E501

        原価  # noqa: E501

        :return: The cost of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Stock.

        原価  # noqa: E501

        :param cost: The cost of this Stock.  # noqa: E501
        :type: int
        """

        self._cost = cost

    @property
    def delivery_charge(self):
        """Gets the delivery_charge of this Stock.  # noqa: E501

        個別送料  # noqa: E501

        :return: The delivery_charge of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._delivery_charge

    @delivery_charge.setter
    def delivery_charge(self, delivery_charge):
        """Sets the delivery_charge of this Stock.

        個別送料  # noqa: E501

        :param delivery_charge: The delivery_charge of this Stock.  # noqa: E501
        :type: int
        """

        self._delivery_charge = delivery_charge

    @property
    def min_num(self):
        """Gets the min_num of this Stock.  # noqa: E501

        最小購入数量  # noqa: E501

        :return: The min_num of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._min_num

    @min_num.setter
    def min_num(self, min_num):
        """Sets the min_num of this Stock.

        最小購入数量  # noqa: E501

        :param min_num: The min_num of this Stock.  # noqa: E501
        :type: int
        """

        self._min_num = min_num

    @property
    def max_num(self):
        """Gets the max_num of this Stock.  # noqa: E501

        最大購入数量  # noqa: E501

        :return: The max_num of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._max_num

    @max_num.setter
    def max_num(self, max_num):
        """Sets the max_num of this Stock.

        最大購入数量  # noqa: E501

        :param max_num: The max_num of this Stock.  # noqa: E501
        :type: int
        """

        self._max_num = max_num

    @property
    def sale_start_date(self):
        """Gets the sale_start_date of this Stock.  # noqa: E501

        掲載開始時刻  # noqa: E501

        :return: The sale_start_date of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._sale_start_date

    @sale_start_date.setter
    def sale_start_date(self, sale_start_date):
        """Sets the sale_start_date of this Stock.

        掲載開始時刻  # noqa: E501

        :param sale_start_date: The sale_start_date of this Stock.  # noqa: E501
        :type: int
        """

        self._sale_start_date = sale_start_date

    @property
    def sale_end_date(self):
        """Gets the sale_end_date of this Stock.  # noqa: E501

        掲載終了時刻  # noqa: E501

        :return: The sale_end_date of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._sale_end_date

    @sale_end_date.setter
    def sale_end_date(self, sale_end_date):
        """Sets the sale_end_date of this Stock.

        掲載終了時刻  # noqa: E501

        :param sale_end_date: The sale_end_date of this Stock.  # noqa: E501
        :type: int
        """

        self._sale_end_date = sale_end_date

    @property
    def unit(self):
        """Gets the unit of this Stock.  # noqa: E501

        単位  # noqa: E501

        :return: The unit of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Stock.

        単位  # noqa: E501

        :param unit: The unit of this Stock.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def weight(self):
        """Gets the weight of this Stock.  # noqa: E501

        重量(グラム単位)  # noqa: E501

        :return: The weight of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Stock.

        重量(グラム単位)  # noqa: E501

        :param weight: The weight of this Stock.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def soldout_display(self):
        """Gets the soldout_display of this Stock.  # noqa: E501

        売り切れているときもショップに表示するか  # noqa: E501

        :return: The soldout_display of this Stock.  # noqa: E501
        :rtype: bool
        """
        return self._soldout_display

    @soldout_display.setter
    def soldout_display(self, soldout_display):
        """Sets the soldout_display of this Stock.

        売り切れているときもショップに表示するか  # noqa: E501

        :param soldout_display: The soldout_display of this Stock.  # noqa: E501
        :type: bool
        """

        self._soldout_display = soldout_display

    @property
    def sort(self):
        """Gets the sort of this Stock.  # noqa: E501

        表示順  # noqa: E501

        :return: The sort of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Stock.

        表示順  # noqa: E501

        :param sort: The sort of this Stock.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def simple_expl(self):
        """Gets the simple_expl of this Stock.  # noqa: E501

        簡易説明  # noqa: E501

        :return: The simple_expl of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._simple_expl

    @simple_expl.setter
    def simple_expl(self, simple_expl):
        """Sets the simple_expl of this Stock.

        簡易説明  # noqa: E501

        :param simple_expl: The simple_expl of this Stock.  # noqa: E501
        :type: str
        """

        self._simple_expl = simple_expl

    @property
    def expl(self):
        """Gets the expl of this Stock.  # noqa: E501

        商品説明  # noqa: E501

        :return: The expl of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._expl

    @expl.setter
    def expl(self, expl):
        """Sets the expl of this Stock.

        商品説明  # noqa: E501

        :param expl: The expl of this Stock.  # noqa: E501
        :type: str
        """

        self._expl = expl

    @property
    def mobile_expl(self):
        """Gets the mobile_expl of this Stock.  # noqa: E501

        フィーチャーフォン向けショップの商品説明  # noqa: E501

        :return: The mobile_expl of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._mobile_expl

    @mobile_expl.setter
    def mobile_expl(self, mobile_expl):
        """Sets the mobile_expl of this Stock.

        フィーチャーフォン向けショップの商品説明  # noqa: E501

        :param mobile_expl: The mobile_expl of this Stock.  # noqa: E501
        :type: str
        """

        self._mobile_expl = mobile_expl

    @property
    def smartphone_expl(self):
        """Gets the smartphone_expl of this Stock.  # noqa: E501

        スマホ向けショップの商品説明  # noqa: E501

        :return: The smartphone_expl of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._smartphone_expl

    @smartphone_expl.setter
    def smartphone_expl(self, smartphone_expl):
        """Sets the smartphone_expl of this Stock.

        スマホ向けショップの商品説明  # noqa: E501

        :param smartphone_expl: The smartphone_expl of this Stock.  # noqa: E501
        :type: str
        """

        self._smartphone_expl = smartphone_expl

    @property
    def make_date(self):
        """Gets the make_date of this Stock.  # noqa: E501

        商品作成日時  # noqa: E501

        :return: The make_date of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._make_date

    @make_date.setter
    def make_date(self, make_date):
        """Sets the make_date of this Stock.

        商品作成日時  # noqa: E501

        :param make_date: The make_date of this Stock.  # noqa: E501
        :type: int
        """

        self._make_date = make_date

    @property
    def update_date(self):
        """Gets the update_date of this Stock.  # noqa: E501

        商品更新日時  # noqa: E501

        :return: The update_date of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Stock.

        商品更新日時  # noqa: E501

        :param update_date: The update_date of this Stock.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def memo(self):
        """Gets the memo of this Stock.  # noqa: E501

        備考  # noqa: E501

        :return: The memo of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Stock.

        備考  # noqa: E501

        :param memo: The memo of this Stock.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def image_url(self):
        """Gets the image_url of this Stock.  # noqa: E501

        メインの商品画像URL  # noqa: E501

        :return: The image_url of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Stock.

        メインの商品画像URL  # noqa: E501

        :param image_url: The image_url of this Stock.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def mobile_image_url(self):
        """Gets the mobile_image_url of this Stock.  # noqa: E501

        メインの商品画像のモバイル用URL  # noqa: E501

        :return: The mobile_image_url of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._mobile_image_url

    @mobile_image_url.setter
    def mobile_image_url(self, mobile_image_url):
        """Sets the mobile_image_url of this Stock.

        メインの商品画像のモバイル用URL  # noqa: E501

        :param mobile_image_url: The mobile_image_url of this Stock.  # noqa: E501
        :type: str
        """

        self._mobile_image_url = mobile_image_url

    @property
    def thumbnail_image_url(self):
        """Gets the thumbnail_image_url of this Stock.  # noqa: E501

        メインの商品画像のサムネイルURL  # noqa: E501

        :return: The thumbnail_image_url of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_image_url

    @thumbnail_image_url.setter
    def thumbnail_image_url(self, thumbnail_image_url):
        """Sets the thumbnail_image_url of this Stock.

        メインの商品画像のサムネイルURL  # noqa: E501

        :param thumbnail_image_url: The thumbnail_image_url of this Stock.  # noqa: E501
        :type: str
        """

        self._thumbnail_image_url = thumbnail_image_url

    @property
    def images(self):
        """Gets the images of this Stock.  # noqa: E501

        メインの商品画像以外の3つの画像に関する、PC用とモバイル用の画像URL  # noqa: E501

        :return: The images of this Stock.  # noqa: E501
        :rtype: list[object]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Stock.

        メインの商品画像以外の3つの画像に関する、PC用とモバイル用の画像URL  # noqa: E501

        :param images: The images of this Stock.  # noqa: E501
        :type: list[object]
        """

        self._images = images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
